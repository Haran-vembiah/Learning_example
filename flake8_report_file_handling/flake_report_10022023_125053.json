{".\\commons\\context.py": [{"code": "D205", "filename": ".\\commons\\context.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe context module helps with keeping track of the AUT's state, i.e. the test context.\nIt includes functions to identify the current screen and the state of the elements on it, running processes,\nand (hopefully) anything else that might affect the user's available actions.\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\commons\\context.py", "line_number": 13, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 30, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_web_driver(sut_driver_factory: WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\context.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Context:\n"}, {"code": "D107", "filename": ".\\commons\\context.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_context():\n"}, {"code": "E302", "filename": ".\\commons\\context.py", "line_number": 44, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_context():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_context(ctx_dictionary):\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_context():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 58, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_screen():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 63, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_states():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 68, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_active_elements():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 73, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_routes():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 78, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_run_mode():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 83, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_active_vp():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 88, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_active_vp(vp):\n"}, {"code": "D205", "filename": ".\\commons\\context.py", "line_number": 95, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    # For testing only: Initializing the results\n    current_vp_results.vp_id = 9\n    current_vp_results.test_result = 'PASSED'\n    current_vp_results.assertion_time = datetime.now()\n    current_vp_results.test_run_id = 3\n    current_vp_results.test_step_id = 3\n    current_vp_results.test_step_version = None\n    current_vp_results.test_step_instance = None\n    current_vp_results.test_case_id = None\n    current_vp_results.test_case_version = None\n    current_vp_results.test_case_instance = None\n    current_vp_results.test_suite_id = None\n    current_vp_results.test_suite_version = None\n    current_vp_results.session_id = 'supertestsession'\n    current_vp_results.vp_version = 'v.1.0'\n    current_vp_results.ctx_id = 8\n    current_vp_results.vp_dyn_param_val = None\n    current_vp_results.ctx_data = None\n    # END For testing only: Initializing the results\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\context.py", "line_number": 95, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    # For testing only: Initializing the results\n    current_vp_results.vp_id = 9\n    current_vp_results.test_result = 'PASSED'\n    current_vp_results.assertion_time = datetime.now()\n    current_vp_results.test_run_id = 3\n    current_vp_results.test_step_id = 3\n    current_vp_results.test_step_version = None\n    current_vp_results.test_step_instance = None\n    current_vp_results.test_case_id = None\n    current_vp_results.test_case_version = None\n    current_vp_results.test_case_instance = None\n    current_vp_results.test_suite_id = None\n    current_vp_results.test_suite_version = None\n    current_vp_results.session_id = 'supertestsession'\n    current_vp_results.vp_version = 'v.1.0'\n    current_vp_results.ctx_id = 8\n    current_vp_results.vp_dyn_param_val = None\n    current_vp_results.ctx_data = None\n    # END For testing only: Initializing the results\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 119, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_vp_results(vp_results):\n"}, {"code": "D101", "filename": ".\\commons\\context.py", "line_number": 122, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestRunContext:\n"}, {"code": "E302", "filename": ".\\commons\\context.py", "line_number": 122, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class TestRunContext:\n"}, {"code": "D107", "filename": ".\\commons\\context.py", "line_number": 123, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, test_session_id = None):\n"}, {"code": "E251", "filename": ".\\commons\\context.py", "line_number": 123, "column_number": 39, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "    def __init__(self, test_session_id = None):\n"}, {"code": "E251", "filename": ".\\commons\\context.py", "line_number": 123, "column_number": 41, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "    def __init__(self, test_session_id = None):\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 139, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def inc_ctx_seq():\n"}, {"code": "D103", "filename": ".\\commons\\context.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_ctx_seq():\n"}], ".\\commons\\fields.py": [{"code": "D205", "filename": ".\\commons\\fields.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe fields module contains functions to help with the verification of parameter values and their graphical\nrepresentation on the GUI.\n\n\"\"\""}, {"code": "D400", "filename": ".\\commons\\fields.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n\nThe fields module contains functions to help with the verification of parameter values and their graphical\nrepresentation on the GUI.\n\n\"\"\""}, {"code": "W292", "filename": ".\\commons\\fields.py", "line_number": 6, "column_number": 4, "text": "no newline at end of file", "physical_line": "\"\"\"\n\nThe fields module contains functions to help with the verification of parameter values and their graphical\nrepresentation on the GUI.\n\n\"\"\""}], ".\\commons\\__init__.py": [{"code": "D400", "filename": ".\\commons\\__init__.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nThis is the Commons module\n\nDocumentation generated by Sphinx: https://pythonhosted.org/an_example_pypi_project/sphinx.html\n\n\"\"\"\n"}], ".\\commons\\gui\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\commons\\gui\\general\\elements.py": [{"code": "D100", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "\"\"\"\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 8, "column_number": 1, "text": "'enum.Enum' imported but unused", "physical_line": "from enum import Enum\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 9, "column_number": 1, "text": "'time.strftime' imported but unused", "physical_line": "from time import sleep, strftime\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 17, "column_number": 1, "text": "'sqlalchemy.distinct' imported but unused", "physical_line": "from sqlalchemy import and_, or_, distinct\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 21, "column_number": 1, "text": "'commons.gui.qt.elements.containers' imported but unused", "physical_line": "from commons.gui.qt.elements import containers\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 27, "column_number": 1, "text": "'db.conn.new_session_factory' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "F401", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 27, "column_number": 1, "text": "'db.conn.kill_session' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 70, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ObjectMapSkeleton:\n"}, {"code": "F811", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 70, "column_number": 1, "text": "redefinition of unused 'ObjectMapSkeleton' from line 29", "physical_line": "class ObjectMapSkeleton:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 71, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, aut_id, aut_version):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 77, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def goodbye():\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 78, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Exiting and shutting down DB db_sesh...\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 79, "column_number": 1, "text": "Found commented out code", "physical_line": "    # kill_session(db_sesh)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 80, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Done, we hope.\")\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 83, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_translations():\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 104, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_external_identifier(gui_element, gc):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 105, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"\\t======= GUI Element EXt ID: \", gui_element.external_identifier)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 106, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"\\t======= Child Element EXt ID: \", gc.external_identifier)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 111, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"Original CHILD ID: \", gc.external_identifier)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 117, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"New child ID: \", gc.external_identifier)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 120, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def translate_strings(gui_element, language_code):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 121, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"Original EXT ID: \", gui_element.external_identifier)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 127, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"TRANSLATE THESE: \", set(external_id.keys()), \" of these \", translatable_attributes)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 131, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"Translated EXT ID: \", external_id)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 134, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_gui_element(parent_element, element_id, element_version, language_code):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 146, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def init_gui_element_list(aut_id, aut_version, language_code):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 146, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_gui_element_list(aut_id, aut_version, language_code):\n"}, {"code": "E711", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 149, "column_number": 91, "text": "comparison to None should be 'if cond is None:'", "physical_line": "    gui_elements = db_sesh.query(SutGUIElement).filter(SutGUIElement.container_element_id == None).all()\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 150, "column_number": 1, "text": "Found commented out code", "physical_line": "    # gui_elements = db_sesh.query(SutGUIElement).all()\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 154, "column_number": 5, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "    def tree_to_dictionary(gui_element):\n"}, {"code": "SIM114", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 158, "column_number": 12, "text": "Use logical or ((gui_element.gui_library == 'Web') or (gui_element.gui_library == 'Qt')) and a single body", "physical_line": "        if gui_element.gui_library == \"Web\":\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 175, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"GUI ELEMENT DICT: {gui_element_dict}\")\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 179, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_gui_elements(aut_id, aut_version):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 198, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"GUI Element: \", gui_elem.gui_element_name)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 199, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"ELEMENTS: \", this.aut_gui_elements)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 202, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def build_qt_object_map(aut_id, aut_version):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 212, "column_number": 9, "text": "print found.", "physical_line": "        print(\"GUI Element: \", gui_elem.gui_element_name)\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 218, "column_number": 1, "text": "class has low (30.21%) cohesion", "physical_line": "class BaseElement:\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 218, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class BaseElement:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 219, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 237, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def manifest_element(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 252, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_native_attribute(self, attribute_name):\n"}, {"code": "R505", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 255, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if hasattr(self.native_object, attribute_name):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 261, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def trigger_event(self, event_function_handle, event_function_params):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 261, "column_number": 5, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "    def trigger_event(self, event_function_handle, event_function_params):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 267, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"The event {event_function_handle} is not defined for {self.gui_element_name}\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 287, "column_number": 1, "text": "Found commented out code", "physical_line": "            # sleep(2)\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 290, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return event_return\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 292, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def update_element_relations(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 300, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\n\\n It has relations!!!\\n\")\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 306, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Element relations set\", self.element_relations)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 318, "column_number": 1, "text": "Found commented out code", "physical_line": "                # print(\"So is this it?: \", self.external_identifier)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 324, "column_number": 17, "text": "print found.", "physical_line": "                print(\"\\t\\t\\t\\t Translatable attributes: \", translate_these)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 329, "column_number": 17, "text": "print found.", "physical_line": "                print(\"Unknown identifier type\")\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 331, "column_number": 13, "text": "print found.", "physical_line": "            print(\"EXCEPTION: unknown GUI library\")\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 332, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return external_id\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 338, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\n\\n\\t\\t IDENTIFIER TYPE: \", type(external_id))\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 342, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(\"In the QT object_map: \", eval(qt.object_map.HamburgerMenu))\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 343, "column_number": 1, "text": "Found commented out code", "physical_line": "            # native_object, native_object_type = get_object(self.element_name)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 345, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Squish Object type: \", native_object_type)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 347, "column_number": 13, "text": "print found.", "physical_line": "            print(\"EXCEPTION: unknown GUI library\")\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 348, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return native_object\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 350, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_native_children(self):\n"}, {"code": "R505", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 352, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if self.native_object:\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 358, "column_number": 1, "text": "class has low (20.00%) cohesion", "physical_line": "class MainWindow(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 358, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class MainWindow(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 359, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 368, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def check_attribute(self, object_taf_name, object_property, expected_property_value):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 369, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Checking if the {object_taf_name}'s {object_property} is {expected_property_value}\")\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 372, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"??????????????????????The {object_property} is {attribute_actual_value}\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 377, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def raise_window(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 378, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Raise Window event\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 380, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def hide_window(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 381, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Hide Window event\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 383, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def close_window(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 384, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Close Window event\")\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 387, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class Screen(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 387, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Screen(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 388, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 391, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_title(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 397, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class ScreenHeader(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 397, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ScreenHeader(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 398, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 401, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_title(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 407, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Page(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 407, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Page(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 408, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 412, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class ContentItem(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 412, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ContentItem(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 413, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 418, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def update_content_list(self):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 418, "column_number": 5, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "    def update_content_list(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 423, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\nupdate_content_list: \", self.element_relations)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 426, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\n\\nGoing through the element relations\\n\\n\")\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 440, "column_number": 17, "text": "print found.", "physical_line": "                print(\"\\n\\nChild element was found\\n\\n\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 461, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_raw_content(self, content_item_type='.*'):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 480, "column_number": 1, "text": "class has low (13.33%) cohesion", "physical_line": "class ShortcutContainer(ContentItem):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 480, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ShortcutContainer(ContentItem):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 481, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 490, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_empty_positions(self):\n"}, {"code": "B007", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 494, "column_number": 13, "text": "Loop control variable 'raw_item' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "        for raw_item in raw_items[item_type_filter]:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 497, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_shortcut_by_name(self, shortcut_name):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 506, "column_number": 17, "text": "print found.", "physical_line": "                print(\"This is the one: \", current_item.description)\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 510, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press_shortcut(self, shortcut_name):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 514, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def long_press_shortcut(self, shortcut_name):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 518, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_position_map(self):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 518, "column_number": 5, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "    def get_position_map(self):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 533, "column_number": 1, "text": "Found commented out code", "physical_line": "                # print(\"Position of the \", content_class_name, \" - \",  current_item.description if content_class_name == \"HomeWidgetShortcut\" else \" BLANK \", \" item is X:\", current_item.x, \", Y:\", current_item.y)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 537, "column_number": 17, "text": "print found.", "physical_line": "                print(\"\\t\\t !!!!!! Text: \", str(\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 541, "column_number": 1, "text": "Found commented out code", "physical_line": "                # content_dictionary.update({current_item.x + (current_item.y * 100): str(current_item.description) if content_class_name == \"HomeWidgetShortcut\" else \" BLANK \"})\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 542, "column_number": 1, "text": "Found commented out code", "physical_line": "                # content_items.append(content_class_name)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 548, "column_number": 17, "text": "print found.", "physical_line": "                print(\"This is shit\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 551, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(\"This is the stuff:\", v)\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 554, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_first_free_position(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 560, "column_number": 17, "text": "print found.", "physical_line": "                print(content_class_name, \" - I think the \", position, \" position is free \", item_at_position.x,\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 565, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def press_position(self, position):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 575, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_repeater(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 582, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SwipeView(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 582, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SwipeView(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 583, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 587, "column_number": 1, "text": "class has low (16.67%) cohesion", "physical_line": "class MenuTree(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 587, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class MenuTree(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 588, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 593, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def manifest_element(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 598, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_animation(self, on_off=False):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 602, "column_number": 5, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "    def _get_menu_tree_definition(self, release_id=19):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 612, "column_number": 9, "text": "print found.", "physical_line": "        print(\"End points: \", end_points)\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 637, "column_number": 17, "text": "local variable 'mr' is assigned to but never used", "physical_line": "                except MultipleResultsFound as mr:\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 638, "column_number": 21, "text": "print found.", "physical_line": "                    print(\"Multiple results for :\", nav_item_name)\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 640, "column_number": 17, "text": "local variable 'nr' is assigned to but never used", "physical_line": "                except NoResultFound as nr:\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 642, "column_number": 21, "text": "print found.", "physical_line": "                    print(\"No results for :\", nav_item_name)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 644, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(\"\\tEP: \", ep)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 645, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(\"New path:\", navi_path_definition[(ep.nav_target_type, ep.nav_target_name, ep.nav_target_effect)])\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 652, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return navigation_hops\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 654, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def navigate_to(self, menu_item_name):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 659, "column_number": 1, "text": "class has low (22.45%) cohesion", "physical_line": "class MenuTreeToggle(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 659, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class MenuTreeToggle(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 660, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 673, "column_number": 13, "text": "print found.", "physical_line": "            print(\"EXCEPTION: unknown GUI library\")\n"}, {"code": "D205", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 676, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        if not squishtest.waitForObjectExists(names.operations_actions_HamburgerMenuItem, 300).highlighted:\n            squishtest.mouseClick(squishtest.waitForObject(names.operations_actions_HamburgerMenuItem))\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 676, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        if not squishtest.waitForObjectExists(names.operations_actions_HamburgerMenuItem, 300).highlighted:\n            squishtest.mouseClick(squishtest.waitForObject(names.operations_actions_HamburgerMenuItem))\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 676, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        if not squishtest.waitForObjectExists(names.operations_actions_HamburgerMenuItem, 300).highlighted:\n            squishtest.mouseClick(squishtest.waitForObject(names.operations_actions_HamburgerMenuItem))\n        \"\"\"\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 683, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Toggle Open was called on a MenuTreeToggle that is already open\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 686, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def toggle_closed(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 690, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Toggle Close was called on a MenuTreeToggle that is already closed\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 693, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def toggle(self):\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 695, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return new_state\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 697, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_text(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 700, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_icon(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 704, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class MenuTreeItem(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 704, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class MenuTreeItem(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 705, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 712, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 716, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Short Press was called on a MenuTreeItem\")\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 720, "column_number": 1, "text": "class has low (41.67%) cohesion", "physical_line": "class SimpleButton(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 720, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SimpleButton(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 721, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 729, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 732, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Short Press was called on a SimpleButton\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 735, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def long_press(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 737, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Short Press was called on a SimpleButton\")\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 741, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class FooterButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 742, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 752, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Footer(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 752, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Footer(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 753, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 757, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Shortcut(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 757, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Shortcut(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 758, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 762, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class FlyIn(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 762, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class FlyIn(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 763, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 767, "column_number": 1, "text": "class has low (44.44%) cohesion", "physical_line": "class ParameterTextField(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 767, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterTextField(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 768, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 775, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_value(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 778, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press(self):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 782, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"Short Press was called on a ParameterTextField\")\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 786, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class ParameterInfoField(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 786, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterInfoField(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 787, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 790, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_value(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 795, "column_number": 1, "text": "class has low (44.44%) cohesion", "physical_line": "class ParameterComboBox(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 795, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterComboBox(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 796, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 803, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def select_item_txt(self, item_text):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 807, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_items_dict(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 811, "column_number": 1, "text": "class has low (40.00%) cohesion", "physical_line": "class ParameterNumericField(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 811, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterNumericField(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 812, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 819, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press(self):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 829, "column_number": 1, "text": "Found commented out code", "physical_line": "        # sleep(10)\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 832, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_value(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 836, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_unit(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 840, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_text(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 845, "column_number": 1, "text": "class has low (32.32%) cohesion", "physical_line": "class OnScreenKeyboard(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 845, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class OnScreenKeyboard(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 846, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 867, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def load_control_element_definitions(self):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 867, "column_number": 5, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "    def load_control_element_definitions(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 868, "column_number": 9, "text": "local variable 'control_role_map' is assigned to but never used", "physical_line": "        control_role_map = {\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 908, "column_number": 1, "text": "Found commented out code", "physical_line": "            #    control_role_map[rel_element_role] = child_element\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 912, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def enter_text_direct(self, text):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 920, "column_number": 13, "text": "print found.", "physical_line": "            print(\"So we are here.....\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 930, "column_number": 1, "text": "Found commented out code", "physical_line": "        # self.ok_button.short_press()\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 931, "column_number": 1, "text": "Found commented out code", "physical_line": "        # self.confirm_input()\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 933, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def confirm_input(self):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 933, "column_number": 5, "text": "Cognitive complexity is too high (10 > 7)", "physical_line": "    def confirm_input(self):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 941, "column_number": 17, "text": "print found.", "physical_line": "                print(\"So we are here.....\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 951, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def confirm_input_kb(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 964, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_input_field(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 969, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_cancel_button(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 974, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_ok_button(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 979, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_preview_button(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 984, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AlphanumericKeyboard(OnScreenKeyboard):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 984, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class AlphanumericKeyboard(OnScreenKeyboard):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 985, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 989, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class NumericKeyboard(OnScreenKeyboard):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 989, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class NumericKeyboard(OnScreenKeyboard):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 990, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 994, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AlphanumericInputField(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 994, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class AlphanumericInputField(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 995, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 999, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class NumericInputField(AlphanumericInputField):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 999, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class NumericInputField(AlphanumericInputField):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1000, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1004, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class OnScreenKeyboardButton(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1004, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class OnScreenKeyboardButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1005, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1009, "column_number": 1, "text": "class has low (33.33%) cohesion", "physical_line": "class ResourceTable(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1009, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ResourceTable(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1010, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1017, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def select_item(self, column_name, column_value):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1032, "column_number": 1, "text": "Found commented out code", "physical_line": "            # taf_logger.exception(f\"Available columns: {col_headers}\")\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1036, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_table_content(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1041, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_table_headers(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1045, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def select_row(self, row_idx):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1051, "column_number": 1, "text": "class has low (44.44%) cohesion", "physical_line": "class ParameterCheckBox(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1051, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterCheckBox(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1052, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1059, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def check(self, partial=False):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1064, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def uncheck(self):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1071, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParameterShortcutPosition(ParameterTextField):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1072, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1080, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SimHardKey(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1080, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SimHardKey(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1081, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1085, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ShortcutMenuItem(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1085, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ShortcutMenuItem(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1086, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1090, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ShortcutMenuTitle(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1090, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ShortcutMenuTitle(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1091, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1095, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class TabButton(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1095, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TabButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1096, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1103, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def short_press(self):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1108, "column_number": 1, "text": "Found commented out code", "physical_line": "        # squish.mousePress(squish.waitForObject(self.external_identifier))\n"}, {"code": "T201", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1109, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Short Press was called on a TabButton '{self.native_object.text}'\")\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1113, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TabPage(Screen):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1113, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TabPage(Screen):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1114, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1118, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class TaskAreaButton(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1118, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TaskAreaButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1119, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1127, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_icon_state(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1135, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class PopUpScreen(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1135, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class PopUpScreen(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1136, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1140, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class PopUpScreenTitle(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1140, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class PopUpScreenTitle(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1141, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1145, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class PopUpButton(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1145, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class PopUpButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1146, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1150, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class PopUp(BaseElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1150, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class PopUp(BaseElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1151, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1155, "column_number": 1, "text": "class has low (25.00%) cohesion", "physical_line": "class TaskButton(SimpleButton):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1155, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TaskButton(SimpleButton):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1156, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1165, "column_number": 9, "text": "local variable 'task_state_name' is assigned to but never used", "physical_line": "        task_state_name = {\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1178, "column_number": 9, "text": "local variable 'task_state_int' is assigned to but never used", "physical_line": "        task_state_int = [\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1192, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_state(self):\n"}, {"code": "R504", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1194, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return state\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1196, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def update_id(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1210, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_native_state(self):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1228, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebElement:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1229, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1242, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_element(self, locator=None, locator_type=None):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1250, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1255, "column_number": 1, "text": "class has low (50.00%) cohesion", "physical_line": "class WebPage(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1255, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebPage(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1256, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1263, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_title(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1273, "column_number": 1, "text": "class has low (44.44%) cohesion", "physical_line": "class WebLink(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1273, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebLink(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1274, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1282, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_state(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1285, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click(self):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1291, "column_number": 1, "text": "class has low (41.67%) cohesion", "physical_line": "class WebTextInput(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1291, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebTextInput(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1292, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1301, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_value(self, input_value: str):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1307, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_value(self, input_value: str):\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1314, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class WebPasswordInput(WebTextInput):\n"}, {"code": "D204", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1315, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This is a subclass of WebTextInput, but it is mereley for the purpose of identifying the element type.\n    Perhaps at some point we'll need to add some functionality to it, that is specific to password inputs.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1315, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This is a subclass of WebTextInput, but it is mereley for the purpose of identifying the element type.\n    Perhaps at some point we'll need to add some functionality to it, that is specific to password inputs.\n    \"\"\"\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1319, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1324, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebButton(WebElement):\n"}, {"code": "E303", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1324, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "class WebButton(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1325, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1333, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1339, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1342, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_text(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1348, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1352, "column_number": 1, "text": "class has low (40.00%) cohesion", "physical_line": "class WebDatePicker(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1352, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebDatePicker(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1353, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1362, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def select_date(self, date):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1366, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_date(self, test_timestamp: Union[str, datetime.datetime]):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1378, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1382, "column_number": 1, "text": "class has low (41.67%) cohesion", "physical_line": "class WebComboBox(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1382, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebComboBox(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1383, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1391, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_items(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1398, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1401, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_selected_item(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1406, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1409, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def select_item(self, item_text):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1414, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "H601", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1418, "column_number": 1, "text": "class has low (48.00%) cohesion", "physical_line": "class WebTable(WebElement):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1418, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebTable(WebElement):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1419, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1428, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def finding_elements(self, locator_type, table_xpath):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1432, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_table_data(self, head):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1432, "column_number": 5, "text": "Cognitive complexity is too high (22 > 7)", "physical_line": "    def get_table_data(self, head):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1460, "column_number": 1, "text": "Found commented out code", "physical_line": "                                #logging.info(heading)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1460, "column_number": 33, "text": "block comment should start with '# '", "physical_line": "                                #logging.info(heading)\n"}, {"code": "D205", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1468, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1468, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1468, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1480, "column_number": 5, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "    def is_enabled_(self, *args, head=None):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1481, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1481, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1481, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "E226", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1494, "column_number": 92, "text": "missing whitespace around arithmetic operator", "physical_line": "                table_div = self.external_identifier + \"//tr\" + str([i]) + \"/td\" + str([j])+\"/div\"\n"}, {"code": "SIM102", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1499, "column_number": 17, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "                if table_head_actual.text in head:\n"}, {"code": "E800", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1503, "column_number": 1, "text": "Found commented out code", "physical_line": "                        #logging.debug(td_attribute)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1503, "column_number": 25, "text": "block comment should start with '# '", "physical_line": "                        #logging.debug(td_attribute)\n"}, {"code": "R505", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1504, "column_number": 25, "text": "unnecessary else after return statement.", "physical_line": "                        if \"disabled\" in td_attribute:\n"}, {"code": "SIM103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1504, "column_number": 25, "text": "Return the condition 'disabled' in td_attribute directly", "physical_line": "                        if \"disabled\" in td_attribute:\n"}, {"code": "D103", "filename": ".\\commons\\gui\\general\\elements.py", "line_number": 1510, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}], ".\\commons\\gui\\general\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\general\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\commons\\gui\\lxc\\base\\selenium_driver.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import time\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Seleniumfunc(WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, driver):\n"}, {"code": "D200", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 14, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "        \"\"\"\n        Takes screenshot of the current open web page\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 14, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Takes screenshot of the current open web page\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 14, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        Takes screenshot of the current open web page\n        \"\"\"\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 30, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\base\\selenium_driver.py", "line_number": 30, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}], ".\\commons\\gui\\lxc\\base\\vue_webelements.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\base\\vue_webelements.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "class WebElement:\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\base\\vue_webelements.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebElement:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\base\\vue_webelements.py", "line_number": 2, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition):\n"}], ".\\commons\\gui\\lxc\\base\\wedriverfactory.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from seleniumbase import get_driver\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class WebDriverFactory:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, browser, base_url):\n"}, {"code": "D207", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 12, "column_number": 1, "text": "Docstring is under-indented", "physical_line": "        \"\"\"\n       Get WebDriver Instance based on the browser configuration\n\n        Returns:\n            'WebDriver Instance'\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 12, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n       Get WebDriver Instance based on the browser configuration\n\n        Returns:\n            'WebDriver Instance'\n        \"\"\"\n"}, {"code": "E800", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 18, "column_number": 1, "text": "Found commented out code", "physical_line": "        #base_url = \"https://www.haemmigjoel-forg5team.kxs2-swdc-ch.eu.mt.mtnet\"\n"}, {"code": "E265", "filename": ".\\commons\\gui\\lxc\\base\\wedriverfactory.py", "line_number": 18, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #base_url = \"https://www.haemmigjoel-forg5team.kxs2-swdc-ch.eu.mt.mtnet\"\n"}], ".\\commons\\gui\\lxc\\base\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\lxc\\base\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from seleniumbase import page_actions\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 7, "column_number": 1, "text": "class has low (31.25%) cohesion", "physical_line": "class LoginPage(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class LoginPage(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def title(self):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 30, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 34, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_predefined_user(self, locator, input_value, locator_type):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 37, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 37, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 40, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_add_search_folder(self, locator, locator_type):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 43, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 43, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 46, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_audit_trial_settings(self, locator, locator_type):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 49, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 49, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 52, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_element_text(self, locator, locator_type):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 56, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 56, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "W391", "filename": ".\\commons\\gui\\lxc\\pages\\audit_trial_page.py", "line_number": 59, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\lxc\\pages\\login_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from seleniumbase import page_actions\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 7, "column_number": 1, "text": "class has low (24.44%) cohesion", "physical_line": "class LoginPage(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class LoginPage(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 11, "column_number": 1, "text": "Found commented out code", "physical_line": "        #super().__init__(element_definition)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 11, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #super().__init__(element_definition)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 12, "column_number": 1, "text": "Found commented out code", "physical_line": "        #super(WebElement, self).__init__(driver)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 12, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #super(WebElement, self).__init__(driver)\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_title(self):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 25, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 25, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_web_elements(self, locator, locatorType):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 33, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 33, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 37, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_input(self, locator, input_value, locator_type):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_login_button(self):\n"}, {"code": "E303", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 41, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    def click_login_button(self):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 44, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 44, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 47, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_user_name(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 50, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_password(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def user_name_text_box(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\login_page.py", "line_number": 56, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def super_title(self):\n"}], ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from commons.gui.lxc.base.vue_webelements import WebElement\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 7, "column_number": 1, "text": "class has low (17.86%) cohesion", "physical_line": "class LxcLauncher(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class LxcLauncher(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 11, "column_number": 1, "text": "Found commented out code", "physical_line": "        #super().__init__(element_definition)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 11, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #super().__init__(element_definition)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 12, "column_number": 1, "text": "Found commented out code", "physical_line": "        #super(WebElement, self).__init__(driver)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 12, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #super(WebElement, self).__init__(driver)\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_element(self, locator, locator_type):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 29, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_element_text(self, locator, locator_type):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_element(self, locator, locator_type):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 39, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_enterprise_security(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_audit_trial(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_result_app(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_resource_app(self):\n"}, {"code": "W391", "filename": ".\\commons\\gui\\lxc\\pages\\lxc_launcher_page.py", "line_number": 54, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\lxc\\pages\\resource_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from commons.gui.lxc.base.vue_webelements import WebElement\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 9, "column_number": 1, "text": "class has low (15.71%) cohesion", "physical_line": "class Resourcepage(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Resourcepage(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 34, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_input(self, locator, locator_type, input_value):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 37, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 37, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 40, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_overall_state(self, locator, locator_type, dropdown_locator_type, dropdown_locator, text):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 47, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 47, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 50, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_monitered(self, locator, locator_type, dropdown_locator_type, dropdown_locator, text):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 57, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 57, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_deleted(self, locator, locator_type, dropdown_locator_type, dropdown_locator, text):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 67, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 67, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 70, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_apply_filters(self):\n"}, {"code": "D201", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 75, "column_number": 1, "text": "No blank lines allowed before function docstring", "physical_line": "        '''\n                :param driver: Webdriver which was used to execute tests in desirable browser\n                :param locator: Which identifies the webelements from DOM\n                :param locatorType: Defines identification type of the webelements\n                :param date: Argument should be passed which should be in date format\n                :return: None\n        '''\n"}, {"code": "D205", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 75, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n                :param driver: Webdriver which was used to execute tests in desirable browser\n                :param locator: Which identifies the webelements from DOM\n                :param locatorType: Defines identification type of the webelements\n                :param date: Argument should be passed which should be in date format\n                :return: None\n        '''\n"}, {"code": "D208", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 75, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "        '''\n                :param driver: Webdriver which was used to execute tests in desirable browser\n                :param locator: Which identifies the webelements from DOM\n                :param locatorType: Defines identification type of the webelements\n                :param date: Argument should be passed which should be in date format\n                :return: None\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 75, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n                :param driver: Webdriver which was used to execute tests in desirable browser\n                :param locator: Which identifies the webelements from DOM\n                :param locatorType: Defines identification type of the webelements\n                :param date: Argument should be passed which should be in date format\n                :return: None\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 75, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n                :param driver: Webdriver which was used to execute tests in desirable browser\n                :param locator: Which identifies the webelements from DOM\n                :param locatorType: Defines identification type of the webelements\n                :param date: Argument should be passed which should be in date format\n                :return: None\n        '''\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 84, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 84, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 87, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_last_modification_time_from(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_last_modification_time_to(self):\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 91, "column_number": 112, "text": "missing whitespace around arithmetic operator", "physical_line": "        self.get_date('(//input[@data-cy=\"mtDateTimePicker-inputField\"])[2]', 'xpath', (datetime.datetime.now()+datetime.timedelta(days=1)).strftime(\"%m/%d/%Y %H:%M:%S\"))\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_action_due_date_from(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 96, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_action_due_date_to(self):\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 97, "column_number": 112, "text": "missing whitespace around arithmetic operator", "physical_line": "        self.get_date('(//input[@data-cy=\"mtDateTimePicker-inputField\"])[4]', 'xpath', (datetime.datetime.now()+datetime.timedelta(days=1)).strftime(\"%m/%d/%Y %H:%M:%S\"))\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 99, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def finding_elements(self, locator_type, table_xpath):\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 102, "column_number": 5, "text": "Cognitive complexity is too high (22 > 7)", "physical_line": "    def table_content_chk(self, head=None):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 103, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n        :param head: The table header element which was expected to get\n        :return: locator, webelement\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 103, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n        :param head: The table header element which was expected to get\n        :return: locator, webelement\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 103, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n        :param head: The table header element which was expected to get\n        :return: locator, webelement\n        '''\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 119, "column_number": 74, "text": "missing whitespace around arithmetic operator", "physical_line": "                table = \"//div[@class='v-data-table__wrapper']/table//tr\"+str([i])+\"/td\"+str([j])\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 119, "column_number": 83, "text": "missing whitespace around arithmetic operator", "physical_line": "                table = \"//div[@class='v-data-table__wrapper']/table//tr\"+str([i])+\"/td\"+str([j])\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 119, "column_number": 89, "text": "missing whitespace around arithmetic operator", "physical_line": "                table = \"//div[@class='v-data-table__wrapper']/table//tr\"+str([i])+\"/td\"+str([j])\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 122, "column_number": 85, "text": "missing whitespace around arithmetic operator", "physical_line": "                table_heading = \"//div[@class='v-data-table__wrapper']/table//tr[1]\"+\"/th\"+str([j])\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 122, "column_number": 91, "text": "missing whitespace around arithmetic operator", "physical_line": "                table_heading = \"//div[@class='v-data-table__wrapper']/table//tr[1]\"+\"/th\"+str([j])\n"}, {"code": "T201", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 129, "column_number": 33, "text": "print found.", "physical_line": "                                print(heading)\n"}, {"code": "D205", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 137, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 137, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 137, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :return: None\n        '''\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 149, "column_number": 5, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "    def check_enabled_disabled(self, *args, head=None):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 150, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "D300", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 150, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "D400", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 150, "column_number": 1, "text": "First line should end with a period", "physical_line": "        '''\n        :param args: the text that should be found in the table row\n        :param head: The table header element which was expected to get\n        :return: None\n        '''\n"}, {"code": "E226", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 163, "column_number": 108, "text": "missing whitespace around arithmetic operator", "physical_line": "                table_div = \"//div[@class='v-data-table__wrapper']/table//tr\" + str([i]) + \"/td\" + str([j])+\"/div\"\n"}, {"code": "SIM102", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 168, "column_number": 17, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "                if table_head_actual.text in head:\n"}, {"code": "T201", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 172, "column_number": 25, "text": "print found.", "physical_line": "                        print(td_attribute)\n"}, {"code": "T201", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 174, "column_number": 29, "text": "print found.", "physical_line": "                            print(table_head_actual.text, \" Disabled #############\")\n"}, {"code": "T201", "filename": ".\\commons\\gui\\lxc\\pages\\resource_page.py", "line_number": 176, "column_number": 29, "text": "print found.", "physical_line": "                            print(table_head_actual.text, \" Enabled #############\")\n"}], ".\\commons\\gui\\lxc\\pages\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\lxc\\pages\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from commons.gui.lxc.base.vue_webelements import WebElement\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 7, "column_number": 1, "text": "class has low (11.57%) cohesion", "physical_line": "class Enterprise(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Enterprise(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_web_elements(self, locator, locatorType):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 32, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 32, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_web_elements(self, locator, locatortype):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 39, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_new_identity_provider(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_refresh_list(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_system_settings(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_user_groups(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 51, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_permissions(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 54, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_signature_Policies(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 57, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_capabilities(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_producing_Units(self):\n"}, {"code": "W391", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\enterprise_security_home_page.py", "line_number": 68, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py": [{"code": "D100", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from commons.gui.lxc.base.vue_webelements import WebElement\n"}, {"code": "H601", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 7, "column_number": 1, "text": "class has low (10.00%) cohesion", "physical_line": "class Enterprise(WebElement, WebDriverFactory):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Enterprise(WebElement, WebDriverFactory):\n"}, {"code": "D107", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, element_definition, driver):\n"}, {"code": "E126", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 19, "column_number": 21, "text": "continuation line over-indented for hanging indent", "physical_line": "                    }\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_web_elements(self, locator, locatorType):\n"}, {"code": "B001", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 26, "column_number": 9, "text": "Do not use bare `except:`, it also catches unexpected events like memory errors, interrupts, system exit, and so on.  Prefer `except Exception:`.  If you're sure what you're doing, be explicit and write `except BaseException:`.", "physical_line": "        except:\n"}, {"code": "E722", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 26, "column_number": 9, "text": "do not use bare 'except'", "physical_line": "        except:\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 30, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_web_elements(self, locator, locatortype):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_input(self, locator, locatortype, data):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_users(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 39, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_groups(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_all_users(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_local_users(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_new_labx_users(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 51, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_new_labx_users(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 54, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_first_name(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 57, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_last_name(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_email_address(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 63, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_password(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 66, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_confirm_password(self):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 69, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def click_save(self):\n"}, {"code": "W391", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\user_group_page.py", "line_number": 72, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\lxc\\pages\\enterprise\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\lxc\\pages\\enterprise\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\commons\\gui\\qt\\interact.py": [{"code": "D100", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from time import sleep\n"}, {"code": "F401", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 4, "column_number": 1, "text": "'PySide2.QtCore.Qt' imported but unused", "physical_line": "from PySide2.QtCore import Qt\n"}, {"code": "E303", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 15, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "gui_element_map = {\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 54, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def navigate_to_screen(screen_name):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 75, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def cmbx_get_items_dict(cmbx_element):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 80, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"ComboBox model DIR: \", dir(cmbx_model_obj))\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 88, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def cmbx_select_item_txt(cmbx_element, item_text):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 96, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def cmbx_get_items_list(cmbx_element):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 107, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def cmbx_select_item_idx(cmbx_element, item_idx):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 115, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ckbx_check(ckbx_element, partial=False):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 120, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ckbx_uncheck(ckbx_element):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 125, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def dtfld_enter():\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 129, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_next_shortcut(container_item):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 136, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\titem type: \", item_type)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 142, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def to_object(qvariant_element):\n"}, {"code": "R504", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 144, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return qobject_element\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 148, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def shut_the_pop_up(main_window, main_content):\n"}, {"code": "E303", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 148, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def shut_the_pop_up(main_window, main_content):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 154, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"The focus is \", main_content.focus, \" on the main content item\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 157, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"You awake well rested after .5 seconds of sleep!!!!!!!!!!!!!!!!!!!!!!!\")\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 162, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(\"And now we should hit enter!!!!!!!!!!!!!!!!!!\")\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 167, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_qt_aut(main_window_name=None, main_content_name=None):\n"}, {"code": "E303", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 167, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def init_qt_aut(main_window_name=None, main_content_name=None):\n"}, {"code": "F841", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 171, "column_number": 5, "text": "local variable 'main_window' is assigned to but never used", "physical_line": "    main_window = squishtest.waitForObject(main_window_name)\n"}, {"code": "F841", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 172, "column_number": 5, "text": "local variable 'main_content' is assigned to but never used", "physical_line": "    main_content = squishtest.waitForObject(main_content_name)\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 177, "column_number": 1, "text": "Found commented out code", "physical_line": "    #shut_the_pop_up(main_window, main_content)\n"}, {"code": "E265", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 177, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #shut_the_pop_up(main_window, main_content)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 180, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def select_menu(path_tokens):\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 209, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"Token: \", pt, \" label: \", mn_texts[pt])\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 215, "column_number": 1, "text": "Found commented out code", "physical_line": "        # time.sleep(0.5)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 218, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def press_footer_button(button_name):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 223, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_table_list_items(table_model):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 239, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_table_headers(table_model):\n"}, {"code": "E266", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 251, "column_number": 1, "text": "too many leading '#' for block comment", "physical_line": "### From some git change log\n"}, {"code": "W191", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 325, "column_number": 1, "text": "indentation contains tabs", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "E101", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 325, "column_number": 1, "text": "indentation contains mixed spaces and tabs", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "W293", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 325, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "W191", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 326, "column_number": 1, "text": "indentation contains tabs", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "E101", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 326, "column_number": 1, "text": "indentation contains mixed spaces and tabs", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "W293", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 326, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}, {"code": "W292", "filename": ".\\commons\\gui\\qt\\interact.py", "line_number": 327, "column_number": 4, "text": "no newline at end of file", "physical_line": "\"\"\"\nimport squishtest\n\n\n# TODO: Exception handling\n# TODO: Logging (especially for unsuccessful state changes\n\n# TODO: \"Robot\" mode flag for each function where applies (e.g. comboBox popup vs. comboBox.currentIndex)\n\ndef cmbx_get_items_dict(cmbx_element):\n    # The ParameterComboBox is based on: https://doc.qt.io/qt-5/qml-qtquick-controls2-combobox.html\n    # Its QML file is \"/PDK/Controls/ParameterComboBox.qml\"\n    cmbx_items = {}\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for duplicate keys\n            cmbx_items.update({str(cmbx_model_obj.content.at(idx).text): cmbx_model_obj.content.at(idx).enumValue})\n    return cmbx_items\n\n\ndef cmbx_get_items_list(cmbx_element):\n    cmbx_items = []\n    cmbx_model_obj = squishtest.object.convertTo(cmbx_element.model, \"QObject\")\n    if cmbx_model_obj.content.count() > 0:\n        for idx in range(cmbx_model_obj.content.count()):\n            # TODO: Should check for gaps in the indexes (enumValue)\n            cmbx_items.insert(cmbx_model_obj.content.at(idx).enumValue, str(cmbx_model_obj.content.at(idx).text))\n            cmbx_model_obj.content.at(idx)\n    return cmbx_items\n\n\ndef cmbx_select_item_txt(cmbx_element, item_text):\n    item_list = cmbx_get_items_dict(cmbx_element)\n    if item_list[item_text]:\n        cmbx_element.currentIndex = item_list[item_text]\n        return True\n    return False\n\n\ndef cmbx_select_item_idx(cmbx_element, item_idx):\n    item_list = cmbx_get_items_list(cmbx_element)\n    if item_list[item_idx]:\n        cmbx_element.currentIndex = item_idx\n        return True\n    return False\n\n\ndef ckbx_check(ckbx_element, partial=False):\n    ckbx_element.checkState = 1 if partial else 2\n    return ckbx_element.checkState\n\n\ndef ckbx_uncheck(ckbx_element):\n    ckbx_element.checkState = 0\n    return ckbx_element.checkState\n\n\ndef dtfld_enter():\n    pass\n\n\ndef get_next_shortcut(container_item):\n    # Unfortunately storing all the shortcuts in a list then for-looping through those doesn't work,\n    # because we actually modify the original list by deleting the items.\n    # We have to rerun the same function after each deleted shortcut, hence the function: get_next_shortcut(container_item)\n    screen_items = squishtest.object.children(squishtest.waitForObject(container_item))\n    for nxt_sc_item in screen_items:\n        item_type = squishtest.className(nxt_sc_item)\n        print(\"\\titem type: \", item_type)\n        if item_type.startswith('HomeWidgetShortcut'):\n            return nxt_sc_item\n    return None\n\t\n\t\n\"\"\""}], ".\\commons\\gui\\qt\\meta.py": [{"code": "D200", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nThe squishqtcl.meta module contains functions to get as much information about the AUT's UI elements as possible.\n\"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 13, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Placeholder function in case we need type conversions or any additional logic for primitives.\n\n    Parameters\n    ----------\n    primitive : A variable of a Python 'primitive' type.\n\n    Returns\n    -------\n    The exact same variable that was passed as a parameter.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 28, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Some Qt objects have properties which are represented as a QQmlListReference object, which is not an iterable.\n    This function goes through the reference list and applies the get_qt_properties() function to each element.\n    Parameters\n    ----------\n    qml_list_ref : A Squish/Qt object of type QQmlListReference.\n\n    Returns\n    -------\n    A dictionary whose keys are property names and values are property objects as returned by get_qt_properties().\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 28, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Some Qt objects have properties which are represented as a QQmlListReference object, which is not an iterable.\n    This function goes through the reference list and applies the get_qt_properties() function to each element.\n    Parameters\n    ----------\n    qml_list_ref : A Squish/Qt object of type QQmlListReference.\n\n    Returns\n    -------\n    A dictionary whose keys are property names and values are property objects as returned by get_qt_properties().\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 46, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def qml_list_ref_to_list(qml_list_ref):\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 55, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Placeholder function in case we need type conversions or any additional logic for QString objects.\n\n    Parameters\n    ----------\n    qstring : A QString object.\n\n    Returns\n    -------\n    The QString object represented as a standard string.\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 69, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def handle_q_byte_array(q_byte_array):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 157, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's properties and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python functions: dir() and getattr().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the property names as keys and the property objects as values.\n    NOTE: Unlike with get_qt_properties(), the complex properties returned by this function are as-is, meaning\n    that if the value of a property is another object, it will still need to be serialized.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 157, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's properties and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python functions: dir() and getattr().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the property names as keys and the property objects as values.\n    NOTE: Unlike with get_qt_properties(), the complex properties returned by this function are as-is, meaning\n    that if the value of a property is another object, it will still need to be serialized.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 157, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's properties and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python functions: dir() and getattr().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the property names as keys and the property objects as values.\n    NOTE: Unlike with get_qt_properties(), the complex properties returned by this function are as-is, meaning\n    that if the value of a property is another object, it will still need to be serialized.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 180, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's methods and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python function: dir().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the method names as keys and the method objects as values.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 180, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's methods and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python function: dir().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the method names as keys and the method objects as values.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 180, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This is a crude way to fetch an object's methods and should only be used as a fall-back in case the object\n    has no associated QMetaObject. This function calls the built-in Python function: dir().\n    Parameters\n    ----------\n    squish_object : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    Returns a dictionary with the method names as keys and the method objects as values.\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 197, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Attrib name: \", attr_key)\n"}, {"code": "E302", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 201, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_qmeta_properties(qt_element):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 202, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Generic function to retrieve a Squish/Qt object's properties using QMetaObject. It can be used for object types\n    which have no specific handler function defined.\n\n    Not all Squish/Qt objects have associated meta objects, so it's better to use this function with\n    get_meta() as a fallback.\n\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    A standard Python dictionary with the property name as the key and its value as the value.\n    The property values' types are unknown.\n\n    If the object doesn't have an associated QMetaObject, the return value is null and the AttributeError raised by\n    calling the .metaObject() is suppressed, but an error is logged.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 202, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Generic function to retrieve a Squish/Qt object's properties using QMetaObject. It can be used for object types\n    which have no specific handler function defined.\n\n    Not all Squish/Qt objects have associated meta objects, so it's better to use this function with\n    get_meta() as a fallback.\n\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    A standard Python dictionary with the property name as the key and its value as the value.\n    The property values' types are unknown.\n\n    If the object doesn't have an associated QMetaObject, the return value is null and the AttributeError raised by\n    calling the .metaObject() is suppressed, but an error is logged.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 202, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Generic function to retrieve a Squish/Qt object's properties using QMetaObject. It can be used for object types\n    which have no specific handler function defined.\n\n    Not all Squish/Qt objects have associated meta objects, so it's better to use this function with\n    get_meta() as a fallback.\n\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose properties you want to retrieve.\n\n    Returns\n    -------\n    A standard Python dictionary with the property name as the key and its value as the value.\n    The property values' types are unknown.\n\n    If the object doesn't have an associated QMetaObject, the return value is null and the AttributeError raised by\n    calling the .metaObject() is suppressed, but an error is logged.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 235, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Retrieve a Squish/Qt object's methods. This function can be used to identify interactive objects\n    by checking for 'signal' methods.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose methods you want to retrieve.\n\n    Returns\n    -------\n    A standard Python dictionary with the method name as the key and its type value as the value.\n    The type can be one of 'method', 'signal', 'slot' or 'constructor'.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 235, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Retrieve a Squish/Qt object's methods. This function can be used to identify interactive objects\n    by checking for 'signal' methods.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose methods you want to retrieve.\n\n    Returns\n    -------\n    A standard Python dictionary with the method name as the key and its type value as the value.\n    The type can be one of 'method', 'signal', 'slot' or 'constructor'.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 266, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Find a Squish/Qt object's signal methods. This can be used in connection with has_interactive_signal()\n    to find out if a UI element can be interacted with.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose signals you want to retrieve.\n\n    Returns\n    -------\n    A list of signal method names.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 266, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Find a Squish/Qt object's signal methods. This can be used in connection with has_interactive_signal()\n    to find out if a UI element can be interacted with.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose signals you want to retrieve.\n\n    Returns\n    -------\n    A list of signal method names.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 290, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Check if a Squish/Qt object can emit a certain type of signal. This function can be used to see if an element\n    can be clicked, for example.\n    Note: The signal name has to be accurate, the function is not able to do partial or \"soft\" matches.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose signals you want to check.\n    signal_name : The signal name without the parentheses. ( i.e. 'clicked', not 'clicked()' )\n\n    Returns\n    -------\n    True if the object is capable of emitting the given signal, False otherwise.\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 290, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check if a Squish/Qt object can emit a certain type of signal. This function can be used to see if an element\n    can be clicked, for example.\n    Note: The signal name has to be accurate, the function is not able to do partial or \"soft\" matches.\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose signals you want to check.\n    signal_name : The signal name without the parentheses. ( i.e. 'clicked', not 'clicked()' )\n\n    Returns\n    -------\n    True if the object is capable of emitting the given signal, False otherwise.\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 310, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Checks a list of signal methods if any of them indicates interactivity.\n    Parameters\n    ----------\n    qt_signal_list : A list of method names as returned by get_object_signals()\n\n    Returns\n    -------\n   If any of the method names is also available in the interactive_signals[] list, it returns True, else it's False.\n    \"\"\"\n"}, {"code": "D207", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 310, "column_number": 1, "text": "Docstring is under-indented", "physical_line": "    \"\"\"\n    Checks a list of signal methods if any of them indicates interactivity.\n    Parameters\n    ----------\n    qt_signal_list : A list of method names as returned by get_object_signals()\n\n    Returns\n    -------\n   If any of the method names is also available in the interactive_signals[] list, it returns True, else it's False.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 310, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Checks a list of signal methods if any of them indicates interactivity.\n    Parameters\n    ----------\n    qt_signal_list : A list of method names as returned by get_object_signals()\n\n    Returns\n    -------\n   If any of the method names is also available in the interactive_signals[] list, it returns True, else it's False.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 325, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Checks the input list of signal methods if any of them can be used to interact with a Squish/Qt object.\n\n    Parameters\n    ----------\n    qt_signal_list : A list of method names as returned by get_object_signals()\n\n    Returns\n    -------\n    A list of method names which appear in the interactive_signals[] list, or None.\n    (i.e. The intersection of the input list - qt_signal_list - and the interactive_signals[] list.)\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 340, "column_number": 1, "text": "Cognitive complexity is too high (34 > 7)", "physical_line": "def get_qt_properties(qt_element, max_depth):\n"}, {"code": "D205", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 341, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Read the properties of a Squish/Qt object.\n    Some properties can be accessed directly ('primitive' types), some complex objects with the Squish built-in function\n    squishtest.object.properties(), others might only be available using the object's QMetaObject, and in worst case,\n    only a Python object is visible and the dir() and getattrib() functions must be used.\n    This function tries each method, starting with the most favorable ones, until some information can be returned.\n    Since some QObject subclasses only give access to their members via specific methods, a list of these object types\n    is defined in the qt_handlers{} dictionary, where each key is a class name, and each value is a function, defined\n    in this very module, to handle that specific class.\n    This is a recursive function, so even if the property of an object is another Qt object, it will try to\n    get the underlying properties by calling itself until either only 'primitive' types are left, or the max_depth\n    is reached.\n\n\n    Parameters\n    ----------\n    qt_element : The Squish/Qt object whose properties you want to retrieve.\n    max_depth : The maximum depth the function should reach while deciphering complex properties. Beyond this point,\n    recursive calls will not be made, even if a property defined as an object is found.\n\n    Returns\n    -------\n    A dictionary with a property name as the key and its value as the value.\n    \"\"\"\n"}, {"code": "E226", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 379, "column_number": 96, "text": "missing whitespace around arithmetic operator", "physical_line": "                    property_dict[property_name] = get_qt_properties(property_object, max_depth-1)\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 400, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def classify_qt_element(qt_element):\n"}, {"code": "W292", "filename": ".\\commons\\gui\\qt\\meta.py", "line_number": 403, "column_number": 9, "text": "no newline at end of file", "physical_line": "    pass"}], ".\\commons\\gui\\qt\\scout.py": [{"code": "D205", "filename": ".\\commons\\gui\\qt\\scout.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe scout module is responsible for discovering the available GUI elements in an unsupervised or semi-supervised\nmode.\n\n\"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\scout.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n\nThe scout module is responsible for discovering the available GUI elements in an unsupervised or semi-supervised\nmode.\n\n\"\"\"\n"}, {"code": "D202", "filename": ".\\commons\\gui\\qt\\scout.py", "line_number": 12, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n    Recursive function to find all descendants of a list of GUI elements.\n\n    Parameters\n    ----------\n    element_list : List of Squish/Qt GUI objects\n    start_count : The discovered elements get a sequence number as a suffix, starting from this number.\n    parent_id : ID - as generated by this function - of the parent GUI element.\n\n    Returns\n    -------\n    A 'flat' list of GUI elements as a dictionary, where the keys are generated by the function, using\n    the elements' class names and a sequence number, and the dictionary values are Squish objects.\n    \"\"\"\n"}, {"code": "R507", "filename": ".\\commons\\gui\\qt\\scout.py", "line_number": 39, "column_number": 13, "text": "unnecessary else after continue statement.", "physical_line": "            if squishtest.className(child_element) == \"SystemTray\":\n"}, {"code": "W391", "filename": ".\\commons\\gui\\qt\\scout.py", "line_number": 54, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\qt\\__init__.py": [{"code": "D205", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe squishqtcl (Squish Qt Convenience Library) module contains functions and classes to help with integrating\nSquish into the test automation framework.\n\"\"\"\n"}, {"code": "D400", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nThe squishqtcl (Squish Qt Convenience Library) module contains functions and classes to help with integrating\nSquish into the test automation framework.\n\"\"\"\n"}, {"code": "F401", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 6, "column_number": 1, "text": "'utils.log' imported but unused", "physical_line": "import utils.log as log\n"}, {"code": "E800", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 11, "column_number": 1, "text": "Found commented out code", "physical_line": "#log.set_log_config(log.read_log_config(\"../resources/conf/taf_logging_conf_main.yaml\"))\n"}, {"code": "E265", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 11, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#log.set_log_config(log.read_log_config(\"../resources/conf/taf_logging_conf_main.yaml\"))\n"}, {"code": "W391", "filename": ".\\commons\\gui\\qt\\__init__.py", "line_number": 20, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\commons\\gui\\qt\\elements\\containers.py": [{"code": "D100", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "\"\"\"\n\n\"\"\"\n"}, {"code": "H601", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 6, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ScreenHeader:\n"}, {"code": "D101", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ScreenHeader:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, object_id):\n"}, {"code": "D101", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Screen:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, screen_object):\n"}, {"code": "D102", "filename": ".\\commons\\gui\\qt\\elements\\containers.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_children(self):\n"}], ".\\commons\\gui\\qt\\elements\\__init__.py": [{"code": "D104", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "import squishtest\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_object(object_name):\n"}, {"code": "T201", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 7, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Trying to get the object: \", object_name)\n"}, {"code": "D101", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ObjectMapSkeleton:\n"}, {"code": "D107", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 14, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, aut_id, aut_version):\n"}, {"code": "D103", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 19, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_squish_class(qt_element):\n"}, {"code": "R504", "filename": ".\\commons\\gui\\qt\\elements\\__init__.py", "line_number": 22, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return class_name\n"}], ".\\commons\\hw\\handlers.py": [{"code": "D100", "filename": ".\\commons\\hw\\handlers.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from typing import Union\n"}, {"code": "F401", "filename": ".\\commons\\hw\\handlers.py", "line_number": 1, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import Union\n"}, {"code": "D103", "filename": ".\\commons\\hw\\handlers.py", "line_number": 14, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def pre_set_burette():\n"}, {"code": "CCR001", "filename": ".\\commons\\hw\\handlers.py", "line_number": 20, "column_number": 1, "text": "Cognitive complexity is too high (43 > 7)", "physical_line": "def hw_event_trigger(hw_element: SutGenericElement, sut_event: SutEvent, event_params: dict):\n"}, {"code": "D103", "filename": ".\\commons\\hw\\handlers.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def hw_event_trigger(hw_element: SutGenericElement, sut_event: SutEvent, event_params: dict):\n"}, {"code": "R505", "filename": ".\\commons\\hw\\handlers.py", "line_number": 32, "column_number": 13, "text": "unnecessary elif after return statement.", "physical_line": "            if is_connected.connected and connected_sensor_type == event_params['sensor_type']:\n"}, {"code": "SIM102", "filename": ".\\commons\\hw\\handlers.py", "line_number": 39, "column_number": 9, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "        elif sut_event.event_function_handle == 'Disconnect':\n"}, {"code": "E261", "filename": ".\\commons\\hw\\handlers.py", "line_number": 69, "column_number": 49, "text": "at least two spaces before inline comment", "physical_line": "    elif hw_element.element_type == 'dDriveSim': # Burette stuff is here, don't get confused\n"}, {"code": "W391", "filename": ".\\commons\\hw\\handlers.py", "line_number": 85, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\datafactory\\doe.py": [{"code": "D205", "filename": ".\\datafactory\\doe.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe module name is an acronym for Design of Experiments and it contains functions to support the creation of data sets\naccording to various DoE methods.\n\"\"\"\n"}, {"code": "D400", "filename": ".\\datafactory\\doe.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nThe module name is an acronym for Design of Experiments and it contains functions to support the creation of data sets\naccording to various DoE methods.\n\"\"\"\n"}, {"code": "F401", "filename": ".\\datafactory\\doe.py", "line_number": 8, "column_number": 1, "text": "'typing.List' imported but unused", "physical_line": "from typing import List\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipo(strength, param_set, algorithm):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 21, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return data_set\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipog(strength, param_set):\n"}, {"code": "B007", "filename": ".\\datafactory\\doe.py", "line_number": 34, "column_number": 9, "text": "Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for i in range(strength, len(param_set)):\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipog_mini(strength, param_set):\n"}, {"code": "T201", "filename": ".\\datafactory\\doe.py", "line_number": 62, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Additional stuff needed: \", (t_way_len - new_param_len))\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipogd():\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 76, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return t_way_set\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 80, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipogf():\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 82, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return t_way_set\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 86, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipo_h():\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ipo_v():\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 96, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def orthogonal_array():\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def sim_anneal():\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 105, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def full_factorial(factors_levels):\n"}, {"code": "T201", "filename": ".\\datafactory\\doe.py", "line_number": 114, "column_number": 5, "text": "print found.", "physical_line": "    print(factor_lengths)\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 125, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def pw_covertable_full(factor_dict):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 132, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 135, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def pw_covertable_prefil(factor_dict, pre_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 142, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 145, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def pw_covertable_postfil(factor_dict, post_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 152, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 155, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def pw_covertable_filtered(factor_dict, pre_filter, post_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 163, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 166, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tway_covertable_prefil(strength, factor_dict, pre_filter, post_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 174, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 177, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tway_covertable_full(strength, factor_dict):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 184, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 187, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tway_covertable_prefil(strength, factor_dict, pre_filter):\n"}, {"code": "F811", "filename": ".\\datafactory\\doe.py", "line_number": 187, "column_number": 1, "text": "redefinition of unused 'tway_covertable_prefil' from line 166", "physical_line": "def tway_covertable_prefil(strength, factor_dict, pre_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 195, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 198, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tway_covertable_postfil(strength, factor_dict, post_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 206, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}, {"code": "D103", "filename": ".\\datafactory\\doe.py", "line_number": 209, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tway_covertable_filtered(strength, factor_dict, pre_filter, post_filter):\n"}, {"code": "R504", "filename": ".\\datafactory\\doe.py", "line_number": 217, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return combo\n"}], ".\\datafactory\\generators.py": [{"code": "D205", "filename": ".\\datafactory\\generators.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe generators module contains functions to create one dimensional data sets based on a factor's attributes, such as\ntype, allowed values etc.\n\nNote: the word: generator, is used in its everyday sense, not as in the Python terminology. Most functions have a\n'regular' version, which return a data structure (list, dictionary or tuple), and another one which 'yields' a value\nat each call, i.e. a Python generator version. This concept was meant to support the users' needs whether they want\nto preserve memory, or CPU time. Generators have a smaller RAM footprint, but they are heavier on the CPU.\n\nThis module uses the exrex package for generating strings. For more information visit:\n    https://github.com/asciimoo/exrex\n    https://exrex.readthedocs.io/en/latest/\n\n\"\"\"\n"}, {"code": "D400", "filename": ".\\datafactory\\generators.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n\nThe generators module contains functions to create one dimensional data sets based on a factor's attributes, such as\ntype, allowed values etc.\n\nNote: the word: generator, is used in its everyday sense, not as in the Python terminology. Most functions have a\n'regular' version, which return a data structure (list, dictionary or tuple), and another one which 'yields' a value\nat each call, i.e. a Python generator version. This concept was meant to support the users' needs whether they want\nto preserve memory, or CPU time. Generators have a smaller RAM footprint, but they are heavier on the CPU.\n\nThis module uses the exrex package for generating strings. For more information visit:\n    https://github.com/asciimoo/exrex\n    https://exrex.readthedocs.io/en/latest/\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\datafactory\\generators.py", "line_number": 21, "column_number": 1, "text": "'random.shuffle' imported but unused", "physical_line": "from random import shuffle\n"}, {"code": "D205", "filename": ".\\datafactory\\generators.py", "line_number": 30, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function returns a list of integers between the bounds passed as the start and stop parameters, where\n    return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        [1, 3, 5, 7]\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\datafactory\\generators.py", "line_number": 30, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function returns a list of integers between the bounds passed as the start and stop parameters, where\n    return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        [1, 3, 5, 7]\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\datafactory\\generators.py", "line_number": 30, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function returns a list of integers between the bounds passed as the start and stop parameters, where\n    return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        [1, 3, 5, 7]\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "C416", "filename": ".\\datafactory\\generators.py", "line_number": 49, "column_number": 12, "text": "Unnecessary list comprehension - rewrite using list().", "physical_line": "    return [element for element in range(start, stop, step)]\n"}, {"code": "D205", "filename": ".\\datafactory\\generators.py", "line_number": 53, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function is similar to int_range(), but it's implemented as a Python 'generator',\n    which means that it returns, or more precisely \"yields\" one value at a time.\n\n    Each returned value is an item in a list of integers between the bounds passed as the start and stop parameters,\n    where return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        first call: 1\n        second call: 3\n        third call: 5\n        last call: 7\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\datafactory\\generators.py", "line_number": 53, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function is similar to int_range(), but it's implemented as a Python 'generator',\n    which means that it returns, or more precisely \"yields\" one value at a time.\n\n    Each returned value is an item in a list of integers between the bounds passed as the start and stop parameters,\n    where return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        first call: 1\n        second call: 3\n        third call: 5\n        last call: 7\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\datafactory\\generators.py", "line_number": 53, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function is similar to int_range(), but it's implemented as a Python 'generator',\n    which means that it returns, or more precisely \"yields\" one value at a time.\n\n    Each returned value is an item in a list of integers between the bounds passed as the start and stop parameters,\n    where return_value[n] = return_value[n] + step.\n\n    Example: start = 1, stop = 7, step = 2 will return\n        first call: 1\n        second call: 3\n        third call: 5\n        last call: 7\n\n    Parameters\n    ----------\n    start : The lower bound of the range to be created\n    stop : The upper bound of the range to be created\n    step : The difference between two consecutive values in the range.\n\n    Returns\n    -------\n    A list of integers.\n\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 102, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def float_range(start=0.1, stop=1.1, step=0.1):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 110, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def decimal_range(start=0.1, stop=1.1, step=0.1):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 121, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_decimal_range(start=0.1, stop=1.1, step=0.1):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 130, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_float_range(start=0.1, stop=1.1, step=0.1):\n"}, {"code": "CCR001", "filename": ".\\datafactory\\generators.py", "line_number": 136, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def float_rand_series(element_count=10, low_bound=0.1, high_bound=2.9, max_jump=0.9, precision=6):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 136, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def float_rand_series(element_count=10, low_bound=0.1, high_bound=2.9, max_jump=0.9, precision=6):\n"}, {"code": "B007", "filename": ".\\datafactory\\generators.py", "line_number": 144, "column_number": 9, "text": "Loop control variable 'item' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for item in range(element_count):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 159, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def time_series(step_count=10, min_step=10, max_step=15):\n"}, {"code": "B007", "filename": ".\\datafactory\\generators.py", "line_number": 162, "column_number": 9, "text": "Loop control variable 'step' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for step in range(step_count):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 168, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def input_space(field_id=None, mode='positive'):\n"}, {"code": "CCR001", "filename": ".\\datafactory\\generators.py", "line_number": 177, "column_number": 1, "text": "Cognitive complexity is too high (14 > 7)", "physical_line": "def string_pattern(valid_pattern_def, samples=1):\n"}, {"code": "D205", "filename": ".\\datafactory\\generators.py", "line_number": 178, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Generate a list of strings according to a number of restrictions passed as an argument.\n    The attributes defining the pattern should be retrieved from the database,\n    or a dictionary containing the same key-value pairs.\n    Parameters\n    ----------\n    valid_pattern_def : A dictionary with the different character classes allowed in the samples. \\\n    Either as separate attributes or as a regular expression.\n    samples : The number of samples to be returned as a list.\n\n    Returns\n    -------\n    A list of strings generated according to the restrictions defined in valid_pattern_def\n    \"\"\"\n"}, {"code": "B007", "filename": ".\\datafactory\\generators.py", "line_number": 211, "column_number": 13, "text": "Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "        for i in range(0, samples):\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 221, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_string_pattern():\n"}, {"code": "R505", "filename": ".\\datafactory\\generators.py", "line_number": 240, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if bool_type == 'python':\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 248, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def function_values():\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 252, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_function_values():\n"}, {"code": "D103", "filename": ".\\datafactory\\generators.py", "line_number": 270, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_sampler(param_type, param_type_attributes, max_samples=1):\n"}, {"code": "T201", "filename": ".\\datafactory\\generators.py", "line_number": 273, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The PARAM SAMPLER WILL NOW CREATE NUMBERS\")\n"}, {"code": "T201", "filename": ".\\datafactory\\generators.py", "line_number": 277, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The PARAM SAMPLER WILL NOW CREATE STRINGS\")\n"}, {"code": "T201", "filename": ".\\datafactory\\generators.py", "line_number": 280, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The PARAM SAMPLER WILL NOW CREATE BOOLS\")\n"}, {"code": "R504", "filename": ".\\datafactory\\generators.py", "line_number": 282, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return samples\n"}, {"code": "W391", "filename": ".\\datafactory\\generators.py", "line_number": 283, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\datafactory\\interfaces.py": [{"code": "D200", "filename": ".\\datafactory\\interfaces.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\n\nGetting stuff from the DB or files or whatever.\n\n\"\"\"\n"}, {"code": "E800", "filename": ".\\datafactory\\interfaces.py", "line_number": 26, "column_number": 1, "text": "Found commented out code", "physical_line": "# engine = sqlalchemy.create_engine(url, client_encoding='utf8', echo=True)\n"}, {"code": "D103", "filename": ".\\datafactory\\interfaces.py", "line_number": 38, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def fetch_data_set(data_set_id):\n"}, {"code": "D103", "filename": ".\\datafactory\\interfaces.py", "line_number": 43, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_data_set_id(data_set_name):\n"}, {"code": "CCR001", "filename": ".\\datafactory\\interfaces.py", "line_number": 49, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def create_dataset(data_set_name, parameter_group, coverage_type, data_fields: List[ParamInstance]):\n"}, {"code": "D103", "filename": ".\\datafactory\\interfaces.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_dataset(data_set_name, parameter_group, coverage_type, data_fields: List[ParamInstance]):\n"}, {"code": "E800", "filename": ".\\datafactory\\interfaces.py", "line_number": 55, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"So we're in\")\n"}, {"code": "E303", "filename": ".\\datafactory\\interfaces.py", "line_number": 63, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    for data_field in data_fields:\n"}, {"code": "T201", "filename": ".\\datafactory\\interfaces.py", "line_number": 65, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Fetching details of instance: \", data_field.param_id, \"-\", data_field.instance_id, \"-\", data_field.instance_name)\n"}, {"code": "T201", "filename": ".\\datafactory\\interfaces.py", "line_number": 69, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t ===============  Data field: \", data_field.param_id, \"-\", data_field.instance_id, \" domain: \", data_field_details['param_domain'])\n"}, {"code": "T201", "filename": ".\\datafactory\\interfaces.py", "line_number": 83, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\t\\t\\t\\t ===============  No domain defined for the parameter instance: \", data_field.instance_name)\n"}, {"code": "T201", "filename": ".\\datafactory\\interfaces.py", "line_number": 85, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Param samples: \", param_samples)\n"}, {"code": "W391", "filename": ".\\datafactory\\interfaces.py", "line_number": 88, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\datafactory\\utils.py": [{"code": "D100", "filename": ".\\datafactory\\utils.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "# TODO:  Rename the module to something more meaningful\n"}, {"code": "D103", "filename": ".\\datafactory\\utils.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def boundary_analysis():\n"}, {"code": "D103", "filename": ".\\datafactory\\utils.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def equi_part():\n"}, {"code": "W292", "filename": ".\\datafactory\\utils.py", "line_number": 13, "column_number": 9, "text": "no newline at end of file", "physical_line": "    pass"}], ".\\datafactory\\__init__.py": [{"code": "D205", "filename": ".\\datafactory\\__init__.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe primary function of the datafactory package is to provide a simple interface to test data, be it existing records\nin the database, or dynamically generated data sets.\n\n\"\"\""}, {"code": "D400", "filename": ".\\datafactory\\__init__.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n\nThe primary function of the datafactory package is to provide a simple interface to test data, be it existing records\nin the database, or dynamically generated data sets.\n\n\"\"\""}, {"code": "W292", "filename": ".\\datafactory\\__init__.py", "line_number": 6, "column_number": 4, "text": "no newline at end of file", "physical_line": "\"\"\"\n\nThe primary function of the datafactory package is to provide a simple interface to test data, be it existing records\nin the database, or dynamically generated data sets.\n\n\"\"\""}], ".\\db\\ado_sync.py": [{"code": "D100", "filename": ".\\db\\ado_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_tc_linked_reqs(taf_ts_id, taf_ts_version, taf_tc_id, taf_tc_version):\n"}, {"code": "E128", "filename": ".\\db\\ado_sync.py", "line_number": 35, "column_number": 57, "text": "continuation line under-indented for visual indent", "physical_line": "                                                        and_(Requirement.req_id == CoverageMap.req_id,\n"}, {"code": "T201", "filename": ".\\db\\ado_sync.py", "line_number": 40, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"TC: {taf_ts_id}, {taf_ts_version}, {taf_tc_id}, {taf_tc_version}: {req_list}\")\n"}, {"code": "CCR001", "filename": ".\\db\\ado_sync.py", "line_number": 45, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def get_test_cases_ado(test_set: str = None, test_suites: list = None) -> list:\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 46, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param test_set: A string identifying a Test Set in the TAF DB (mgt.test_set table)\n    :param test_suites: A list of integers identifying the Test Suites in the TAF DB (mgt.test_suite table)\n    :return: A list of dictionaries mapping the Test Case IDs between the TAF and ADO, along with their Test Suite IDs\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\ado_sync.py", "line_number": 46, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param test_set: A string identifying a Test Set in the TAF DB (mgt.test_set table)\n    :param test_suites: A list of integers identifying the Test Suites in the TAF DB (mgt.test_suite table)\n    :return: A list of dictionaries mapping the Test Case IDs between the TAF and ADO, along with their Test Suite IDs\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\db\\ado_sync.py", "line_number": 85, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_ado_tc_to_ts(test_set: str) -> dict:\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_ado_tc_to_ts(test_set: str) -> dict:\n"}, {"code": "CCR001", "filename": ".\\db\\ado_sync.py", "line_number": 104, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def get_ado_tc_to_ts_map_based(test_set: str = None, test_suites: list = None) -> dict:\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 104, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_ado_tc_to_ts_map_based(test_set: str = None, test_suites: list = None) -> dict:\n"}, {"code": "ECE001", "filename": ".\\db\\ado_sync.py", "line_number": 110, "column_number": 9, "text": "Expression is too complex (8.0 > 7)", "physical_line": "        test_suites = [ts.ts_ext_id for ts in\n"}, {"code": "E302", "filename": ".\\db\\ado_sync.py", "line_number": 129, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_test_suites_ado(test_set: str = None) -> list:\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 130, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param test_set: A single integer identifying a Test Set in the TAF DB (mgt.test_set table)\n    :return: List of dictionaries with the Test Suite IDs in ADO and TAF, plus the Test Suite Title\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\ado_sync.py", "line_number": 130, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param test_set: A single integer identifying a Test Set in the TAF DB (mgt.test_set table)\n    :return: List of dictionaries with the Test Suite IDs in ADO and TAF, plus the Test Suite Title\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 159, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def store_ado_ts_ids(ado_ts_id_map: list, taf_test_set: str):\n"}, {"code": "T201", "filename": ".\\db\\ado_sync.py", "line_number": 164, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"TSs in DB: {len(maps_to_update)}, TSs in map: {len(ado_ts_id_map)}\")\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 179, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Use this function to store the ADO Test Case IDs mapped to TAF test cases.\n    The expected parameters are TAF internal IDs for the test case and test suite as a search criteria,\n    and an ADO test case ID as the update value.\n    :param test_case_id_map: A dictionary with tuples as keys and the ADO TC IDs as their values:\n        {(taf_test_suite_id, taf_test_case_id, taf_test_case_order); ado_test_case_id}\n    :return: True, unless an exception occurs\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 204, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Use this function to store the ADO Test Point IDs mapped to Test Cases in the TAF DB.\n    For a successful run, the external (ADO) IDs of both the TCs and their parent Test Suites must already be in the\n    TAF database. Use the store_ado_tc_ids() and store_ado_ts_ids() functions to meet the prerequisites.\n\n    :param test_point_map: A list of tuples: [(ado_test_suite_id, ado_test_case_id, ado_test_point_id)]\n    :return: Currently Void\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 225, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This is a potential future version of the store_test_points_ado() function, for when all ADO or other external\n    identifiers can be stored separately from the 'native' TAF items.\n\n    :param test_point_map: A list of tuples: [(ado_test_suite_id, ado_test_case_id, ado_test_point_id)]\n    :return: Currently Void\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\ado_sync.py", "line_number": 225, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This is a potential future version of the store_test_points_ado() function, for when all ADO or other external\n    identifiers can be stored separately from the 'native' TAF items.\n\n    :param test_point_map: A list of tuples: [(ado_test_suite_id, ado_test_case_id, ado_test_point_id)]\n    :return: Currently Void\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\db\\ado_sync.py", "line_number": 225, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This is a potential future version of the store_test_points_ado() function, for when all ADO or other external\n    identifiers can be stored separately from the 'native' TAF items.\n\n    :param test_point_map: A list of tuples: [(ado_test_suite_id, ado_test_case_id, ado_test_point_id)]\n    :return: Currently Void\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 248, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_results_ado(test_set: str):\n"}, {"code": "ECE001", "filename": ".\\db\\ado_sync.py", "line_number": 252, "column_number": 5, "text": "Expression is too complex (8.0 > 7)", "physical_line": "    session_id = db_sesh.query(TestSession.session_id).filter(TestSession.test_set_id == test_set). \\\n        order_by(desc(TestSession.created)).first()[0]\n"}, {"code": "T201", "filename": ".\\db\\ado_sync.py", "line_number": 254, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Session ID: {session_id} type {type(session_id)}\")\n"}, {"code": "ECE001", "filename": ".\\db\\ado_sync.py", "line_number": 256, "column_number": 5, "text": "Expression is too complex (8.5 > 7)", "physical_line": "    test_result_tab = db_sesh.query(TcSuiteMap, TestResult.test_result). \\\n        outerjoin(TestResult,\n"}, {"code": "T201", "filename": ".\\db\\ado_sync.py", "line_number": 264, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Number of results: {len(test_result_tab)}\")\n"}, {"code": "E800", "filename": ".\\db\\ado_sync.py", "line_number": 273, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"Test result:  {tr.TcSuiteMap.ts_ext_id}, {tr.test_result}\")\n"}, {"code": "E265", "filename": ".\\db\\ado_sync.py", "line_number": 273, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"Test result:  {tr.TcSuiteMap.ts_ext_id}, {tr.test_result}\")\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 277, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_taf_requirements():\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 290, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def sync_req_from_ado(query_id, as_of=None):\n"}, {"code": "CCR001", "filename": ".\\db\\ado_sync.py", "line_number": 306, "column_number": 1, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "def load_reqs_per_sprint(ending_after: datetime = None, no_future: bool = False, staging: bool = True):\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 306, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def load_reqs_per_sprint(ending_after: datetime = None, no_future: bool = False, staging: bool = True):\n"}, {"code": "E800", "filename": ".\\db\\ado_sync.py", "line_number": 309, "column_number": 1, "text": "Found commented out code", "physical_line": "    # reqs_per_sprint.update({sprint_id: get_g5_reqs(as_of)})\n"}, {"code": "D205", "filename": ".\\db\\ado_sync.py", "line_number": 357, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param config_name: The name of the TAF configuration to be used (see resources/taf_config_list.json)\n    :param db_name: The name of the DB to connect to for loading the iterations (its name in the TAF configuration)\n    :param ado_name: The name of the ADO instance (the name in the TAF configuration) from where\n    :return: No return value\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\ado_sync.py", "line_number": 357, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param config_name: The name of the TAF configuration to be used (see resources/taf_config_list.json)\n    :param db_name: The name of the DB to connect to for loading the iterations (its name in the TAF configuration)\n    :param ado_name: The name of the ADO instance (the name in the TAF configuration) from where\n    :return: No return value\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 374, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def insert_req_staging_records(reqs_version_list):\n"}, {"code": "B007", "filename": ".\\db\\ado_sync.py", "line_number": 376, "column_number": 9, "text": "Loop control variable 'req_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for req_id, req_versions in reqs_version_list.items():\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 385, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def insert_req_rel_staging_records(reqs_version_list):\n"}, {"code": "B007", "filename": ".\\db\\ado_sync.py", "line_number": 387, "column_number": 9, "text": "Loop control variable 'req_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for req_id, req_versions in reqs_version_list.items():\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 396, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def insert_backlog_staging_records(backlog_list):\n"}, {"code": "B007", "filename": ".\\db\\ado_sync.py", "line_number": 398, "column_number": 9, "text": "Loop control variable 'bl_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for bl_id, bl_versions in backlog_list.items():\n"}, {"code": "D103", "filename": ".\\db\\ado_sync.py", "line_number": 407, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(conf_name='DEV'):\n"}], ".\\db\\aut.py": [{"code": "D100", "filename": ".\\db\\aut.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "F401", "filename": ".\\db\\aut.py", "line_number": 2, "column_number": 1, "text": "'sys' imported but unused", "physical_line": "import sys\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_aut_id(release_info):\n"}, {"code": "T201", "filename": ".\\db\\aut.py", "line_number": 17, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Number of AUTs with this name:\", len(aut_ids))\n"}, {"code": "T201", "filename": ".\\db\\aut.py", "line_number": 21, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"The AUT {release_info['aut_name']} is registered in the DB {len(aut_ids)} times.\")\n"}, {"code": "T201", "filename": ".\\db\\aut.py", "line_number": 24, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"The AUT {release_info['aut_name']} is NOT registered in the DB. Register it first!\")\n"}, {"code": "R504", "filename": ".\\db\\aut.py", "line_number": 28, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return aut_id\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_aut_by_id(aut_id: int):\n"}, {"code": "R506", "filename": ".\\db\\aut.py", "line_number": 34, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    if not aut:\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 40, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def aut_release_exists(release_info):\n"}, {"code": "E302", "filename": ".\\db\\aut.py", "line_number": 40, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def aut_release_exists(release_info):\n"}, {"code": "SIM210", "filename": ".\\db\\aut.py", "line_number": 49, "column_number": 12, "text": "Use 'bool(aut_release_count > 0)' instead of 'True if aut_release_count > 0 else False'", "physical_line": "    return True if aut_release_count > 0 else False\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 51, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ado_release_exists(release_info):\n"}, {"code": "E302", "filename": ".\\db\\aut.py", "line_number": 51, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def ado_release_exists(release_info):\n"}, {"code": "SIM210", "filename": ".\\db\\aut.py", "line_number": 59, "column_number": 12, "text": "Use 'bool(ado_release_count > 0)' instead of 'True if ado_release_count > 0 else False'", "physical_line": "    return True if ado_release_count > 0 else False\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 61, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def mgt_release_exists(release_info):\n"}, {"code": "E302", "filename": ".\\db\\aut.py", "line_number": 61, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def mgt_release_exists(release_info):\n"}, {"code": "SIM210", "filename": ".\\db\\aut.py", "line_number": 69, "column_number": 12, "text": "Use 'bool(aut_release_count > 0)' instead of 'True if aut_release_count > 0 else False'", "physical_line": "    return True if aut_release_count > 0 else False\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_mgt_release(release_info):\n"}, {"code": "E800", "filename": ".\\db\\aut.py", "line_number": 79, "column_number": 1, "text": "Found commented out code", "physical_line": "    #db_sesh.close()\n"}, {"code": "E265", "filename": ".\\db\\aut.py", "line_number": 79, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #db_sesh.close()\n"}, {"code": "R504", "filename": ".\\db\\aut.py", "line_number": 80, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return aut_release\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 83, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def next_mgt_release_id():\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def register_mgt_release(release_info):\n"}, {"code": "R505", "filename": ".\\db\\aut.py", "line_number": 94, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if mgt_release_exists(release_info):\n"}, {"code": "E800", "filename": ".\\db\\aut.py", "line_number": 108, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh.close()\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 111, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def register_aut_release(release_info):\n"}, {"code": "CCR001", "filename": ".\\db\\aut.py", "line_number": 131, "column_number": 1, "text": "Cognitive complexity is too high (28 > 7)", "physical_line": "def register_ado_release(release_info):\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 131, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def register_ado_release(release_info):\n"}, {"code": "SIM401", "filename": ".\\db\\aut.py", "line_number": 158, "column_number": 9, "text": "Use 'new_release_ado.ado_project = release_info['pipeline_details'].get(\"projectID\", \"\")' instead of an if-block", "physical_line": "        elif 'projectID' in release_info['pipeline_details']:\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 177, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def next_instance_seq(release_info):\n"}, {"code": "E302", "filename": ".\\db\\aut.py", "line_number": 177, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def next_instance_seq(release_info):\n"}, {"code": "R504", "filename": ".\\db\\aut.py", "line_number": 184, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return aut_instance\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 187, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def register_aut_instance(release_info, instance_info):\n"}, {"code": "SIM210", "filename": ".\\db\\aut.py", "line_number": 202, "column_number": 27, "text": "Use 'bool(op_sys == 'Win')' instead of 'True if op_sys == 'Win' else False'", "physical_line": "    new_instance.is_sim = True if op_sys == 'Win' else False\n"}, {"code": "E800", "filename": ".\\db\\aut.py", "line_number": 205, "column_number": 1, "text": "Found commented out code", "physical_line": "    #db_sesh.close()\n"}, {"code": "E265", "filename": ".\\db\\aut.py", "line_number": 205, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #db_sesh.close()\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 209, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_aut_instance(release_info):\n"}, {"code": "W291", "filename": ".\\db\\aut.py", "line_number": 221, "column_number": 109, "text": "trailing whitespace", "physical_line": "            \"\"\" OLD SOlution that only returned the AUT Instance ID. It was a mistake, and no\n            function is calling this one and expects an int as a return value anymore, so it can be deleted, \n            but the code is useful.\n            aut_instance = db_sesh.query(func.max(AUTInstance.aut_instance)). \\\n                filter(AUTInstance.aut_sha256_id == release_info['sha256sum']).scalar()\n            \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\aut.py", "line_number": 240, "column_number": 1, "text": "Found commented out code", "physical_line": "    #db_sesh.close()\n"}, {"code": "E265", "filename": ".\\db\\aut.py", "line_number": 240, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #db_sesh.close()\n"}, {"code": "R504", "filename": ".\\db\\aut.py", "line_number": 241, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return aut_instance\n"}, {"code": "D103", "filename": ".\\db\\aut.py", "line_number": 244, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}], ".\\db\\conn.py": [{"code": "D200", "filename": ".\\db\\conn.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\n\nThe conn module of the db package handles all database connection tasks.\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\conn.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.MetaData' imported but unused", "physical_line": "from sqlalchemy import create_engine, MetaData, Table\n"}, {"code": "F401", "filename": ".\\db\\conn.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.Table' imported but unused", "physical_line": "from sqlalchemy import create_engine, MetaData, Table\n"}, {"code": "D205", "filename": ".\\db\\conn.py", "line_number": 28, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\db\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\db\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\db\\conn.py", "line_number": 43, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return dbs\n"}, {"code": "D205", "filename": ".\\db\\conn.py", "line_number": 47, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n    :param db_type: The type of RDBMS to connect to. Defaults to pgsql (PostgreSQL). Other options (currently): 'mssql'\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n    :param db_type: The type of RDBMS to connect to. Defaults to pgsql (PostgreSQL). Other options (currently): 'mssql'\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\db\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n    :param db_type: The type of RDBMS to connect to. Defaults to pgsql (PostgreSQL). Other options (currently): 'mssql'\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\db\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n    :param db_type: The type of RDBMS to connect to. Defaults to pgsql (PostgreSQL). Other options (currently): 'mssql'\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\conn.py", "line_number": 69, "column_number": 1, "text": "Found commented out code", "physical_line": "            # \"mssql+pyodbc://scott:tiger@myhost:port/databasename?driver=ODBC+Driver+17+for+SQL+Server\"\n"}, {"code": "E800", "filename": ".\\db\\conn.py", "line_number": 78, "column_number": 1, "text": "Found commented out code", "physical_line": "            # raise TafError(f\"The database type {db_type} is not handled by the test automation framework.\")\n"}, {"code": "R504", "filename": ".\\db\\conn.py", "line_number": 81, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return url\n"}, {"code": "D103", "filename": ".\\db\\conn.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def new_engine(conf_name, db_name):\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 88, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The DB URL is none\")\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 90, "column_number": 9, "text": "print found.", "physical_line": "        print(\"DB URL: \", db_url)\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 94, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is none\")\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 96, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is: \", eng)\n"}, {"code": "D205", "filename": ".\\db\\conn.py", "line_number": 101, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Use the new_session() function to create a new database session factory/configuration\n    which can be used to instantiate uniform DB sessions.\n\n    Parameters\n    ----------\n    conf_file_name : A string with the full path to the config file\n    file_type : The config file type can be toml, yaml or json\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    sesh: An SQLAlchemy Session factory on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\conn.py", "line_number": 101, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Use the new_session() function to create a new database session factory/configuration\n    which can be used to instantiate uniform DB sessions.\n\n    Parameters\n    ----------\n    conf_file_name : A string with the full path to the config file\n    file_type : The config file type can be toml, yaml or json\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    sesh: An SQLAlchemy Session factory on success, None on failure.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\conn.py", "line_number": 117, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"We're factorying a session: \", conf_file_name)\n"}, {"code": "R506", "filename": ".\\db\\conn.py", "line_number": 120, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    if eng is None:\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 124, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is: \", eng)\n"}, {"code": "T201", "filename": ".\\db\\conn.py", "line_number": 131, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The sesh is: \", sesh)\n"}, {"code": "D103", "filename": ".\\db\\conn.py", "line_number": 135, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def kill_session(sesh):\n"}, {"code": "D103", "filename": ".\\db\\conn.py", "line_number": 139, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_db(conf_name, db_name):\n"}, {"code": "D103", "filename": ".\\db\\conn.py", "line_number": 150, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_session(db_name):\n"}, {"code": "R505", "filename": ".\\db\\conn.py", "line_number": 151, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if db_name in sesh_factories:\n"}], ".\\db\\dbutils.py": [{"code": "D100", "filename": ".\\db\\dbutils.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "\n"}, {"code": "D103", "filename": ".\\db\\dbutils.py", "line_number": 2, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def filter_builder(filters: dict, db_object):\n"}, {"code": "T201", "filename": ".\\db\\dbutils.py", "line_number": 19, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Type of column: \", filter_column.type)\n"}], ".\\db\\meta.py": [{"code": "D100", "filename": ".\\db\\meta.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "CCR001", "filename": ".\\db\\meta.py", "line_number": 10, "column_number": 1, "text": "Cognitive complexity is too high (34 > 7)", "physical_line": "def get_db_meta(config_name: str = 'DEV', db_name: str = 'taf', out_dir: Union[Path, str] = \"utils/dev_help/gen_code\"):\n"}, {"code": "D205", "filename": ".\\db\\meta.py", "line_number": 11, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The get_db_meta() function connects to the database passed as an argument and generates boilerplate code\n    representing the tables as SQLAlchemy declarative ORM classes.\n\n    :param config_name: The name of the configuration set that holds the database connection.\n    :param db_name: The name/handle of the database in the configuration set. (No the same as the actual DB name)\n    :param out_dir: The output directory where the generated classes should be stored.\n    :return: No return value. Throws a TafError if the database configuration is not found.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\meta.py", "line_number": 11, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The get_db_meta() function connects to the database passed as an argument and generates boilerplate code\n    representing the tables as SQLAlchemy declarative ORM classes.\n\n    :param config_name: The name of the configuration set that holds the database connection.\n    :param db_name: The name/handle of the database in the configuration set. (No the same as the actual DB name)\n    :param out_dir: The output directory where the generated classes should be stored.\n    :return: No return value. Throws a TafError if the database configuration is not found.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\db\\meta.py", "line_number": 11, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The get_db_meta() function connects to the database passed as an argument and generates boilerplate code\n    representing the tables as SQLAlchemy declarative ORM classes.\n\n    :param config_name: The name of the configuration set that holds the database connection.\n    :param db_name: The name/handle of the database in the configuration set. (No the same as the actual DB name)\n    :param out_dir: The output directory where the generated classes should be stored.\n    :return: No return value. Throws a TafError if the database configuration is not found.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\db\\meta.py", "line_number": 11, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The get_db_meta() function connects to the database passed as an argument and generates boilerplate code\n    representing the tables as SQLAlchemy declarative ORM classes.\n\n    :param config_name: The name of the configuration set that holds the database connection.\n    :param db_name: The name/handle of the database in the configuration set. (No the same as the actual DB name)\n    :param out_dir: The output directory where the generated classes should be stored.\n    :return: No return value. Throws a TafError if the database configuration is not found.\n    \"\"\"\n"}], ".\\db\\parameters.py": [{"code": "D100", "filename": ".\\db\\parameters.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import decimal\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 1, "column_number": 1, "text": "'decimal' imported but unused", "physical_line": "import decimal\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 2, "column_number": 1, "text": "'random' imported but unused", "physical_line": "import random\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 3, "column_number": 1, "text": "'sqlalchemy.func' imported but unused", "physical_line": "from sqlalchemy import func, and_, join\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 3, "column_number": 1, "text": "'sqlalchemy.join' imported but unused", "physical_line": "from sqlalchemy import func, and_, join\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 4, "column_number": 1, "text": "'sqlalchemy' imported but unused", "physical_line": "import sqlalchemy\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.ext.declarative.declarative_base' imported but unused", "physical_line": "from sqlalchemy.ext.declarative import declarative_base\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 6, "column_number": 1, "text": "'sqlalchemy.distinct' imported but unused", "physical_line": "from sqlalchemy import distinct\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.orm.column_property' imported but unused", "physical_line": "from sqlalchemy.orm import column_property, sessionmaker\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.orm.sessionmaker' imported but unused", "physical_line": "from sqlalchemy.orm import column_property, sessionmaker\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 9, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime, timedelta\n"}, {"code": "F401", "filename": ".\\db\\parameters.py", "line_number": 9, "column_number": 1, "text": "'datetime.timedelta' imported but unused", "physical_line": "from datetime import datetime, timedelta\n"}, {"code": "D103", "filename": ".\\db\\parameters.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_group_members(param_group_id):\n"}, {"code": "R504", "filename": ".\\db\\parameters.py", "line_number": 22, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return data_fields\n"}, {"code": "D103", "filename": ".\\db\\parameters.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_details(param_id, instance_id=0):\n"}, {"code": "T201", "filename": ".\\db\\parameters.py", "line_number": 30, "column_number": 5, "text": "print found.", "physical_line": "    print(type(param_details['param_base']))\n"}, {"code": "E800", "filename": ".\\db\\parameters.py", "line_number": 47, "column_number": 1, "text": "Found commented out code", "physical_line": "    #    param_details['param_instances'].append(param_group)\n"}, {"code": "CCR001", "filename": ".\\db\\parameters.py", "line_number": 52, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_param_domain(param_id, instance_id, param_fund_type):\n"}, {"code": "D103", "filename": ".\\db\\parameters.py", "line_number": 52, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_domain(param_id, instance_id, param_fund_type):\n"}, {"code": "T201", "filename": ".\\db\\parameters.py", "line_number": 64, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n At least that \\n\")\n"}, {"code": "D103", "filename": ".\\db\\parameters.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}, {"code": "W292", "filename": ".\\db\\parameters.py", "line_number": 102, "column_number": 38, "text": "no newline at end of file", "physical_line": "    tafdb.init_db(conf_name, db_name)"}], ".\\db\\parameter_table.py": [{"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\ndecription of work item from ADO is parsed to get the parameter table\nHeader of the parameter table is maintained as the column of table in Data base\ncolumn specifiv data id fetched from parameter table and assigned to specific column in Database\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\parameter_table.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\ndecription of work item from ADO is parsed to get the parameter table\nHeader of the parameter table is maintained as the column of table in Data base\ncolumn specifiv data id fetched from parameter table and assigned to specific column in Database\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 8, "column_number": 1, "text": "'logging' imported but unused", "physical_line": "import logging\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 9, "column_number": 1, "text": "'sys' imported but unused", "physical_line": "import sys\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 11, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import Union\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 21, "column_number": 1, "text": "'utils.config.get_config_by_name' imported but unused", "physical_line": "from utils.config import get_config_by_name\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 25, "column_number": 1, "text": "'bs4.BeautifulSoup' imported but unused", "physical_line": "from bs4 import BeautifulSoup\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 26, "column_number": 1, "text": "'unicodedata' imported but unused", "physical_line": "import unicodedata\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 27, "column_number": 1, "text": "'csv' imported but unused", "physical_line": "import csv\n"}, {"code": "F401", "filename": ".\\db\\parameter_table.py", "line_number": 28, "column_number": 1, "text": "'functools' imported but unused", "physical_line": "import functools\n"}, {"code": "CCR001", "filename": ".\\db\\parameter_table.py", "line_number": 36, "column_number": 1, "text": "Cognitive complexity is too high (70 > 7)", "physical_line": "def map_param_table_to_taf_format(req_id, req_version, parameter_tables):\n"}, {"code": "CFQ001", "filename": ".\\db\\parameter_table.py", "line_number": 36, "column_number": 1, "text": "Function map_param_table_to_taf_format has length 101 that exceeds max allowed length 100", "physical_line": "def map_param_table_to_taf_format(req_id, req_version, parameter_tables):\n"}, {"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 37, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param req_id: id of the requirement\n    :param parameter_tables: parameter tables extracted from the requirement description\n    :return: list containing parameter tables mapped to database format \n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\parameter_table.py", "line_number": 37, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param req_id: id of the requirement\n    :param parameter_tables: parameter tables extracted from the requirement description\n    :return: list containing parameter tables mapped to database format \n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\parameter_table.py", "line_number": 40, "column_number": 72, "text": "trailing whitespace", "physical_line": "    \"\"\"\n    :param req_id: id of the requirement\n    :param parameter_tables: parameter tables extracted from the requirement description\n    :return: list containing parameter tables mapped to database format \n    \"\"\"\n"}, {"code": "C416", "filename": ".\\db\\parameter_table.py", "line_number": 48, "column_number": 21, "text": "Unnecessary list comprehension - rewrite using list().", "physical_line": "        tab_names = [tab_name for tab_name in tab_tables.keys()]\n"}, {"code": "W605", "filename": ".\\db\\parameter_table.py", "line_number": 85, "column_number": 33, "text": "invalid escape sequence '\\s'", "physical_line": "            elif re.match(\"Value\\s*.range\", val, re.IGNORECASE):\n"}, {"code": "CCR001", "filename": ".\\db\\parameter_table.py", "line_number": 146, "column_number": 1, "text": "Cognitive complexity is too high (32 > 7)", "physical_line": "def map_desc_table_to_taf_format(req_id, req_version, description_tables):\n"}, {"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 147, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param req_id: id of the requirement\n    :param description_tables: additional description tables extracted from the requirement description\n    :return: list containing additional description tables mapped to database format\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\parameter_table.py", "line_number": 147, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param req_id: id of the requirement\n    :param description_tables: additional description tables extracted from the requirement description\n    :return: list containing additional description tables mapped to database format\n    \"\"\"\n"}, {"code": "C416", "filename": ".\\db\\parameter_table.py", "line_number": 157, "column_number": 26, "text": "Unnecessary list comprehension - rewrite using list().", "physical_line": "        sub_head_names = [sub_head_name for sub_head_name in sub_head_tables.keys()]\n"}, {"code": "F841", "filename": ".\\db\\parameter_table.py", "line_number": 158, "column_number": 9, "text": "local variable 'parameter_tables' is assigned to but never used", "physical_line": "        parameter_tables = sub_head_tables.values()\n"}, {"code": "CCR001", "filename": ".\\db\\parameter_table.py", "line_number": 198, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def taf_paramTable_descTable_from_srd(directory):\n"}, {"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 199, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    directory : Directory containing the Work description in .html files\n\n    Returns : list of parameter tables and description table to be added to data base\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\parameter_table.py", "line_number": 199, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    directory : Directory containing the Work description in .html files\n\n    Returns : list of parameter tables and description table to be added to data base\n    -------\n\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\db\\parameter_table.py", "line_number": 215, "column_number": 13, "text": "print found.", "physical_line": "            print(fname)\n"}, {"code": "CCR001", "filename": ".\\db\\parameter_table.py", "line_number": 225, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def taf_paramTable_descTable_from_ado_req():\n"}, {"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 227, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Returns : List of Parameter tables and Decription tables extracted from the ADO requirements.\n    -------\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\db\\parameter_table.py", "line_number": 227, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Returns : List of Parameter tables and Decription tables extracted from the ADO requirements.\n    -------\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\db\\parameter_table.py", "line_number": 250, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_params_w_desc_ado(req_obj: WorkItem):\n"}, {"code": "D103", "filename": ".\\db\\parameter_table.py", "line_number": 268, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_params_w_desc_taf(req_obj: Requirement):\n"}, {"code": "D103", "filename": ".\\db\\parameter_table.py", "line_number": 289, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_table_from_db():\n"}, {"code": "F841", "filename": ".\\db\\parameter_table.py", "line_number": 292, "column_number": 5, "text": "local variable 'param_name' is assigned to but never used", "physical_line": "    param_name = db_sesh.query(ParameterRaw).all()\n"}, {"code": "D205", "filename": ".\\db\\parameter_table.py", "line_number": 297, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missting requirements\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\parameter_table.py", "line_number": 297, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missting requirements\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\parameter_table.py", "line_number": 304, "column_number": 1, "text": "Found commented out code", "physical_line": "    #param_value = taf_paramTable_from_srd(\"C:/Users/rangan-1/AppData/Roaming/JetBrains/PyCharm2021.2/scratches\")\n"}, {"code": "E265", "filename": ".\\db\\parameter_table.py", "line_number": 304, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #param_value = taf_paramTable_from_srd(\"C:/Users/rangan-1/AppData/Roaming/JetBrains/PyCharm2021.2/scratches\")\n"}, {"code": "E800", "filename": ".\\db\\parameter_table.py", "line_number": 305, "column_number": 1, "text": "Found commented out code", "physical_line": "    #param_value,desc_value = taf_paramTable_descTable_from_srd(\"C:/Users/rangan-1/AppData/Roaming/JetBrains/PyCharm2021.2/scratches\")\n"}, {"code": "E265", "filename": ".\\db\\parameter_table.py", "line_number": 305, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #param_value,desc_value = taf_paramTable_descTable_from_srd(\"C:/Users/rangan-1/AppData/Roaming/JetBrains/PyCharm2021.2/scratches\")\n"}], ".\\db\\pjm.py": [{"code": "D200", "filename": ".\\db\\pjm.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nPjM - Project management related queries and methods\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\pjm.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nPjM - Project management related queries and methods\n\"\"\"\n"}, {"code": "D103", "filename": ".\\db\\pjm.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sprints(ending_after: datetime = None, no_future: bool = False) -> List[ProjectCalendar]:\n"}, {"code": "C416", "filename": ".\\db\\pjm.py", "line_number": 31, "column_number": 19, "text": "Unnecessary list comprehension - rewrite using list().", "physical_line": "    sprint_list = [sprint for sprint in sprints]\n"}, {"code": "R504", "filename": ".\\db\\pjm.py", "line_number": 33, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return sprint_list\n"}], ".\\db\\release_report.py": [{"code": "D100", "filename": ".\\db\\release_report.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\db\\release_report.py", "line_number": 1, "column_number": 1, "text": "'datetime' imported but unused", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\db\\release_report.py", "line_number": 4, "column_number": 1, "text": "'sqlalchemy.orm.aliased' imported but unused", "physical_line": "from sqlalchemy.orm import aliased\n"}, {"code": "D101", "filename": ".\\db\\release_report.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReleaseMeta:\n"}, {"code": "D107", "filename": ".\\db\\release_report.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, sut_version: str = None, iteration: str = None,\n"}, {"code": "D101", "filename": ".\\db\\release_report.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class RequirementItem:\n"}, {"code": "D107", "filename": ".\\db\\release_report.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, req_id: int = None, req_item_id: int = None,\n"}, {"code": "CFQ002", "filename": ".\\db\\release_report.py", "line_number": 24, "column_number": 5, "text": "Function \"__init__\" has 10 arguments that exceeds max allowed 6", "physical_line": "    def __init__(self, req_id: int = None, req_item_id: int = None,\n"}, {"code": "D101", "filename": ".\\db\\release_report.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Requirement:\n"}, {"code": "D107", "filename": ".\\db\\release_report.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, req_id: str = None, req_title: str = None,\n"}, {"code": "CFQ002", "filename": ".\\db\\release_report.py", "line_number": 42, "column_number": 5, "text": "Function \"__init__\" has 10 arguments that exceeds max allowed 6", "physical_line": "    def __init__(self, req_id: str = None, req_title: str = None,\n"}, {"code": "D102", "filename": ".\\db\\release_report.py", "line_number": 66, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def set_def_badge_class_and_note(self):\n"}, {"code": "D101", "filename": ".\\db\\release_report.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Backlog:\n"}, {"code": "D107", "filename": ".\\db\\release_report.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, backlog_id: str = None, backlog_title: str = None, linked_reqs: List[Requirement] = None,\n"}, {"code": "D101", "filename": ".\\db\\release_report.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReleaseScope:\n"}, {"code": "D107", "filename": ".\\db\\release_report.py", "line_number": 94, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, release_meta: ReleaseMeta = None, backlogs: List[Backlog] = None,\n"}, {"code": "D103", "filename": ".\\db\\release_report.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def convert_req_items(req_items):\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 112, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"So the converted items: {report_req_items}\")\n"}, {"code": "CCR001", "filename": ".\\db\\release_report.py", "line_number": 116, "column_number": 1, "text": "Cognitive complexity is too high (26 > 7)", "physical_line": "def get_release_scope(iteration: str):\n"}, {"code": "D103", "filename": ".\\db\\release_report.py", "line_number": 116, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_release_scope(iteration: str):\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 127, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"\\tRC: {rel_content.backlog.req_map}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 135, "column_number": 1, "text": "Found commented out code", "physical_line": "                # print(f\"\\t\\tRTW: {req_to_bl_rel.req.related_requirements}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 137, "column_number": 1, "text": "Found commented out code", "physical_line": "                    # print(f\"\\t\\t\\tReq link: {req_link.req_a_object} -- {req_link.req_b_object}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 139, "column_number": 1, "text": "Found commented out code", "physical_line": "                        # print(f\"\\t\\t\\t\\tSo it's the same, and it's a {type(req_link.req_b_object)}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 142, "column_number": 1, "text": "Found commented out code", "physical_line": "                        # print(f\"\\t\\t\\t\\tSo it's NOT the same, and it's a {type(req_link.req_a_object)}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 156, "column_number": 1, "text": "Found commented out code", "physical_line": "                    # print(f\"So rel_req is a {type(rel_req)}\")\n"}, {"code": "W504", "filename": ".\\db\\release_report.py", "line_number": 157, "column_number": 92, "text": "line break after binary operator", "physical_line": "                    if (rel_req.req_id not in [req.taf_id for req in related_requirements] and\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 167, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"And now the type of the backlog linked requirement after sorting is {type(new_backlog.linked_requirements[0])}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 172, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"And now the type of the related requirement after sorting is {type(related_requirements[0])}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 173, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Supplemental type in get_release_scope() {type(related_requirements)}\")\n"}, {"code": "R504", "filename": ".\\db\\release_report.py", "line_number": 177, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return release_scope\n"}, {"code": "D103", "filename": ".\\db\\release_report.py", "line_number": 180, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_latest_results():\n"}, {"code": "ECE001", "filename": ".\\db\\release_report.py", "line_number": 185, "column_number": 5, "text": "Expression is too complex (8.5 > 7)", "physical_line": "    max_results = db_sesh.query(mgt.TestResult.vp_id, mgt.TestResult.vp_instance_id,\n"}, {"code": "E128", "filename": ".\\db\\release_report.py", "line_number": 189, "column_number": 48, "text": "continuation line under-indented for visual indent", "physical_line": "                                               and_(mgt.TestResult.vp_id == max_results.c.vp_id,\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 195, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(f\"List length: {len(lr_list)}, dict length: {len(lr_dict)}\")\n"}, {"code": "E265", "filename": ".\\db\\release_report.py", "line_number": 195, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(f\"List length: {len(lr_list)}, dict length: {len(lr_dict)}\")\n"}, {"code": "D103", "filename": ".\\db\\release_report.py", "line_number": 200, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def aggregate_results(reqs: List[mgt.Requirement]):\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 205, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"Now checking the results for req {req.title}\")\n"}, {"code": "E265", "filename": ".\\db\\release_report.py", "line_number": 205, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"Now checking the results for req {req.title}\")\n"}, {"code": "E800", "filename": ".\\db\\release_report.py", "line_number": 207, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"{req.ext_id} is mapped to {len(req.coverage_map)} VPs\")\n"}, {"code": "E265", "filename": ".\\db\\release_report.py", "line_number": 207, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"{req.ext_id} is mapped to {len(req.coverage_map)} VPs\")\n"}], ".\\db\\report.py": [{"code": "D100", "filename": ".\\db\\report.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "# from db.schemas import management as mgt, control as ctrl, test\n"}, {"code": "E800", "filename": ".\\db\\report.py", "line_number": 1, "column_number": 1, "text": "Found commented out code", "physical_line": "# from db.schemas import management as mgt, control as ctrl, test\n"}, {"code": "F401", "filename": ".\\db\\report.py", "line_number": 3, "column_number": 1, "text": "'sqlalchemy' imported but unused", "physical_line": "import sqlalchemy\n"}, {"code": "F401", "filename": ".\\db\\report.py", "line_number": 7, "column_number": 1, "text": "'db.schemas.management.MGTReleaseBase' imported but unused", "physical_line": "from db.schemas.management import TestResult, TestCase, TestSuite, TestStep, StepToCaseMap, TestRun, TestRunItem, \\\n    TcSuiteMap, MGTReleaseBase, ReleaseContent\n"}, {"code": "F401", "filename": ".\\db\\report.py", "line_number": 7, "column_number": 1, "text": "'db.schemas.management.ReleaseContent' imported but unused", "physical_line": "from db.schemas.management import TestResult, TestCase, TestSuite, TestStep, StepToCaseMap, TestRun, TestRunItem, \\\n    TcSuiteMap, MGTReleaseBase, ReleaseContent\n"}, {"code": "F401", "filename": ".\\db\\report.py", "line_number": 10, "column_number": 1, "text": "'sqlalchemy.orm.sessionmaker' imported but unused", "physical_line": "from sqlalchemy.orm import column_property, sessionmaker, relationship\n"}, {"code": "F401", "filename": ".\\db\\report.py", "line_number": 10, "column_number": 1, "text": "'sqlalchemy.orm.relationship' imported but unused", "physical_line": "from sqlalchemy.orm import column_property, sessionmaker, relationship\n"}, {"code": "E265", "filename": ".\\db\\report.py", "line_number": 16, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#TODO: De-spaghettization: should the reporting classes be here or in report/blocks.py\n"}, {"code": "E800", "filename": ".\\db\\report.py", "line_number": 24, "column_number": 1, "text": "Found commented out code", "physical_line": "# host_id = column_property(test_node_table.__table__.c.host_id, test_host_table.__table__.c.host_id)\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 52, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestStepResult(TestStep):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 52, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestStepResult(TestStep):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 56, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestCaseTree(TestCase):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 56, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestCaseTree(TestCase):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 60, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSuiteTree(TestSuite):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestSuiteTree(TestSuite):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 64, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestCaseParent(Base):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestCaseParent(Base):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 80, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSuiteChild(Base):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 80, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestSuiteChild(Base):\n"}, {"code": "E800", "filename": ".\\db\\report.py", "line_number": 102, "column_number": 1, "text": "Found commented out code", "physical_line": "# test_result_summary = join(test_result_table, test_case_table, test_suite_table, test_step_table, checkpoint_table)\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 107, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestItemSummary(Base):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 107, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestItemSummary(Base):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 117, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestRunDetails(Base):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestRunDetails(Base):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 131, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportFilters:\n"}, {"code": "D107", "filename": ".\\db\\report.py", "line_number": 133, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 143, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportMeta:\n"}, {"code": "D107", "filename": ".\\db\\report.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, report_filters):\n"}, {"code": "H601", "filename": ".\\db\\report.py", "line_number": 151, "column_number": 1, "text": "class has low (16.67%) cohesion", "physical_line": "class TestResultSummary:\n"}, {"code": "D101", "filename": ".\\db\\report.py", "line_number": 151, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestResultSummary:\n"}, {"code": "D107", "filename": ".\\db\\report.py", "line_number": 152, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, test_results_query):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 206, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_result_summary(filters=None):\n"}, {"code": "E302", "filename": ".\\db\\report.py", "line_number": 206, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_result_summary(filters=None):\n"}, {"code": "R504", "filename": ".\\db\\report.py", "line_number": 215, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return test_results\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 220, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_runs(session_id='%', period_from=\"1970.01.01 00:00:00\",\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 233, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_runs_rf(filters: ReportFilters):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 250, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_run_items(test_run: TestRun):\n"}, {"code": "E800", "filename": ".\\db\\report.py", "line_number": 267, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"\\t\\t ----------------------- TEST CASE: \", ts.test_cases[0].tc_title)\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 272, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def add_results_to_run_items(test_items: List[TestSuiteTree], test_run: TestRun):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 288, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_suite_children(suite_id, suite_version):\n"}, {"code": "T201", "filename": ".\\db\\report.py", "line_number": 294, "column_number": 9, "text": "print found.", "physical_line": "        print(suite_child)\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 299, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_suite_children_full(suite_id, suite_version):\n"}, {"code": "T201", "filename": ".\\db\\report.py", "line_number": 306, "column_number": 9, "text": "print found.", "physical_line": "        print(suite_child)\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 311, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_suites_tcs(suite_id, suite_version):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 326, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_tc_steps(tc_id, tc_version):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 341, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_run_results(run_details: TestRunDetails):\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 351, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_step_results(run_id, session_id, step_id, step_version, step_instance, tc_id,\n"}, {"code": "CFQ002", "filename": ".\\db\\report.py", "line_number": 351, "column_number": 1, "text": "Function \"get_test_step_results\" has 10 arguments that exceeds max allowed 6", "physical_line": "def get_test_step_results(run_id, session_id, step_id, step_version, step_instance, tc_id,\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 374, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_session_report(session_id):\n"}, {"code": "T201", "filename": ".\\db\\report.py", "line_number": 401, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"SUITE {current_suite.fullname}, started at {current_suite.start_time} has {current_suite.asserts} results\")\n"}, {"code": "E303", "filename": ".\\db\\report.py", "line_number": 405, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "# strptime() is platform independent, that's why we use it instead of strftime()\n"}, {"code": "E800", "filename": ".\\db\\report.py", "line_number": 407, "column_number": 1, "text": "Found commented out code", "physical_line": "# print(time.strptime(\"1970.01.01 00:00:00\", \"%Y.%m.%d %H:%M:%S\"))\n"}, {"code": "D103", "filename": ".\\db\\report.py", "line_number": 413, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}, {"code": "E303", "filename": ".\\db\\report.py", "line_number": 413, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def init_connection(conf_name, db_name):\n"}], ".\\db\\srd.py": [{"code": "D100", "filename": ".\\db\\srd.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "D103", "filename": ".\\db\\srd.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_srd_record(srd_item, srd_meta):\n"}, {"code": "D103", "filename": ".\\db\\srd.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def insert_srd_records(srd_struct):\n"}, {"code": "B007", "filename": ".\\db\\srd.py", "line_number": 47, "column_number": 9, "text": "Loop control variable 'req_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for req_id, req in srd_struct['reqs'].items():\n"}], ".\\db\\__init__.py": [{"code": "D200", "filename": ".\\db\\__init__.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nThe db package contains all the functions and classes needed to handle the test data.\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\__init__.py", "line_number": 6, "column_number": 1, "text": "'db.conn' imported but unused", "physical_line": "import db.conn\n"}, {"code": "F401", "filename": ".\\db\\__init__.py", "line_number": 7, "column_number": 1, "text": "'resources.conf' imported but unused", "physical_line": "import resources.conf\n"}, {"code": "F401", "filename": ".\\db\\__init__.py", "line_number": 9, "column_number": 1, "text": "'sqlalchemy.ext.declarative as decl' imported but unused", "physical_line": "from sqlalchemy.ext import declarative as decl\n"}, {"code": "F401", "filename": ".\\db\\__init__.py", "line_number": 10, "column_number": 1, "text": "'sqlalchemy as q' imported but unused", "physical_line": "import sqlalchemy as q\n"}, {"code": "E800", "filename": ".\\db\\__init__.py", "line_number": 12, "column_number": 1, "text": "Found commented out code", "physical_line": "#Session = conn.new_session_factory(\"resources/conf/taf_global.config\", \"json\", \"orion_taf\")\n"}, {"code": "E265", "filename": ".\\db\\__init__.py", "line_number": 12, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#Session = conn.new_session_factory(\"resources/conf/taf_global.config\", \"json\", \"orion_taf\")\n"}, {"code": "W391", "filename": ".\\db\\__init__.py", "line_number": 13, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\db\\schemas\\control.py": [{"code": "D200", "filename": ".\\db\\schemas\\control.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Control schema aka ctrl\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\control.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Control schema aka ctrl\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\schemas\\control.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.DefaultClause' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, TEXT, DefaultClause, CHAR, join, and_, BOOLEAN\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 14, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ObjectMap(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 15, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the object_map table in the Control schema,\n    which contains the symbolic names and technical references to each GUI element used in the tests.\n    DB Comment: The DB representation of the object map.\n    It may or may not have a file based version depending on the GUI test tool used.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 15, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the object_map table in the Control schema,\n    which contains the symbolic names and technical references to each GUI element used in the tests.\n    DB Comment: The DB representation of the object map.\n    It may or may not have a file based version depending on the GUI test tool used.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\control.py", "line_number": 15, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This class is mapped to the object_map table in the Control schema,\n    which contains the symbolic names and technical references to each GUI element used in the tests.\n    DB Comment: The DB representation of the object map.\n    It may or may not have a file based version depending on the GUI test tool used.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\control.py", "line_number": 33, "column_number": 78, "text": "trailing whitespace", "physical_line": "    \"\"\"The identifier used by the UI automation tool to reference the object. \n    It can be a path, xpath, python data structure or anything that can be represented as a string.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 41, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestHost(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 42, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_host table in the Control schema.\n    DB Comment: This table holds the details of individually addressable hosts where test nodes are installed.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 42, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_host table in the Control schema.\n    DB Comment: This table holds the details of individually addressable hosts where test nodes are installed.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\control.py", "line_number": 51, "column_number": 71, "text": "trailing whitespace", "physical_line": "    \"\"\"Test host name. Doesn't necessarily match the actual host name, \n    it can also be an internal logical handle used by the TAF only to look up the IP or MAC address. \n    Foreign key to the test_node table.\"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\control.py", "line_number": 52, "column_number": 101, "text": "trailing whitespace", "physical_line": "    \"\"\"Test host name. Doesn't necessarily match the actual host name, \n    it can also be an internal logical handle used by the TAF only to look up the IP or MAC address. \n    Foreign key to the test_node table.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 60, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestNode(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 61, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_node table in the Control schema.\n    DB Comment: Keep track of the available AUT installations on instruments, containers and servers.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 61, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_node table in the Control schema.\n    DB Comment: Keep track of the available AUT installations on instruments, containers and servers.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 100, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSession(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 101, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_session table in the Control schema.\n    DB Comment: It mostly serves the Rest API for executing elemental tasks - like clicking a button -\n    on the instrument or simulator, but it can also be used internally.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 101, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_session table in the Control schema.\n    DB Comment: It mostly serves the Rest API for executing elemental tasks - like clicking a button -\n    on the instrument or simulator, but it can also be used internally.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\control.py", "line_number": 112, "column_number": 91, "text": "trailing whitespace", "physical_line": "    \"\"\"How the automation framework is running. In case of API sessions this field is used \n    to indicate if GUI or backend commands are accepted, or both.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 128, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestNodeAttribs(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 129, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_node_attribs table in the Control schema.\n    DB Comment: Description and attributes of each test node. It can be used to find the right environment\n    for a given test.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 129, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_node_attribs table in the Control schema.\n    DB Comment: Description and attributes of each test node. It can be used to find the right environment\n    for a given test.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 145, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class HwAccessory(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 146, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_node_attribs table in the Control schema.\n    DB Comment: The list of simulated or actual HW accessories available for test nodes.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 146, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_node_attribs table in the Control schema.\n    DB Comment: The list of simulated or actual HW accessories available for test nodes.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 161, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUT(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\control.py", "line_number": 162, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Basic identifier data about the Application Under Test\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 162, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    Basic identifier data about the Application Under Test\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\control.py", "line_number": 162, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Basic identifier data about the Application Under Test\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 177, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUTReleaseBase(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\control.py", "line_number": 178, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    The AUT releases' basic information fod identifying releases.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 178, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    The AUT releases' basic information fod identifying releases.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 199, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUTInstance(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 200, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    There can be several installations - instances - of the same version of the same AUT.\n    This table keeps track of these.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 200, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    There can be several installations - instances - of the same version of the same AUT.\n    This table keeps track of these.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 223, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUTReleaseAdo(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 224, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    The Azure DevOps details of each AUT release.\n    Details taken from https://docs.microsoft.com/en-us/azure/devops/pipelines/process/runs?view=azure-devops#example\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 224, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The Azure DevOps details of each AUT release.\n    Details taken from https://docs.microsoft.com/en-us/azure/devops/pipelines/process/runs?view=azure-devops#example\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 248, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUTReleaseView(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\control.py", "line_number": 248, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class AUTReleaseView(Base):\n"}, {"code": "E126", "filename": ".\\db\\schemas\\control.py", "line_number": 257, "column_number": 62, "text": "continuation line over-indented for hanging indent", "physical_line": "                                                             isouter=True).join(AUTReleaseAdo, and_(\n"}, {"code": "E122", "filename": ".\\db\\schemas\\control.py", "line_number": 258, "column_number": 9, "text": "continuation line missing indentation or outdented", "physical_line": "        AUTReleaseAdo.aut_id == AUTReleaseBase.aut_id, AUTReleaseAdo.aut_sha256_id == AUTReleaseBase.aut_sha256_id),\n"}, {"code": "E126", "filename": ".\\db\\schemas\\control.py", "line_number": 259, "column_number": 81, "text": "continuation line over-indented for hanging indent", "physical_line": "                                                                                isouter=True)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\control.py", "line_number": 267, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class AUTSquishInstance(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\control.py", "line_number": 268, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    Mapping AUT instances to their Squish counterparts and enriching their details with\n    data required to be handled in Squish.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\control.py", "line_number": 268, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Mapping AUT instances to their Squish counterparts and enriching their details with\n    data required to be handled in Squish.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\control.py", "line_number": 268, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Mapping AUT instances to their Squish counterparts and enriching their details with\n    data required to be handled in Squish.\n    \"\"\"\n"}, {"code": "E241", "filename": ".\\db\\schemas\\control.py", "line_number": 275, "column_number": 31, "text": "multiple spaces after ','", "physical_line": "    aut_id = Column(INTEGER(),  primary_key=True, nullable=False)\n"}], ".\\db\\schemas\\labxroot.py": [{"code": "D100", "filename": ".\\db\\schemas\\labxroot.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import Column, VARCHAR\n"}, {"code": "H601", "filename": ".\\db\\schemas\\labxroot.py", "line_number": 5, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestTable(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\labxroot.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestTable(Base):\n"}, {"code": "W292", "filename": ".\\db\\schemas\\labxroot.py", "line_number": 9, "column_number": 52, "text": "no newline at end of file", "physical_line": "    test_name = Column(VARCHAR(100), nullable=True)"}], ".\\db\\schemas\\management.py": [{"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Management schema (aka mgt)\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\management.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Management schema (aka mgt)\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\schemas\\management.py", "line_number": 11, "column_number": 1, "text": "'db.schemas.test.VerificationPoint' imported but unused", "physical_line": "from db.schemas.test import VerificationPoint\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 18, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Requirement(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 19, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the requirement table in the Management schema.\n    DB Comment: Mapping to TFS requirements. Since not all automated test cases may be found in TFS,\n    traceability must be ensured internally.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 19, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the requirement table in the Management schema.\n    DB Comment: Mapping to TFS requirements. Since not all automated test cases may be found in TFS,\n    traceability must be ensured internally.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\management.py", "line_number": 65, "column_number": 1, "text": "Found commented out code", "physical_line": "    # related_requirements = relationship(\"RequirementLink\", foreign_keys=[req_id])\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 68, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Backlog(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 69, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the backlog table in the Management schema.\n    DB Comment: Indicates that the backlog is in active development, i.e. included in the current sprint.\n    This is a definitive indicator, unlike the backlog state, which is just a reflection of its state\n    in the connected management tool, e.g. Azure DevOps or JIRA.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 69, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the backlog table in the Management schema.\n    DB Comment: Indicates that the backlog is in active development, i.e. included in the current sprint.\n    This is a definitive indicator, unlike the backlog state, which is just a reflection of its state\n    in the connected management tool, e.g. Azure DevOps or JIRA.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\management.py", "line_number": 78, "column_number": 1, "text": "Found commented out code", "physical_line": "    # backlog_id = Column(INTEGER(), primary_key=True, nullable=False, comment='Internal TAF backlog ID')\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 102, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestCase(Base):\n"}, {"code": "E303", "filename": ".\\db\\schemas\\management.py", "line_number": 102, "column_number": 1, "text": "too many blank lines (6)", "physical_line": "class TestCase(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 103, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_case table in the Management schema.\n    DB Comment: Can be an internal TAF test case or more likely a representation of a TFS test case.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 103, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_case table in the Management schema.\n    DB Comment: Can be an internal TAF test case or more likely a representation of a TFS test case.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 152, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestStep(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 153, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the test_step table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 153, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_step table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 175, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TStepVPMap(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\management.py", "line_number": 175, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TStepVPMap(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 204, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class VPInstance(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\management.py", "line_number": 204, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class VPInstance(Base):\n"}, {"code": "D102", "filename": ".\\db\\schemas\\management.py", "line_number": 255, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_essential_entry_ctx(self):\n"}, {"code": "R504", "filename": ".\\db\\schemas\\management.py", "line_number": 261, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return context\n"}, {"code": "D102", "filename": ".\\db\\schemas\\management.py", "line_number": 263, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_full_entry_ctx(self):\n"}, {"code": "R504", "filename": ".\\db\\schemas\\management.py", "line_number": 265, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return context\n"}, {"code": "D102", "filename": ".\\db\\schemas\\management.py", "line_number": 267, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_essential_exit_ctx(self):\n"}, {"code": "R504", "filename": ".\\db\\schemas\\management.py", "line_number": 269, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return context\n"}, {"code": "D102", "filename": ".\\db\\schemas\\management.py", "line_number": 271, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get_full_exit_ctx(self):\n"}, {"code": "R504", "filename": ".\\db\\schemas\\management.py", "line_number": 273, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return context\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 276, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSuite(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 277, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_suite table in the Management schema.\n    DB Comment: Define test suites/sets in this table.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 277, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_suite table in the Management schema.\n    DB Comment: Define test suites/sets in this table.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 304, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TcSuiteMap(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 305, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the tc_to_suite_map table in the Management schema.\n    DB Comment: Define links between test suites and test cases in this table.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 305, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the tc_to_suite_map table in the Management schema.\n    DB Comment: Define links between test suites and test cases in this table.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 335, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSet(Base):\n"}, {"code": "E303", "filename": ".\\db\\schemas\\management.py", "line_number": 335, "column_number": 1, "text": "too many blank lines (4)", "physical_line": "class TestSet(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 336, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the tc_to_suite_map table in the Management schema.\n    DB Comment: Define links between test suites and test cases in this table.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 336, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the tc_to_suite_map table in the Management schema.\n    DB Comment: Define links between test suites and test cases in this table.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 358, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class CoverageMap(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 359, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the coverage_map table in the Management schema.\n    DB Comment: Link test items to a requirement to analyse coverage.\n    A link to the checkpoint is enough, it can be used to look up all the test items\n    linked to this checkpoint.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 359, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the coverage_map table in the Management schema.\n    DB Comment: Link test items to a requirement to analyse coverage.\n    A link to the checkpoint is enough, it can be used to look up all the test items\n    linked to this checkpoint.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 385, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class StepToCaseMap(Base):\n"}, {"code": "E303", "filename": ".\\db\\schemas\\management.py", "line_number": 385, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "class StepToCaseMap(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 386, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the tstep_to_tcase_map table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 386, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the tstep_to_tcase_map table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 401, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestRun(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 402, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_run table in the Management schema.\n    DB Comment: Mostly a link to TFS as internally a session represents a test run better then these records,\n    but in some cases it can be a simple internal test run.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 402, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_run table in the Management schema.\n    DB Comment: Mostly a link to TFS as internally a session represents a test run better then these records,\n    but in some cases it can be a simple internal test run.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\management.py", "line_number": 427, "column_number": 1, "text": "Found commented out code", "physical_line": "    # test_node_udid = Column(VARCHAR(length=30), nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 430, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestRunItem(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 431, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_run_item table in the Management schema.\n    DB Comment: A list of test items executed during the test run.\n    These can be test suites (dummy ones created automatically for ad-hoc test runs) or other types, but mostly suites.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 431, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the test_run_item table in the Management schema.\n    DB Comment: A list of test items executed during the test run.\n    These can be test suites (dummy ones created automatically for ad-hoc test runs) or other types, but mostly suites.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 450, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestResult(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 451, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the test_result table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 451, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the test_result table in the Management schema.\n    \"\"\"\n"}, {"code": "E231", "filename": ".\\db\\schemas\\management.py", "line_number": 459, "column_number": 45, "text": "missing whitespace after ','", "physical_line": "                            primary_key=True,nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 489, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class MGTReleaseBase(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 490, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the aut_release_base table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 490, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the aut_release_base table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 515, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ADOTestPlanMapping(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 516, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the ado_test_plan_mapping table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 516, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the ado_test_plan_mapping table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 529, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReleaseContent(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 530, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the aut_release_content table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 530, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the aut_release_content table in the Management schema.\n    \"\"\"\n"}, {"code": "E225", "filename": ".\\db\\schemas\\management.py", "line_number": 535, "column_number": 15, "text": "missing whitespace around operator", "physical_line": "    release_id= Column(INTEGER(), ForeignKey('mgt.aut_release_base.release_id'), primary_key=True, nullable=False,\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 551, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReqToWorkitem(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 552, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the req_to_workitem table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 552, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the req_to_workitem table in the Management schema.\n    \"\"\"\n"}, {"code": "E127", "filename": ".\\db\\schemas\\management.py", "line_number": 563, "column_number": 40, "text": "continuation line over-indented for visual indent", "physical_line": "                                       'although there is no FK constraint ATM.')\n"}, {"code": "E127", "filename": ".\\db\\schemas\\management.py", "line_number": 572, "column_number": 40, "text": "continuation line over-indented for visual indent", "physical_line": "                                       'although there is no FK constraint ATM.')\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 577, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementLink(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 578, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_link table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 578, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_link table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 606, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementItem(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 607, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_item table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 607, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_item table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 631, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementItemLink(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\management.py", "line_number": 632, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_item_link table in the Management schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 632, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_item_link table in the Management schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\management.py", "line_number": 647, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ProjectCalendar(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\management.py", "line_number": 648, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\management.py", "line_number": 648, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\management.py", "line_number": 648, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}], ".\\db\\schemas\\reference.py": [{"code": "D200", "filename": ".\\db\\schemas\\reference.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Reference/Meta schema aka refm\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\reference.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Reference/Meta schema aka refm\n\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 14, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Param(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 15, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param table in the Reference schema.\n    DB Comment: A list of parameters/variables in the system under test\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 15, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param table in the Reference schema.\n    DB Comment: A list of parameters/variables in the system under test\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 29, "column_number": 101, "text": "trailing whitespace", "physical_line": "    \"\"\"Indicates the origin of the parameter. Either represents a field defined in the AUT directly, \n    or a logical field derived from one or more other parameters and/or formulas.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 33, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamType(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 34, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_type table in the Reference schema.\n    DB Comment: The list of internally defined and used logical data types which can be assigned to a test parameter.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 34, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_type table in the Reference schema.\n    DB Comment: The list of internally defined and used logical data types which can be assigned to a test parameter.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 43, "column_number": 55, "text": "trailing whitespace", "physical_line": "    \"\"\"Logical, platform independent name of the type. \n        Serves as a common denominator between various modules and applications.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 50, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamTypeAttrib(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 51, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_type_attrib table in the Reference schema.\n    DB Comment: This table holds the actual values of parameter attributes.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 51, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_type_attrib table in the Reference schema.\n    DB Comment: This table holds the actual values of parameter attributes.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 62, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamTypeAttribType(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 63, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_type_attrib_type table in the Reference schema.\n\n    DB Comment: Holds the custom attributes of all the parameters/variables of the AUT which can be changed\n    or read by external entities including both people and software. Use this table to describe the logical data types\n    of the system under test.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 77, "column_number": 110, "text": "trailing whitespace", "physical_line": "    \"\"\"Internal, logical name of the variable, not necessarily mapped to any other applications or documents. \n    Should remain unchanged and preferably unique.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 84, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamConstraint(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 85, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_constraint table in the Reference schema.\n    DB Comment: Define simple constraints between parameters' values.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 85, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_constraint table in the Reference schema.\n    DB Comment: Define simple constraints between parameters' values.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 103, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamDomain(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 104, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_domain table in the Reference schema.\n    DB Comment: Holds the set of allowed values for each parameter.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 104, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_domain table in the Reference schema.\n    DB Comment: Holds the set of allowed values for each parameter.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 115, "column_number": 75, "text": "trailing whitespace", "physical_line": "    \"\"\"One record for each end of a range, a pattern (regex) for a string, \n    an item on a list or an element of an enum.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 121, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamValidPattern(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 122, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_valid_pattern table in the Reference schema.\n\n    DB Comment: This table/object can hold the basic attributes of a text parameter, which can be used to generate possible\n    values for it.\n    Deprecated.  A combination of the data in sut_param_domain, sut_param_type,\n    sut_param_type_attrib and sut_param_type_attrib_type should be used.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 144, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamValidNumeric(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 145, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_valid_pattern table in the Reference schema.\n\n    DB Comment: This table can hold the basic attributes of a numeric parameter, that can be used to\n    generate possible values for it.\n    Deprecated.  A combination of the data in sut_param_domain, sut_param_type, sut_param_type_attrib\n    and sut_param_type_attrib_type should be used.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 164, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamDisplay(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\reference.py", "line_number": 165, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_display table in the Reference schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 165, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_display table in the Reference schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 187, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamInstance(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 188, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_instance table in the Reference schema.\n\n    DB Comment: The sut_param_instance table holds the various representations of parameters.\n    The allowed values, display mode, validation rules can be different for the same parameter\n    in different contexts, so this table must keep track of these differences.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 209, "column_number": 99, "text": "trailing whitespace", "physical_line": "    \"\"\"Whether the value - mostly the default value - of the parameter is affected by the context. \n    An example would be the method ID, whose default value starts with A for autogenerated, \n    and different letters for Mettler/User defined methods.\"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\reference.py", "line_number": 210, "column_number": 92, "text": "trailing whitespace", "physical_line": "    \"\"\"Whether the value - mostly the default value - of the parameter is affected by the context. \n    An example would be the method ID, whose default value starts with A for autogenerated, \n    and different letters for Mettler/User defined methods.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 220, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamInstanceLink(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\reference.py", "line_number": 221, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_instance_link table in the Reference schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 221, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_instance_link table in the Reference schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 234, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamGroup(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 235, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_group table in the Reference schema.\n    DB Comment: Define groups of parameters which should be handled together.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 235, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_group table in the Reference schema.\n    DB Comment: Define groups of parameters which should be handled together.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 252, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamGroupMember(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 253, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_group_member table in the Reference schema.\n    DB Comment: Map parameters to parameter groups.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 253, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_group_member table in the Reference schema.\n    DB Comment: Map parameters to parameter groups.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 265, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutEvent(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 265, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutEvent(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 287, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SmEvent(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 288, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_sm_event table in the Reference schema.\n    DB Comment: A list of events which can take place in the state machine.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 288, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_sm_event table in the Reference schema.\n    DB Comment: A list of events which can take place in the state machine.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 304, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SmState(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 305, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_sm_state table in the Reference schema.\n    DB Comment: The list of states the application state machine can take. Without definition.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 305, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_sm_state table in the Reference schema.\n    DB Comment: The list of states the application state machine can take. Without definition.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 320, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SmTransition(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 321, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_constraint table in the Reference schema.\n    DB Comment: The transition rules of the state machine.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 321, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param_constraint table in the Reference schema.\n    DB Comment: The transition rules of the state machine.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 339, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class CtxBase(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 340, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_ctx_base table in the Reference schema.\n    DB comment: The list of available application contexts.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 340, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_ctx_base table in the Reference schema.\n    DB comment: The list of available application contexts.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 354, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class UserOutput(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\reference.py", "line_number": 355, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_ctx_base table in the Reference schema.\n    DB comment: The basic list of output channels of the SUT. These can include screens/views,\n    printed or any other human readable format.\n    (Related to the param_display.)\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\reference.py", "line_number": 355, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_ctx_base table in the Reference schema.\n    DB comment: The basic list of output channels of the SUT. These can include screens/views,\n    printed or any other human readable format.\n    (Related to the param_display.)\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 371, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutGenericElement(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 371, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutGenericElement(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 392, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutGUIElement(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 392, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutGUIElement(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 425, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutGUIElementAttribute(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 425, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutGUIElementAttribute(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 439, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutTranslation(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 439, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutTranslation(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 454, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutGUIElementRelation(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 454, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutGUIElementRelation(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 471, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutGUIElementReleaseMap(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 471, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutGUIElementReleaseMap(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\reference.py", "line_number": 486, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutNavigationPath(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\reference.py", "line_number": 486, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutNavigationPath(Base):\n"}], ".\\db\\schemas\\staging.py": [{"code": "D200", "filename": ".\\db\\schemas\\staging.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Staging schema\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\staging.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Staging schema\n\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 11, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParameterRaw(Base):\n"}, {"code": "E302", "filename": ".\\db\\schemas\\staging.py", "line_number": 11, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class ParameterRaw(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 12, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the parameters_raw table in the staging schema.\n    DB Comment: A list of parameters/variables tables in the system under test\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\staging.py", "line_number": 12, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the parameters_raw table in the staging schema.\n    DB Comment: A list of parameters/variables tables in the system under test\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\staging.py", "line_number": 18, "column_number": 1, "text": "Found commented out code", "physical_line": "    # param_rec_id = Column(BIGINT(), primary_key=True,nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 49, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReqDescriptionRaw(Base):\n"}, {"code": "E302", "filename": ".\\db\\schemas\\staging.py", "line_number": 49, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class ReqDescriptionRaw(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 50, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the description_raw table in the staging schema.\n    DB Comment: A list of parameters/variables tables in the system under test\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\staging.py", "line_number": 50, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the description_raw table in the staging schema.\n    DB Comment: A list of parameters/variables tables in the system under test\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\staging.py", "line_number": 57, "column_number": 1, "text": "Found commented out code", "physical_line": "    #desc_rec_id = Column(BIGINT(), primary_key=True, nullable=False)\n"}, {"code": "E265", "filename": ".\\db\\schemas\\staging.py", "line_number": 57, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #desc_rec_id = Column(BIGINT(), primary_key=True, nullable=False)\n"}, {"code": "E231", "filename": ".\\db\\schemas\\staging.py", "line_number": 61, "column_number": 34, "text": "missing whitespace after ','", "physical_line": "    req_ext_id = Column(VARCHAR(),nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 70, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SRDStructureRaw(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\staging.py", "line_number": 71, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the srd_structure_raw table in the Staging schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 71, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the srd_structure_raw table in the Staging schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 105, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 106, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "    \"\"\"\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 145, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementControl(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 146, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_ctrl table in the Staging schema.\n    DB Comment: Mapping to TFS requirements. Since not all automated test cases may be found in TFS,\n    traceability must be ensured internally.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\staging.py", "line_number": 146, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the requirement_ctrl table in the Staging schema.\n    DB Comment: Mapping to TFS requirements. Since not all automated test cases may be found in TFS,\n    traceability must be ensured internally.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 183, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BacklogControl(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 184, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the backlog_ctrl table in the Staging schema.\n    DB Comment: Indicates that the backlog is in active development, i.e. included in the current sprint.\n    This is a definitive indicator, unlike the backlog state, which is just a reflection of its state\n    in the connected management tool, e.g. Azure DevOps or JIRA.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\staging.py", "line_number": 184, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the backlog_ctrl table in the Staging schema.\n    DB Comment: Indicates that the backlog is in active development, i.e. included in the current sprint.\n    This is a definitive indicator, unlike the backlog state, which is just a reflection of its state\n    in the connected management tool, e.g. Azure DevOps or JIRA.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\db\\schemas\\staging.py", "line_number": 193, "column_number": 1, "text": "Found commented out code", "physical_line": "    # backlog_id = Column(INTEGER(), primary_key=True, nullable=False, comment='Internal TAF backlog ID')\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 212, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BacklogRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 213, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "    \"\"\"\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 238, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ItemRelationsRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 239, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "    \"\"\"\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 257, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ItemRelationUpdatesRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 258, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "    \"\"\"\n    \"\"\"\n"}, {"code": "E128", "filename": ".\\db\\schemas\\staging.py", "line_number": 264, "column_number": 46, "text": "continuation line under-indented for visual indent", "physical_line": "                                             maxvalue=2147483647, cycle=False, cache=1),\n"}, {"code": "E128", "filename": ".\\db\\schemas\\staging.py", "line_number": 265, "column_number": 26, "text": "continuation line under-indented for visual indent", "physical_line": "                         primary_key=True, nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 276, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamFormatMap(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\staging.py", "line_number": 277, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the param_format_map table in the Staging schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 277, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the param_format_map table in the Staging schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 291, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamDomainTypeMap(Base):\n"}, {"code": "D200", "filename": ".\\db\\schemas\\staging.py", "line_number": 292, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This class is mapped to the param_domain_data_type_map table in the Staging schema.\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 292, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the param_domain_data_type_map table in the Staging schema.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 305, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamCandidate(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\staging.py", "line_number": 306, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param table in the Reference schema.\n    DB Comment: A list of parameters/variables in the system under test\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\staging.py", "line_number": 306, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the sut_param table in the Reference schema.\n    DB Comment: A list of parameters/variables in the system under test\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\staging.py", "line_number": 321, "column_number": 101, "text": "trailing whitespace", "physical_line": "    \"\"\"Indicates the origin of the parameter. Either represents a field defined in the AUT directly, \n    or a logical field derived from one or more other parameters and/or formulas.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 327, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class EntityLinkRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 328, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "    \"\"\"\n\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\staging.py", "line_number": 349, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamConditionRaw(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\staging.py", "line_number": 349, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParamConditionRaw(Base):\n"}, {"code": "W292", "filename": ".\\db\\schemas\\staging.py", "line_number": 360, "column_number": 115, "text": "no newline at end of file", "physical_line": "                                                              for_update=False), primary_key=True, nullable=False)"}], ".\\db\\schemas\\test.py": [{"code": "D200", "filename": ".\\db\\schemas\\test.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Test schema\n\"\"\"\n"}, {"code": "D400", "filename": ".\\db\\schemas\\test.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Test schema\n\"\"\"\n"}, {"code": "F401", "filename": ".\\db\\schemas\\test.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.BOOLEAN' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, INTEGER, ForeignKey, TEXT, Sequence, DefaultClause, BOOLEAN\n"}, {"code": "E800", "filename": ".\\db\\schemas\\test.py", "line_number": 14, "column_number": 1, "text": "Found commented out code", "physical_line": "#  param_id = Column(INTEGER(), ForeignKey(ref_schema_name + '.sut_param.param_id'), primary_key=True, nullable=False)\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 17, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class CheckPoint(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 18, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the checkpoint table in the Test Schema.\n    A checkpoint or verification point is the smallest 'unit of test' ;-) and serves as a basis for a more\n    granular test execution tracking and report mechanism. Using these instead of test cases for generating\n    test metrics can be a great improvement on SW quality overview.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 18, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the checkpoint table in the Test Schema.\n    A checkpoint or verification point is the smallest 'unit of test' ;-) and serves as a basis for a more\n    granular test execution tracking and report mechanism. Using these instead of test cases for generating\n    test metrics can be a great improvement on SW quality overview.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 32, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddFile(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 33, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_file table in the Test schema.\n    DB Comment: This table records the details of Gherkin feature files whose contents were loaded into the DB.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 33, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_file table in the Test schema.\n    DB Comment: This table records the details of Gherkin feature files whose contents were loaded into the DB.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 45, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddFeature(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 46, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature table in the Test schema.\n    DB Comment: Define the BDD features to provide a container for the individual scenarios.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 46, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature table in the Test schema.\n    DB Comment: Define the BDD features to provide a container for the individual scenarios.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 70, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddScenario(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 71, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario table in the Test schema.\n    DB Comment: BDD scenarios: ID, title and description\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 71, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario table in the Test schema.\n    DB Comment: BDD scenarios: ID, title and description\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 91, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddStep(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 92, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step table in the Test schema.\n    DB Comment: Gherkin step definitions with some extra information.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 92, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step table in the Test schema.\n    DB Comment: Gherkin step definitions with some extra information.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 114, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddTag(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 115, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_tag table in the Test schema.\n    DB Comment: The tags used by the Python behave package to provide control over test execution can\n    be loaded here from external feature files.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 115, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_tag table in the Test schema.\n    DB Comment: The tags used by the Python behave package to provide control over test execution can\n    be loaded here from external feature files.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 132, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddFeatureScenario(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 133, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature_scenario table in the Test schema.\n    DB Comment: Map scenarios to features\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 133, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature_scenario table in the Test schema.\n    DB Comment: Map scenarios to features\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 144, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddScenarioDataset(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 145, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario_data table in the Test schema.\n    DB Comment: Maps an existing dataset to a scenario\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 145, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario_data table in the Test schema.\n    DB Comment: Maps an existing dataset to a scenario\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 158, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddScenarioStep(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 159, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario table in the Test schema.\n    DB Comment: Define scenarios by mapping test steps to them.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 159, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_scenario table in the Test schema.\n    DB Comment: Define scenarios by mapping test steps to them.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 178, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddStepCheckpoint(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 179, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step_checkpoint table in the Test schema.\n    DB Comment: Map Gherkin test steps to checkpoints.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 179, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step_checkpoint table in the Test schema.\n    DB Comment: Map Gherkin test steps to checkpoints.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 189, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class BddStepParam(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 190, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step_param table in the Test schema.\n    DB Comment: Define the mapping between placeholders in the Gherkin step definitions\n    and actual parameters known to the test automation framework.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 190, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_step_param table in the Test schema.\n    DB Comment: Define the mapping between placeholders in the Gherkin step definitions\n    and actual parameters known to the test automation framework.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 206, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DdtSet(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 207, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set table in the Test schema.\n    DB Comment: Define data sets for data driven tests.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 207, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set table in the Test schema.\n    DB Comment: Define data sets for data driven tests.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\test.py", "line_number": 222, "column_number": 105, "text": "trailing whitespace", "physical_line": "    \"\"\"Define if the data set is stored in a dedicated TABLE, accessed via a VIEW or a stored PROCEDURE, \n    or is a dynamic QUERY on the ddt_set_value mapping table.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 228, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DdtSetParam(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 229, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set_param table in the Test schema.\n    DB Comment: Map DDT test data sets to fields (parameters) but NO values.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 229, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set_param table in the Test schema.\n    DB Comment: Map DDT test data sets to fields (parameters) but NO values.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 243, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DdtSetParamCheckpoint(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 244, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set_param_checkpoint table in the Test schema.\n    DB Comment: Map abstract checkpoint to a specific parameter in a specific data set.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 244, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the ddt_set_param_checkpoint table in the Test schema.\n    DB Comment: Map abstract checkpoint to a specific parameter in a specific data set.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 256, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DdtSetValue(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 257, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature table in the Test schema.\n    DB Comment: Map each field (parameter) in a test data set to a static value.\n    Use this table for temporary data sets and create new ones for frequently used data.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 257, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the bdd_feature table in the Test schema.\n    DB Comment: Map each field (parameter) in a test data set to a static value.\n    Use this table for temporary data sets and create new ones for frequently used data.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 272, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class KwdDefinition(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 273, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_definition table in the Test schema.\n    DB Comment: Input table for keyword driven tests. Define the keywords in this table.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 273, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_definition table in the Test schema.\n    DB Comment: Input table for keyword driven tests. Define the keywords in this table.\n    \"\"\"\n"}, {"code": "W291", "filename": ".\\db\\schemas\\test.py", "line_number": 285, "column_number": 64, "text": "trailing whitespace", "physical_line": "    \"\"\"The keyword, which maps to a keyword-driven test action. \n    This is just the definition of the keyword, not an actual executable instance.\"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 293, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class KwdTestCase(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 294, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_test_case table in the Test schema.\n    DB Comment: Definition and description of keyword driven test cases.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 294, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_test_case table in the Test schema.\n    DB Comment: Definition and description of keyword driven test cases.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 306, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class KwdTcData(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 307, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_tc_data table in the Test schema.\n    DB Comment: Map keyword driven test cases to data sets.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 307, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_tc_data table in the Test schema.\n    DB Comment: Map keyword driven test cases to data sets.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 320, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class KwdTcStep(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 321, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_tc_step table in the Test schema.\n    DB Comment: Define which keywords are to be included in each keyword driven test case as steps.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 321, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_tc_step table in the Test schema.\n    DB Comment: Define which keywords are to be included in each keyword driven test case as steps.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 336, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class KwdParam(Base):\n"}, {"code": "D204", "filename": ".\\db\\schemas\\test.py", "line_number": 337, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_param table in the Test schema.\n    DB Comment: A mapping between the REF schemas parameter definitions and the keyword definitions.\n    Use this table to define which keyword can take which parameters, not their values.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\db\\schemas\\test.py", "line_number": 337, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This class is mapped to the kwd_param table in the Test schema.\n    DB Comment: A mapping between the REF schemas parameter definitions and the keyword definitions.\n    Use this table to define which keyword can take which parameters, not their values.\n    \"\"\"\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 353, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class VerificationPoint(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\test.py", "line_number": 353, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class VerificationPoint(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\test.py", "line_number": 376, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class VPType(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\test.py", "line_number": 376, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class VPType(Base):\n"}, {"code": "W391", "filename": ".\\db\\schemas\\test.py", "line_number": 387, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\db\\schemas\\__init__.py": [{"code": "D104", "filename": ".\\db\\schemas\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "import db\n"}], ".\\db\\schemas\\olap\\pjm.py": [{"code": "D100", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import Column, VARCHAR, INTEGER, DefaultClause, TEXT, BOOLEAN, TIMESTAMP, CHAR\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 6, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DevWorkItem(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class DevWorkItem(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 22, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ProjectCalendar(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ProjectCalendar(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 37, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Requirement(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 37, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Requirement(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 67, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class RequirementItem(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 67, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class RequirementItem(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 87, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class SutRelease(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\pjm.py", "line_number": 87, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class SutRelease(Base):\n"}], ".\\db\\schemas\\olap\\report.py": [{"code": "D100", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import Column, VARCHAR, INTEGER, TEXT, TIMESTAMP, JSON, BIGINT\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 6, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class VpResult(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class VpResult(Base):\n"}, {"code": "H601", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 86, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestItem(Base):\n"}, {"code": "D101", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 86, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestItem(Base):\n"}, {"code": "E128", "filename": ".\\db\\schemas\\olap\\report.py", "line_number": 89, "column_number": 9, "text": "continuation line under-indented for visual indent", "physical_line": "        'This table serves as a lookup table to match test item titles and descriptions to the vp_result table.'}\n"}], ".\\db\\schemas\\olap\\__init__.py": [{"code": "D104", "filename": ".\\db\\schemas\\olap\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\doc\\code_samples\\ado_taf_db_sync.py": [{"code": "D205", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "D208", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "D400", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "W293", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 2, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "W291", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 3, "column_number": 112, "text": "trailing whitespace", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "W293", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 10, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "\"\"\"\n \n Use these sample functions as a starting point if you need to implement anything related to copying stuff from \n Azure DevOps into the Test Automation Framework DB, and you haven't done this before.\n\n For an example usage, check the \"unit test\" unittests/db/test_ado_sync.py -> test_sync_req_from_ado()\n\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "F401", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 19, "column_number": 1, "text": "'azure.devops.v6_0.work_item_tracking.Wiql' imported but unused", "physical_line": "from azure.devops.v6_0.work_item_tracking import Wiql, WorkItem\n"}, {"code": "D103", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "E302", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 44, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "W293", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 63, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "    \n"}, {"code": "W293", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 64, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "    \n"}, {"code": "D103", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 65, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_taf_requirements():\n"}, {"code": "CCR001", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 84, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def get_reqs_by_query(query_id):\n"}, {"code": "D103", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_reqs_by_query(query_id):\n"}, {"code": "F811", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 84, "column_number": 1, "text": "redefinition of unused 'get_reqs_by_query' from line 27", "physical_line": "def get_reqs_by_query(query_id):\n"}, {"code": "D103", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 108, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_req_from_ado_req(ado_req_key, ado_req):\n"}, {"code": "F811", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 108, "column_number": 1, "text": "redefinition of unused 'taf_req_from_ado_req' from line 27", "physical_line": "def taf_req_from_ado_req(ado_req_key, ado_req):\n"}, {"code": "E302", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 108, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def taf_req_from_ado_req(ado_req_key, ado_req):\n"}, {"code": "E800", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 128, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"ADoREQ: {vars(ado_req)}\")\n"}, {"code": "E265", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 128, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"ADoREQ: {vars(ado_req)}\")\n"}, {"code": "E128", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 132, "column_number": 24, "text": "continuation line under-indented for visual indent", "physical_line": "                       f\"{type(ado_req)} is not valid\")\n"}, {"code": "R504", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 133, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_req\n"}, {"code": "D205", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 137, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missing requirements\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 137, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missing requirements\n    \"\"\"\n"}, {"code": "W292", "filename": ".\\doc\\code_samples\\ado_taf_db_sync.py", "line_number": 157, "column_number": 24, "text": "no newline at end of file", "physical_line": "    return missing_reqs"}], ".\\doc\\code_samples\\test_login_page.py": [{"code": "D100", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import unittest\n"}, {"code": "F401", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 5, "column_number": 1, "text": "'selenium.webdriver.common.by.By' imported but unused", "physical_line": "from selenium.webdriver.common.by import By\n"}, {"code": "H601", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 9, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestLogin(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D101", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestLogin(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D102", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def test_aelogin_page(self):\n"}, {"code": "T201", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 13, "column_number": 9, "text": "print found.", "physical_line": "        print(title)\n"}, {"code": "D102", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def test_elogin_username_box(self):\n"}, {"code": "E712", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 18, "column_number": 26, "text": "comparison to True should be 'if cond is True:' or 'if cond:'", "physical_line": "        assert displayed == True, \"username webelement not displayed\"\n"}, {"code": "D102", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def test_login_page(self):\n"}, {"code": "W391", "filename": ".\\doc\\code_samples\\test_login_page.py", "line_number": 27, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\doc\\code_samples\\test_lxc_launcher.py": [{"code": "D100", "filename": ".\\doc\\code_samples\\test_lxc_launcher.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import unittest\n"}, {"code": "F401", "filename": ".\\doc\\code_samples\\test_lxc_launcher.py", "line_number": 2, "column_number": 1, "text": "'pytest' imported but unused", "physical_line": "import pytest\n"}, {"code": "H601", "filename": ".\\doc\\code_samples\\test_lxc_launcher.py", "line_number": 7, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Lxclauncher(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D101", "filename": ".\\doc\\code_samples\\test_lxc_launcher.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Lxclauncher(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D102", "filename": ".\\doc\\code_samples\\test_lxc_launcher.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def test_lxc_launcher(self):\n"}], ".\\doc\\code_samples\\test_resource_page.py": [{"code": "D100", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import unittest\n"}, {"code": "F401", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 2, "column_number": 1, "text": "'pytest' imported but unused", "physical_line": "import pytest\n"}, {"code": "H601", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 7, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Resourcepage(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D101", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Resourcepage(unittest.TestCase, LoginPage, LxcLauncher):\n"}, {"code": "D102", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def test_lxc_launcher(self):\n"}, {"code": "W391", "filename": ".\\doc\\code_samples\\test_resource_page.py", "line_number": 15, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\doc\\source\\conf.py": [{"code": "D100", "filename": ".\\doc\\source\\conf.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "# Configuration file for the Sphinx documentation builder.\n"}, {"code": "A001", "filename": ".\\doc\\source\\conf.py", "line_number": 40, "column_number": 1, "text": "variable \"copyright\" is shadowing a python builtin", "physical_line": "copyright = '2019, Mettler Toledo'\n"}], ".\\flask_reporting\\flask_app\\gunicorn-cfg.py": [{"code": "D200", "filename": ".\\flask_reporting\\flask_app\\gunicorn-cfg.py", "line_number": 2, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nCopyright (c) 2019 - present AppSeed.us\n\"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\gunicorn-cfg.py", "line_number": 2, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nCopyright (c) 2019 - present AppSeed.us\n\"\"\"\n"}], ".\\flask_reporting\\flask_app\\run.py": [{"code": "D100", "filename": ".\\flask_reporting\\flask_app\\run.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from apps import app\n"}, {"code": "W292", "filename": ".\\flask_reporting\\flask_app\\run.py", "line_number": 3, "column_number": 14, "text": "no newline at end of file", "physical_line": "    app.run()"}], ".\\flask_reporting\\flask_app\\apps\\views.py": [{"code": "D100", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.jsonify' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.session' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.Response' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.redirect' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.url_for' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 1, "text": "'flask.send_file' imported but unused", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 81, "text": "missing whitespace after ','", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 1, "column_number": 89, "text": "missing whitespace after ','", "physical_line": "from flask import render_template, jsonify, request, session, Response, redirect,url_for,send_file\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 3, "column_number": 1, "text": "'flask_socketio.SocketIO' imported but unused", "physical_line": "from flask_socketio import SocketIO\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 5, "column_number": 1, "text": "Found commented out code", "physical_line": "#from db.release_report import get_release_scope, ReleaseScope\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 5, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#from db.release_report import get_release_scope, ReleaseScope\n"}, {"code": "ECE001", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 11, "column_number": 1, "text": "Expression is too complex (8 > 7)", "physical_line": "release_scope_1 = {\n"}, {"code": "E126", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 12, "column_number": 21, "text": "continuation line over-indented for hanging indent", "physical_line": "                    \"release_meta\":{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 12, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    \"release_meta\":{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 13, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"iteration\":\"41\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 13, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"iteration\":\"41\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 14, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"sut_version\":\"sv1\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 14, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"sut_version\":\"sv1\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 16, "column_number": 31, "text": "missing whitespace after ':'", "physical_line": "                    \"backlogs\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 17, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"id\":\"46451\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 17, "column_number": 25, "text": "missing whitespace after ':'", "physical_line": "                    \"id\":\"46451\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 18, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"title\":\"SWT: Setup Stirrer - Part 2\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 18, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"SWT: Setup Stirrer - Part 2\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 19, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"linked_requirements\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 19, "column_number": 42, "text": "missing whitespace after ':'", "physical_line": "                    \"linked_requirements\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 20, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"id\":\"46317\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 20, "column_number": 25, "text": "missing whitespace after ':'", "physical_line": "                    \"id\":\"46317\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 21, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 21, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 22, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 22, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 23, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"doc_ref\":\"SRD050\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 23, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"doc_ref\":\"SRD050\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 24, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 24, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 25, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 25, "column_number": 43, "text": "missing whitespace after ':'", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 26, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 26, "column_number": 36, "text": "missing whitespace after ':'", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 27, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 27, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 28, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 28, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 29, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 29, "column_number": 39, "text": "missing whitespace after ':'", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 30, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 30, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 31, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 31, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 31, "column_number": 41, "text": "missing whitespace after ','", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 31, "column_number": 58, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 33, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 33, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 33, "column_number": 42, "text": "missing whitespace after ','", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 33, "column_number": 59, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E124", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 34, "column_number": 21, "text": "closing bracket does not match visual indentation", "physical_line": "                    },\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 35, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 35, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 35, "column_number": 42, "text": "missing whitespace after ','", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 35, "column_number": 59, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E124", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 36, "column_number": 21, "text": "closing bracket does not match visual indentation", "physical_line": "                    }]\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 38, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"id\":\"32911\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 38, "column_number": 26, "text": "missing whitespace after ':'", "physical_line": "                    {\"id\":\"32911\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 39, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 39, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 40, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 40, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 41, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"doc_ref\":\"SRD054\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 41, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"doc_ref\":\"SRD054\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 42, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 42, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 43, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 43, "column_number": 43, "text": "missing whitespace after ':'", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 44, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 44, "column_number": 36, "text": "missing whitespace after ':'", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 45, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 45, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 46, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 46, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 47, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 47, "column_number": 39, "text": "missing whitespace after ':'", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 48, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 48, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 49, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 49, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 49, "column_number": 40, "text": "missing whitespace after ','", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 49, "column_number": 57, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 53, "column_number": 22, "text": "missing whitespace after ','", "physical_line": "                    },{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 54, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"id\": \"46451_1\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 55, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"title\": \"SWT: Setup Stirrer - Part 2_1\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 56, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"linked_requirements\": [{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 93, "column_number": 9, "text": "continuation line missing indentation or outdented", "physical_line": "        }]\n"}, {"code": "E123", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 94, "column_number": 21, "text": "closing bracket does not match indentation of opening bracket's line", "physical_line": "                    }\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 98, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def home():\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 99, "column_number": 1, "text": "Found commented out code", "physical_line": "    #release_scope: ReleaseScope = get_release_scope(\"41\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 99, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #release_scope: ReleaseScope = get_release_scope(\"41\")\n"}, {"code": "ECE001", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 102, "column_number": 5, "text": "Expression is too complex (8 > 7)", "physical_line": "    release_scope = {\n"}, {"code": "E126", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 103, "column_number": 21, "text": "continuation line over-indented for hanging indent", "physical_line": "                    \"release_meta\":{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 103, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    \"release_meta\":{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 104, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"all_iteration\":iterations,\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 104, "column_number": 36, "text": "missing whitespace after ':'", "physical_line": "                    \"all_iteration\":iterations,\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 105, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"iteration\":\"41\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 105, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"iteration\":\"41\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 106, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"sut_version\":\"sv1\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 106, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"sut_version\":\"sv1\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 108, "column_number": 31, "text": "missing whitespace after ':'", "physical_line": "                    \"backlogs\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 109, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"id\":\"46451\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 109, "column_number": 25, "text": "missing whitespace after ':'", "physical_line": "                    \"id\":\"46451\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 110, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"title\":\"SWT: Setup Stirrer - Part 2\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 110, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"SWT: Setup Stirrer - Part 2\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 111, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"linked_requirements\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 111, "column_number": 42, "text": "missing whitespace after ':'", "physical_line": "                    \"linked_requirements\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 112, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"id\":\"46317\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 112, "column_number": 25, "text": "missing whitespace after ':'", "physical_line": "                    \"id\":\"46317\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 113, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 113, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 114, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 114, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 115, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"doc_ref\":\"SRD050\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 115, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"doc_ref\":\"SRD050\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 116, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 116, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 117, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 117, "column_number": 43, "text": "missing whitespace after ':'", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 118, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 118, "column_number": 36, "text": "missing whitespace after ':'", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 119, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 119, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 120, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 120, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 121, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 121, "column_number": 39, "text": "missing whitespace after ':'", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 122, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 122, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 123, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 123, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 123, "column_number": 41, "text": "missing whitespace after ','", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 123, "column_number": 58, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"2820\",\"req_item_title\":\"Description LXC_ID 83675\"\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 125, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 125, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 125, "column_number": 42, "text": "missing whitespace after ','", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 125, "column_number": 59, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2821\",\"req_item_title\":\"A 'Local Resource' shall represent a 'Resource' which is specific to an instrument and is needed only on this instrument.\"\n"}, {"code": "E124", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 126, "column_number": 21, "text": "closing bracket does not match visual indentation", "physical_line": "                    },\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 127, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 127, "column_number": 35, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 127, "column_number": 42, "text": "missing whitespace after ','", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 127, "column_number": 59, "text": "missing whitespace after ':'", "physical_line": "                    {\"req_item_id\":\"2822\",\"req_item_title\":\"Examples: Tolerance profiles with Calibration/MinWeigh, adjustment sets, MT electronic hardware without possessing any chip ID such as old generation pumps/stirrers Rules: - They can have only one assigned instrument - They can be changed by a 'Task' - The assigned instrument cannot be changed to another instrument\"\n"}, {"code": "E124", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 128, "column_number": 21, "text": "closing bracket does not match visual indentation", "physical_line": "                    }]\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 130, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    {\"id\":\"32911\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 130, "column_number": 26, "text": "missing whitespace after ':'", "physical_line": "                    {\"id\":\"32911\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 131, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 131, "column_number": 28, "text": "missing whitespace after ':'", "physical_line": "                    \"title\":\"HR: Groups: Local Resource\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 132, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 132, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"version\":\"1.00\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 133, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"doc_ref\":\"SRD054\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 133, "column_number": 30, "text": "missing whitespace after ':'", "physical_line": "                    \"doc_ref\":\"SRD054\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 134, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 134, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_state\":\"Approved\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 135, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 135, "column_number": 43, "text": "missing whitespace after ':'", "physical_line": "                    \"implementation_state\":\"Partially implemented\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 136, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 136, "column_number": 36, "text": "missing whitespace after ':'", "physical_line": "                    \"testing_state\":\"Not tested\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 137, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 137, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"def_badge_class\":\"bg-success\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 138, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 138, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "                    \"imp_badge_class\":\"bg-warning\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 139, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 139, "column_number": 39, "text": "missing whitespace after ':'", "physical_line": "                    \"test_badge_class\":\"bg-secondary\",\n"}, {"code": "E128", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 140, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 140, "column_number": 32, "text": "missing whitespace after ':'", "physical_line": "                    \"req_items\":[{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 141, "column_number": 21, "text": "continuation line missing indentation or outdented", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 141, "column_number": 34, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 141, "column_number": 40, "text": "missing whitespace after ','", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 141, "column_number": 57, "text": "missing whitespace after ':'", "physical_line": "                    \"req_item_id\":\"555\",\"req_item_title\":\"Description The stirrers setup can be accessed via MenuTree -> MI_SU_Stirrer, see [1] & [2].\"\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 145, "column_number": 22, "text": "missing whitespace after ','", "physical_line": "                    },{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 146, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"id\": \"46451_1\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 147, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"title\": \"SWT: Setup Stirrer - Part 2_1\",\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 148, "column_number": 13, "text": "continuation line missing indentation or outdented", "physical_line": "            \"linked_requirements\": [{\n"}, {"code": "E122", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 185, "column_number": 9, "text": "continuation line missing indentation or outdented", "physical_line": "        }]\n"}, {"code": "E123", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 186, "column_number": 21, "text": "closing bracket does not match indentation of opening bracket's line", "physical_line": "                    }\n"}, {"code": "E303", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 189, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    return render_template('index.html',**release_scope)\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 189, "column_number": 40, "text": "missing whitespace after ','", "physical_line": "    return render_template('index.html',**release_scope)\n"}, {"code": "H601", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 192, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class check_button(Resource):\n"}, {"code": "D101", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 192, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class check_button(Resource):\n"}, {"code": "D102", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 193, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def post(self):\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 195, "column_number": 9, "text": "print found.", "physical_line": "        print(request_data)\n"}, {"code": "D102", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 197, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get(self):\n"}, {"code": "E301", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 197, "column_number": 5, "text": "expected 1 blank line, found 0", "physical_line": "    def get(self):\n"}, {"code": "F841", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 199, "column_number": 9, "text": "local variable 'val1' is assigned to but never used", "physical_line": "        val1 = 2\n"}, {"code": "H601", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 202, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class tc_by_id(Resource):\n"}, {"code": "D101", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 202, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class tc_by_id(Resource):\n"}, {"code": "E302", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 202, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class tc_by_id(Resource):\n"}, {"code": "D102", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 203, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def get(self,tc_id):\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 203, "column_number": 17, "text": "missing whitespace after ','", "physical_line": "    def get(self,tc_id):\n"}, {"code": "E111", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 208, "column_number": 16, "text": "indentation is not a multiple of 4", "physical_line": "               id_found = backlog\n"}, {"code": "E111", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 209, "column_number": 16, "text": "indentation is not a multiple of 4", "physical_line": "               break\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 213, "column_number": 44, "text": "missing whitespace after ','", "physical_line": "        return render_template('index.html',**rel_scope)\n"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 218, "column_number": 30, "text": "missing whitespace after ','", "physical_line": "api.add_resource(check_button,\"/check_button\",methods=['GET', 'POST'])"}, {"code": "E231", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 218, "column_number": 46, "text": "missing whitespace after ','", "physical_line": "api.add_resource(check_button,\"/check_button\",methods=['GET', 'POST'])"}, {"code": "W292", "filename": ".\\flask_reporting\\flask_app\\apps\\views.py", "line_number": 218, "column_number": 71, "text": "no newline at end of file", "physical_line": "api.add_resource(check_button,\"/check_button\",methods=['GET', 'POST'])"}], ".\\flask_reporting\\flask_app\\apps\\__init__.py": [{"code": "D104", "filename": ".\\flask_reporting\\flask_app\\apps\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "from flask import Flask\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\apps\\__init__.py", "line_number": 5, "column_number": 1, "text": "'apps.views' imported but unused", "physical_line": "from apps import views\n"}, {"code": "E402", "filename": ".\\flask_reporting\\flask_app\\apps\\__init__.py", "line_number": 5, "column_number": 1, "text": "module level import not at top of file", "physical_line": "from apps import views\n"}, {"code": "W391", "filename": ".\\flask_reporting\\flask_app\\apps\\__init__.py", "line_number": 9, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\flask_reporting\\flask_app\\db_reporting\\conn.py": [{"code": "D200", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\n\nThe conn module of the db package handles all database connection tasks.\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.MetaData' imported but unused", "physical_line": "from sqlalchemy import create_engine, MetaData, Table\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.Table' imported but unused", "physical_line": "from sqlalchemy import create_engine, MetaData, Table\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 11, "column_number": 1, "text": "Found commented out code", "physical_line": "#import logging\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 11, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#import logging\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 15, "column_number": 1, "text": "Found commented out code", "physical_line": "#from utils.tafexcept import TafError\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 15, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#from utils.tafexcept import TafError\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 17, "column_number": 1, "text": "Found commented out code", "physical_line": "#taf_logger = logging.getLogger('taf')\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 17, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#taf_logger = logging.getLogger('taf')\n"}, {"code": "D205", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 28, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 28, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The get_dbs() function is little more than a wrapper around the utils.config.read_config_file() function,\n    but it also extracts the database relevant settings and returns them in a dictionary.\n\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n\n    Returns\n    -------\n    dbs: A dictionary with database connection details on success, None on failure.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 43, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return dbs\n"}, {"code": "D205", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 47, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 47, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The get_db_url() function reads a configuration file and finds the connection details\n    Parameters\n    ----------\n    conf_name : The name of a predefined configuration set. Must be available in utils.config.config_map\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    A database connection url as string on success, None on failure.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 66, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return url\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 69, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def new_engine(conf_name, db_name):\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 73, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The DB URL is none\")\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 75, "column_number": 9, "text": "print found.", "physical_line": "        print(\"DB URL: \", db_url)\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 79, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is none\")\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 81, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is: \", eng)\n"}, {"code": "D205", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 86, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Use the new_session() function to create a new database session factory/configuration\n    which can be used to instantiate uniform DB sessions.\n\n    Parameters\n    ----------\n    conf_file_name : A string with the full path to the config file\n    file_type : The config file type can be toml, yaml or json\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    sesh: An SQLAlchemy Session factory on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 86, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Use the new_session() function to create a new database session factory/configuration\n    which can be used to instantiate uniform DB sessions.\n\n    Parameters\n    ----------\n    conf_file_name : A string with the full path to the config file\n    file_type : The config file type can be toml, yaml or json\n    db_name : The database name as it's referenced in the config file, which may be different from the\n    actual database name.\n\n    Returns\n    -------\n    sesh: An SQLAlchemy Session factory on success, None on failure.\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 102, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(\"We're factorying a session: \", conf_file_name)\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 103, "column_number": 1, "text": "Found commented out code", "physical_line": "    #taf_logger.info(\"Initiating DB connection\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 103, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #taf_logger.info(\"Initiating DB connection\")\n"}, {"code": "R506", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 105, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    if eng is None:\n"}, {"code": "B016", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 107, "column_number": 9, "text": "Cannot raise a literal. Did you intend to return it or raise an Exception?", "physical_line": "        raise \"The engine is none\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 108, "column_number": 1, "text": "Found commented out code", "physical_line": "        #raise TafError(msg=\"The engine is none\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 108, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #raise TafError(msg=\"The engine is none\")\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 110, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The engine is: \", eng)\n"}, {"code": "B016", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 115, "column_number": 9, "text": "Cannot raise a literal. Did you intend to return it or raise an Exception?", "physical_line": "        raise \"The session is none\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 116, "column_number": 1, "text": "Found commented out code", "physical_line": "        #raise TafError(msg=\"The Session is none\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 116, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #raise TafError(msg=\"The Session is none\")\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 118, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The sesh is: \", sesh)\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 122, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def kill_session(sesh):\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 126, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_db(conf_name, db_name):\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 128, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"There is a sessionmaker already configured for the {db_name} database\")\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 129, "column_number": 1, "text": "Found commented out code", "physical_line": "        #taf_logger.warning(f\"There is a sessionmaker already configured for the {db_name} database\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 129, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #taf_logger.warning(f\"There is a sessionmaker already configured for the {db_name} database\")\n"}, {"code": "B016", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 133, "column_number": 13, "text": "Cannot raise a literal. Did you intend to return it or raise an Exception?", "physical_line": "            raise \"The session factory is None in init_db()\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 134, "column_number": 1, "text": "Found commented out code", "physical_line": "            #raise TafError(msg=\"The session factory is None in init_db()\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 134, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #raise TafError(msg=\"The session factory is None in init_db()\")\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 138, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_session(db_name):\n"}, {"code": "R505", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 139, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if db_name in sesh_factories:\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 140, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"The {db_name} DB was found in the sesh_factories\")\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 141, "column_number": 1, "text": "Found commented out code", "physical_line": "        #taf_logger.error(f\"The {db_name} DB was found in the sesh_factories\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 141, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #taf_logger.error(f\"The {db_name} DB was found in the sesh_factories\")\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 153, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"A session was requested for {db_name} before the session factory could be initialized\")\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 154, "column_number": 1, "text": "Found commented out code", "physical_line": "        #taf_logger.error(f\"A session was requested for {db_name} before the session factory could be initialized\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\conn.py", "line_number": 154, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #taf_logger.error(f\"A session was requested for {db_name} before the session factory could be initialized\")\n"}], ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py": [{"code": "D100", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import desc\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 4, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime, timedelta\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 4, "column_number": 1, "text": "'datetime.timedelta' imported but unused", "physical_line": "from datetime import datetime, timedelta\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_iterations() -> List[ProjectCalendar]:\n"}, {"code": "E302", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 8, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_iterations() -> List[ProjectCalendar]:\n"}, {"code": "R504", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 15, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return iteration_list\n"}, {"code": "W391", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\get_db_data.py", "line_number": 16, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py": [{"code": "D104", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "import db_reporting.conn\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 1, "column_number": 1, "text": "'db_reporting.conn' imported but unused", "physical_line": "import db_reporting.conn\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 2, "column_number": 1, "text": "'resources.conf' imported but unused", "physical_line": "import resources.conf\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 4, "column_number": 1, "text": "'sqlalchemy.ext.declarative as decl' imported but unused", "physical_line": "from sqlalchemy.ext import declarative as decl\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy as q' imported but unused", "physical_line": "import sqlalchemy as q"}, {"code": "W292", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\__init__.py", "line_number": 5, "column_number": 23, "text": "no newline at end of file", "physical_line": "import sqlalchemy as q"}], ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py": [{"code": "D200", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nTable definitions for the Management schema (aka mgt)\n\"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nTable definitions for the Management schema (aka mgt)\n\"\"\"\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.ForeignKey' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, DefaultClause, REAL, Sequence, TEXT, NUMERIC, \\\n    CHAR, BOOLEAN\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.REAL' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, DefaultClause, REAL, Sequence, TEXT, NUMERIC, \\\n    CHAR, BOOLEAN\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.NUMERIC' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, DefaultClause, REAL, Sequence, TEXT, NUMERIC, \\\n    CHAR, BOOLEAN\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.CHAR' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, DefaultClause, REAL, Sequence, TEXT, NUMERIC, \\\n    CHAR, BOOLEAN\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy.BOOLEAN' imported but unused", "physical_line": "from sqlalchemy import Column, VARCHAR, TIMESTAMP, INTEGER, ForeignKey, DefaultClause, REAL, Sequence, TEXT, NUMERIC, \\\n    CHAR, BOOLEAN\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 7, "column_number": 1, "text": "'sqlalchemy.CheckConstraint' imported but unused", "physical_line": "from sqlalchemy import CheckConstraint\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 8, "column_number": 1, "text": "'sqlalchemy.orm.relationship' imported but unused", "physical_line": "from sqlalchemy.orm import relationship\n"}, {"code": "H601", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 19, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ProjectCalendar(Base):\n"}, {"code": "E303", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 19, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "class ProjectCalendar(Base):\n"}, {"code": "D204", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 20, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 20, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\management.py", "line_number": 20, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The project calendar table is where we can keep track of the iterations, milestones or any other events\n    in the SUT development project.\n    \"\"\"\n"}], ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\__init__.py": [{"code": "D104", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "import db_reporting\n"}, {"code": "W292", "filename": ".\\flask_reporting\\flask_app\\db_reporting\\schemas\\__init__.py", "line_number": 9, "column_number": 44, "text": "no newline at end of file", "physical_line": "Base = db_reporting.decl.declarative_base()"}], ".\\flask_reporting\\flask_app\\utils\\config.py": [{"code": "D205", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe config module helps with handling configuration files and credentials.\nIt is possible to read configuration parameters from json, yaml or toml formats, but\nto be able to use those interchangeably, the structure must be the same.\ni.e. Use arrays/objects/scalars (of the same type) for the same configuration item in all different formats.\n\"\"\"\n"}, {"code": "F401", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 20, "column_number": 1, "text": "'logging' imported but unused", "physical_line": "import logging\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 21, "column_number": 1, "text": "Found commented out code", "physical_line": "#from utils.tafexcept import TafError\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 21, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#from utils.tafexcept import TafError\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 27, "column_number": 1, "text": "Found commented out code", "physical_line": "# \"getLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not. \"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 29, "column_number": 1, "text": "Found commented out code", "physical_line": "#logger = logging.getLogger('taf')\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 29, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#logger = logging.getLogger('taf')\n"}, {"code": "CCR001", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 35, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def read_config_file(conf_file_name=\"resources/conf/taf_config_list.json\", file_type=\"json\"):\n"}, {"code": "E302", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 35, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def read_config_file(conf_file_name=\"resources/conf/taf_config_list.json\", file_type=\"json\"):\n"}, {"code": "D205", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 36, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Read and parse a configuration file in JSON, TOML or YAML format.\n    :param conf_file_name: The path to a configuration file (yaml|json|toml) including the file name.\n    :type conf_file_name: str\n    :param file_type: The configuration file format; toml, yaml or json.\n    :type file_type: str\n    :return: If successful: the contents of the configuration file in a dictionary, or None if it failed.\n    :rtype: dict or None\n    \"\"\"\n"}, {"code": "SIM115", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 52, "column_number": 21, "text": "Use context handler for opening files", "physical_line": "        conf_file = open(conf_file_name, 'r')\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 54, "column_number": 9, "text": "print found.", "physical_line": "        print(\"IOError HAHO: \", ioe.strerror, \" - \", ioe.filename)\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 69, "column_number": 9, "text": "print found.", "physical_line": "        print(\"JSONDecodeError while parsing\", jse.msg, \" - \", jse.pos)\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 71, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unknown exception: \", exc.args)\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 78, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def read_env_var(var_name):\n"}, {"code": "F841", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 82, "column_number": 5, "text": "local variable 'ke' is assigned to but never used", "physical_line": "    except Exception as ke:\n"}, {"code": "F841", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 83, "column_number": 9, "text": "local variable 'taf_message' is assigned to but never used", "physical_line": "        taf_message = f\"The environment variable {var_name} is not defined.\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 84, "column_number": 1, "text": "Found commented out code", "physical_line": "        #logger.exception(f\"FROM red_env_var: {taf_message} : {ke.args} , {ke}\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 84, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #logger.exception(f\"FROM red_env_var: {taf_message} : {ke.args} , {ke}\")\n"}, {"code": "B016", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 85, "column_number": 9, "text": "Cannot raise a literal. Did you intend to return it or raise an Exception?", "physical_line": "        raise \"TafError\"\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 86, "column_number": 1, "text": "Found commented out code", "physical_line": "        #raise TafError()\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 86, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #raise TafError()\n"}, {"code": "CCR001", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 90, "column_number": 1, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "def merge_dicts(dict_left, dict_right):\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def merge_dicts(dict_left, dict_right):\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 97, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(\"Key: \", k, \" Value: \", v)\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 97, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(\"Key: \", k, \" Value: \", v)\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 99, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(\"So we do have \", k ,\" already\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 99, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(\"So we do have \", k ,\" already\")\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 100, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(k, \" in my_dict: \", merged[k], \" as a \", type(merged[k]))\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 100, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(k, \" in my_dict: \", merged[k], \" as a \", type(merged[k]))\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 101, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(k, \" in iterator: \", v, \" as a \", type(v))\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 101, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(k, \" in iterator: \", v, \" as a \", type(v))\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 103, "column_number": 1, "text": "Found commented out code", "physical_line": "                #print(\"And the values aren't the same\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 103, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #print(\"And the values aren't the same\")\n"}, {"code": "E225", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 105, "column_number": 30, "text": "missing whitespace around operator", "physical_line": "                    merged[k]=merge_dicts(merged[k], v)\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 110, "column_number": 1, "text": "Found commented out code", "physical_line": "                #print(\"New value in my_dict! \", merged)\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 110, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #print(\"New value in my_dict! \", merged)\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 113, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(\"New key in my_dict! \", merged)\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 113, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(\"New key in my_dict! \", merged)\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 114, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(merged)\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 114, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(merged)\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 118, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def merge_conf(global_conf, local_conf, keeper=\"local\"):\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 130, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unknown merge operation type: \", keeper )\n"}, {"code": "E202", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 130, "column_number": 55, "text": "whitespace before ')'", "physical_line": "        print(\"Unknown merge operation type: \", keeper )\n"}, {"code": "R504", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 131, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return conf\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 134, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_config_by_name(config_name=None):\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 143, "column_number": 9, "text": "print found.", "physical_line": "        print(taf_conf_dir)\n"}, {"code": "R503", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 143, "column_number": 9, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "        print(taf_conf_dir)\n"}, {"code": "T201", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 148, "column_number": 13, "text": "print found.", "physical_line": "            print(os.path.dirname(sys.executable))\n"}, {"code": "R503", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 148, "column_number": 13, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "            print(os.path.dirname(sys.executable))\n"}, {"code": "R503", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 154, "column_number": 9, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "        if config_name in config_list:\n"}, {"code": "D103", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 158, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init():\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 160, "column_number": 1, "text": "Found commented out code", "physical_line": "    #taf_root_path = read_env_var('FLASK_REPORT_ROOT')\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 160, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #taf_root_path = read_env_var('FLASK_REPORT_ROOT')\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 163, "column_number": 1, "text": "Found commented out code", "physical_line": "    #logger.info(f\"Reading list of available named configuration files\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 163, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #logger.info(f\"Reading list of available named configuration files\")\n"}, {"code": "B007", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 165, "column_number": 20, "text": "Loop control variable 'conf_details' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for conf_name, conf_details in conf_file_list.items():\n"}, {"code": "E800", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 166, "column_number": 1, "text": "Found commented out code", "physical_line": "        #logger.info(f\"Reading the {conf_name} configuration from {conf_file_list[conf_name]['path']}\")\n"}, {"code": "E265", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 166, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #logger.info(f\"Reading the {conf_name} configuration from {conf_file_list[conf_name]['path']}\")\n"}, {"code": "W391", "filename": ".\\flask_reporting\\flask_app\\utils\\config.py", "line_number": 171, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\gui\\__init__.py": [{"code": "D104", "filename": ".\\gui\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\gui\\parameditor\\paramtree.py": [{"code": "D100", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from PySide2.QtCore import QAbstractTableModel\n"}, {"code": "H601", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 5, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamTreeView(QTreeView):\n"}, {"code": "D101", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParamTreeView(QTreeView):\n"}, {"code": "D107", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "H601", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 10, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ParamTreeModel(QAbstractTableModel):\n"}, {"code": "D101", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ParamTreeModel(QAbstractTableModel):\n"}, {"code": "D107", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, data, parent=None):\n"}, {"code": "W391", "filename": ".\\gui\\parameditor\\paramtree.py", "line_number": 14, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\gui\\parameditor\\__init__.py": [{"code": "D104", "filename": ".\\gui\\parameditor\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\gui\\views\\__init__.py": [{"code": "D104", "filename": ".\\gui\\views\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\management\\release.py": [{"code": "D100", "filename": ".\\management\\release.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.ado_reporting.ado_taf_db_sync as atds\n"}, {"code": "F401", "filename": ".\\management\\release.py", "line_number": 1, "column_number": 1, "text": "'utils.ado_reporting.ado_taf_db_sync as atds' imported but unused", "physical_line": "import utils.ado_reporting.ado_taf_db_sync as atds\n"}, {"code": "CCR001", "filename": ".\\management\\release.py", "line_number": 11, "column_number": 1, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "def update_release_content():\n"}, {"code": "D205", "filename": ".\\management\\release.py", "line_number": 12, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The update_release_content() function makes sure that the backlogs are assigned to a specific release\n    of a specific iteration, and also removes the backlogs if they are moved to a separate iteration.\n\n    It is meant to help the test automation engineers to stay on top of expected and delivered features of the SUT.\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\management\\release.py", "line_number": 12, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The update_release_content() function makes sure that the backlogs are assigned to a specific release\n    of a specific iteration, and also removes the backlogs if they are moved to a separate iteration.\n\n    It is meant to help the test automation engineers to stay on top of expected and delivered features of the SUT.\n    :return:\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\management\\release.py", "line_number": 12, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The update_release_content() function makes sure that the backlogs are assigned to a specific release\n    of a specific iteration, and also removes the backlogs if they are moved to a separate iteration.\n\n    It is meant to help the test automation engineers to stay on top of expected and delivered features of the SUT.\n    :return:\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\management\\release.py", "line_number": 12, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The update_release_content() function makes sure that the backlogs are assigned to a specific release\n    of a specific iteration, and also removes the backlogs if they are moved to a separate iteration.\n\n    It is meant to help the test automation engineers to stay on top of expected and delivered features of the SUT.\n    :return:\n    \"\"\"\n"}, {"code": "E711", "filename": ".\\management\\release.py", "line_number": 22, "column_number": 103, "text": "comparison to None should be 'if cond is None:'", "physical_line": "    future_release: MGTReleaseBase = db_sesh.query(MGTReleaseBase).filter(MGTReleaseBase.release_date == None).one()\n"}, {"code": "B007", "filename": ".\\management\\release.py", "line_number": 30, "column_number": 9, "text": "Loop control variable 'bl_ext_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for bl_ext_id, bl in backlog_dict.items():\n"}], ".\\management\\__init__.py": [{"code": "D104", "filename": ".\\management\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\orchestrator\\dispatch.py": [{"code": "D100", "filename": ".\\orchestrator\\dispatch.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 2, "column_number": 1, "text": "'typing.List' imported but unused", "physical_line": "from typing import Iterable, List\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 6, "column_number": 1, "text": "'db.schemas.control.TestHost' imported but unused", "physical_line": "from db.schemas.control import TestHost, TestNode, TestSession, TestNodeAttribs, HwAccessory\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 6, "column_number": 1, "text": "'db.schemas.control.TestSession' imported but unused", "physical_line": "from db.schemas.control import TestHost, TestNode, TestSession, TestNodeAttribs, HwAccessory\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 10, "column_number": 1, "text": "'db.schemas.control.AUTReleaseBase' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 10, "column_number": 1, "text": "'db.schemas.control.AUTReleaseAdo' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F811", "filename": ".\\orchestrator\\dispatch.py", "line_number": 11, "column_number": 1, "text": "redefinition of unused 'new_session_factory' from line 7", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 11, "column_number": 1, "text": "'db.conn.new_session_factory' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "F401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 11, "column_number": 1, "text": "'db.conn.kill_session' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 43, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def goodbye():\n"}, {"code": "T201", "filename": ".\\orchestrator\\dispatch.py", "line_number": 44, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Exiting and shutting down DB session...\")\n"}, {"code": "E800", "filename": ".\\orchestrator\\dispatch.py", "line_number": 45, "column_number": 1, "text": "Found commented out code", "physical_line": "    # kill_session(session)\n"}, {"code": "T201", "filename": ".\\orchestrator\\dispatch.py", "line_number": 46, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Done, we hope.\")\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 66, "column_number": 9, "text": "undefined name 'session'", "physical_line": "    q = session.query(TestNode)\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 81, "column_number": 9, "text": "undefined name 'session'", "physical_line": "    q = session.query(TestNode, TestNodeAttribs). \\\n        join(TestNodeAttribs, TestNodeAttribs.udid == TestNode.udid)\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 97, "column_number": 9, "text": "undefined name 'session'", "physical_line": "    q = session.query(TestNode, TestNodeAttribs). \\\n        join(TestNodeAttribs, TestNodeAttribs.udid == TestNode.udid). \\\n        filter(TestNode.session_id == None)\n"}, {"code": "E711", "filename": ".\\orchestrator\\dispatch.py", "line_number": 99, "column_number": 36, "text": "comparison to None should be 'if cond is None:'", "physical_line": "    q = session.query(TestNode, TestNodeAttribs). \\\n        join(TestNodeAttribs, TestNodeAttribs.udid == TestNode.udid). \\\n        filter(TestNode.session_id == None)\n"}, {"code": "D205", "filename": ".\\orchestrator\\dispatch.py", "line_number": 106, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Finds the test nodes with given capabilities.\n    The list of desired capabilites is a tuple.\n    Parameters\n    ----------\n    capabilities: The list of desired capabilites is a tuple. Each attribute must be passed as an attribute\n    of the class representing the respective table. This solution is implicit, but it provides the most flexibility.\n\n    The find_node() function queries three joined tables: TestNode, TestNodeAttribs and HwAccessory. Any field\n    of these tables can be used in the list of desired capabilities.\n\n        Example:  capabilities = (TestNode.port == 80, TestNodeAttribs.device_type == 'BOARD')\n                  find_node(capabilities, True)\n\n    free_only: A boolean value to indicate if the function should return test nodes already in use by another session.\n\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 106, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Finds the test nodes with given capabilities.\n    The list of desired capabilites is a tuple.\n    Parameters\n    ----------\n    capabilities: The list of desired capabilites is a tuple. Each attribute must be passed as an attribute\n    of the class representing the respective table. This solution is implicit, but it provides the most flexibility.\n\n    The find_node() function queries three joined tables: TestNode, TestNodeAttribs and HwAccessory. Any field\n    of these tables can be used in the list of desired capabilities.\n\n        Example:  capabilities = (TestNode.port == 80, TestNodeAttribs.device_type == 'BOARD')\n                  find_node(capabilities, True)\n\n    free_only: A boolean value to indicate if the function should return test nodes already in use by another session.\n\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "D414", "filename": ".\\orchestrator\\dispatch.py", "line_number": 106, "column_number": 1, "text": "Section has no content", "physical_line": "    \"\"\"\n    Finds the test nodes with given capabilities.\n    The list of desired capabilites is a tuple.\n    Parameters\n    ----------\n    capabilities: The list of desired capabilites is a tuple. Each attribute must be passed as an attribute\n    of the class representing the respective table. This solution is implicit, but it provides the most flexibility.\n\n    The find_node() function queries three joined tables: TestNode, TestNodeAttribs and HwAccessory. Any field\n    of these tables can be used in the list of desired capabilities.\n\n        Example:  capabilities = (TestNode.port == 80, TestNodeAttribs.device_type == 'BOARD')\n                  find_node(capabilities, True)\n\n    free_only: A boolean value to indicate if the function should return test nodes already in use by another session.\n\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\orchestrator\\dispatch.py", "line_number": 134, "column_number": 9, "text": "local variable 'sesion_filter' is assigned to but never used", "physical_line": "        sesion_filter = '%'\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 135, "column_number": 9, "text": "undefined name 'session'", "physical_line": "    q = session.query(TestNode, TestNodeAttribs, HwAccessory). \\\n        join(TestNodeAttribs, TestNodeAttribs.udid == TestNode.udid). \\\n        outerjoin(HwAccessory, TestNode.udid == HwAccessory.connected_test_node). \\\n        filter(TestNode.session_id == session_filter, *capabilities)\n"}, {"code": "D205", "filename": ".\\orchestrator\\dispatch.py", "line_number": 147, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    NOT YET IMPLEMENTED!\n    This will require database changes to store the reserved timeslots, and the introduction\n    of a dummy session ID for reservations.\n\n    Reserve a test node for future use. Regular test runs can be executed on the same node for\n    continuity. Timeslots should be assigned to these runs, such as regression tests, and should be\n    prioritized over ad-hoc tests.\n\n    Parameters\n    ----------\n    udid: The test node's identifier.\n\n    Returns\n    -------\n    The process ID of the AUT (test node) on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\dispatch.py", "line_number": 147, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    NOT YET IMPLEMENTED!\n    This will require database changes to store the reserved timeslots, and the introduction\n    of a dummy session ID for reservations.\n\n    Reserve a test node for future use. Regular test runs can be executed on the same node for\n    continuity. Timeslots should be assigned to these runs, such as regression tests, and should be\n    prioritized over ad-hoc tests.\n\n    Parameters\n    ----------\n    udid: The test node's identifier.\n\n    Returns\n    -------\n    The process ID of the AUT (test node) on success, None on failure.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\orchestrator\\dispatch.py", "line_number": 166, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return pid\n"}, {"code": "D205", "filename": ".\\orchestrator\\dispatch.py", "line_number": 170, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    To avoid collisions during test execution, each node must be controlled by a single session at any\n    given time. The harness_node() function updates the database to assign a specific node to a specific session.\n\n    Parameters\n    ----------\n    udid: The test node's identifier.\n    session_id: The current sesssion's ID.\n\n    Returns\n    -------\n    The test node's PID on success, None on failure.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\dispatch.py", "line_number": 170, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    To avoid collisions during test execution, each node must be controlled by a single session at any\n    given time. The harness_node() function updates the database to assign a specific node to a specific session.\n\n    Parameters\n    ----------\n    udid: The test node's identifier.\n    session_id: The current sesssion's ID.\n\n    Returns\n    -------\n    The test node's PID on success, None on failure.\n    \"\"\"\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 185, "column_number": 17, "text": "undefined name 'session'", "physical_line": "    test_node = session.query(TestNode).filter(TestNode.udid == udid).first()\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 189, "column_number": 9, "text": "undefined name 'session'", "physical_line": "        session.commit()\n"}, {"code": "D205", "filename": ".\\orchestrator\\dispatch.py", "line_number": 198, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Once the test session is done with a test node, it should make it available for other sessions.\n    This function updates the database to indicate that a given node is not currently in use.\n    Parameters\n    ----------\n    udid: The test node's identifier.\n\n    Returns\n    -------\n    Currently no return value. If the update fails, that's on the database level, and an exception would be\n    thrown by SQLAlchemy\n    \"\"\"\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 211, "column_number": 17, "text": "undefined name 'session'", "physical_line": "    test_node = session.query(TestNode).filter(TestNode.udid == udid).first()\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 213, "column_number": 5, "text": "undefined name 'session'", "physical_line": "    session.commit()\n"}, {"code": "D400", "filename": ".\\orchestrator\\dispatch.py", "line_number": 218, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    NOT YET IMPLEMENTED!!!\n\n    Starts a given AUT or attaches to a running one and updates the database with the details.\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "D414", "filename": ".\\orchestrator\\dispatch.py", "line_number": 218, "column_number": 1, "text": "Section has no content", "physical_line": "    \"\"\"\n    NOT YET IMPLEMENTED!!!\n\n    Starts a given AUT or attaches to a running one and updates the database with the details.\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\dispatch.py", "line_number": 230, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The find_sut_releases() function returns a list of AUTReleaseView objects, each representing a build/release\n    of the SUT known to the TAF, filtered according to the search criteria passed as argument.\n    These releases can then be used to find test nodes where the tests can be executed.\n\n    Parameters\n    ----------\n    aut_filters : a dictionary where the keys are attribute names of AUTReleaseView and the values are search criteria.\n\n    Returns\n    -------\n    A list of AUTReleaseView objects matching the search criteria.\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\dispatch.py", "line_number": 230, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The find_sut_releases() function returns a list of AUTReleaseView objects, each representing a build/release\n    of the SUT known to the TAF, filtered according to the search criteria passed as argument.\n    These releases can then be used to find test nodes where the tests can be executed.\n\n    Parameters\n    ----------\n    aut_filters : a dictionary where the keys are attribute names of AUTReleaseView and the values are search criteria.\n\n    Returns\n    -------\n    A list of AUTReleaseView objects matching the search criteria.\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\dispatch.py", "line_number": 230, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The find_sut_releases() function returns a list of AUTReleaseView objects, each representing a build/release\n    of the SUT known to the TAF, filtered according to the search criteria passed as argument.\n    These releases can then be used to find test nodes where the tests can be executed.\n\n    Parameters\n    ----------\n    aut_filters : a dictionary where the keys are attribute names of AUTReleaseView and the values are search criteria.\n\n    Returns\n    -------\n    A list of AUTReleaseView objects matching the search criteria.\n\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\orchestrator\\dispatch.py", "line_number": 230, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The find_sut_releases() function returns a list of AUTReleaseView objects, each representing a build/release\n    of the SUT known to the TAF, filtered according to the search criteria passed as argument.\n    These releases can then be used to find test nodes where the tests can be executed.\n\n    Parameters\n    ----------\n    aut_filters : a dictionary where the keys are attribute names of AUTReleaseView and the values are search criteria.\n\n    Returns\n    -------\n    A list of AUTReleaseView objects matching the search criteria.\n\n    \"\"\"\n"}, {"code": "F821", "filename": ".\\orchestrator\\dispatch.py", "line_number": 245, "column_number": 9, "text": "undefined name 'db_sesh'", "physical_line": "    q = db_sesh.query(AUTReleaseView).filter(*actual_filters).all()\n"}, {"code": "T201", "filename": ".\\orchestrator\\dispatch.py", "line_number": 249, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Woohoo, poop: \", rel.aut_name, rel.aut_sha256_id, \" type: \", type(rel))\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 254, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_local_node(aut: AUT, aut_instance: AUTInstance, aut_version: str):\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 278, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_suites_in_set(set_name_id: str):\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 288, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_dispatch_map():\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 298, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_capability_list(releases: Iterable[AUTReleaseView]):\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 303, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_first_available_port(port_lower_bound=50000, port_upper_bound=60000):\n"}, {"code": "CFQ004", "filename": ".\\orchestrator\\dispatch.py", "line_number": 303, "column_number": 1, "text": "Function \"get_first_available_port\" has 5 returns that exceeds max allowed 3", "physical_line": "def get_first_available_port(port_lower_bound=50000, port_upper_bound=60000):\n"}, {"code": "T201", "filename": ".\\orchestrator\\dispatch.py", "line_number": 318, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"IDX: {idx}, port: {prt}\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 327, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_node_aut_instance(aut_id: int, aut_instance: int) -> TestNode:\n"}, {"code": "R506", "filename": ".\\orchestrator\\dispatch.py", "line_number": 332, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    if not test_node:\n"}, {"code": "D103", "filename": ".\\orchestrator\\dispatch.py", "line_number": 339, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}], ".\\orchestrator\\grpc_manager.py": [{"code": "D100", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import threading\n"}, {"code": "F401", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 7, "column_number": 1, "text": "'asyncio' imported but unused", "physical_line": "import asyncio\n"}, {"code": "D101", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class server_ctrl():\n"}, {"code": "E302", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 9, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class server_ctrl():\n"}, {"code": "D107", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D205", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 14, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        Starts the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 14, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Starts the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 14, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        Starts the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 23, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        Stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 23, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 23, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        Stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 31, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "    def set_serving_status(self,service_name):\n"}, {"code": "D205", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 32, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 32, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D414", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 32, "column_number": 1, "text": "Section has no content", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 42, "column_number": 56, "text": "missing whitespace after ','", "physical_line": "        self.server_obj.set_service_status(service_name,health_pb2.HealthCheckResponse.SERVING)\n"}, {"code": "E231", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 44, "column_number": 36, "text": "missing whitespace after ','", "physical_line": "    def set_not_serving_status(self,service_name):\n"}, {"code": "D205", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 45, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set NOT_SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 45, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set NOT_SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D414", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 45, "column_number": 1, "text": "Section has no content", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        service_name : \"\" for server, or service name has to be passed to set NOT_SERVING status\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "E305", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 57, "column_number": 1, "text": "expected 2 blank lines after class or function definition, found 1", "physical_line": "if __name__ == \"__main__\":\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 59, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #start server\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 61, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #set statos of TestExecution service to SERVING\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 63, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #check status of TestExecution service\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 65, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #check status of server\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 67, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #starts watch method in different thread\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 72, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #changes the status of server continuosly to test the watch method\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 79, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #changes the status of TestExecution service continuosly to test the watch method\n"}, {"code": "E265", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 88, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #stops the server\n"}, {"code": "W391", "filename": ".\\orchestrator\\grpc_manager.py", "line_number": 91, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\orchestrator\\run.py": [{"code": "D100", "filename": ".\\orchestrator\\run.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 4, "column_number": 1, "text": "'typing.Iterable' imported but unused", "physical_line": "from typing import Iterable, List\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 4, "column_number": 1, "text": "'typing.List' imported but unused", "physical_line": "from typing import Iterable, List\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 9, "column_number": 1, "text": "'commons.gui.general.elements.build_qt_object_map' imported but unused", "physical_line": "from commons.gui.general.elements import build_qt_object_map, get_gui_elements, init_gui_element_list\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 9, "column_number": 1, "text": "'commons.gui.general.elements.get_gui_elements' imported but unused", "physical_line": "from commons.gui.general.elements import build_qt_object_map, get_gui_elements, init_gui_element_list\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 10, "column_number": 1, "text": "'commons.gui.qt.interact.navigate_to_screen' imported but unused", "physical_line": "from commons.gui.qt.interact import init_qt_aut, navigate_to_screen\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 12, "column_number": 1, "text": "'db.schemas.control.TestHost' imported but unused", "physical_line": "from db.schemas.control import TestHost, TestNode, TestSession, TestNodeAttribs, HwAccessory\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 12, "column_number": 1, "text": "'db.schemas.control.TestNodeAttribs' imported but unused", "physical_line": "from db.schemas.control import TestHost, TestNode, TestSession, TestNodeAttribs, HwAccessory\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 12, "column_number": 1, "text": "'db.schemas.control.HwAccessory' imported but unused", "physical_line": "from db.schemas.control import TestHost, TestNode, TestSession, TestNodeAttribs, HwAccessory\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 13, "column_number": 1, "text": "'db.schemas.control.AUT' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 13, "column_number": 1, "text": "'db.schemas.control.AUTInstance' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 13, "column_number": 1, "text": "'db.schemas.control.AUTReleaseBase' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 13, "column_number": 1, "text": "'db.schemas.control.AUTReleaseAdo' imported but unused", "physical_line": "from db.schemas.control import AUT, AUTInstance, AUTReleaseBase, AUTReleaseAdo, AUTReleaseView\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 14, "column_number": 1, "text": "'db.conn.new_session_factory' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 14, "column_number": 1, "text": "'db.conn.kill_session' imported but unused", "physical_line": "from db.conn import new_session_factory, kill_session\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 16, "column_number": 1, "text": "'db.schemas.reference.SutGUIElement' imported but unused", "physical_line": "from db.schemas.reference import SutEvent, SutGUIElement, SutGenericElement\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 17, "column_number": 1, "text": "'commons.context.get_context' imported but unused", "physical_line": "from commons.context import get_active_vp, get_context, active_vp, set_active_vp, update_context, TestRunContext, \\\n    inc_ctx_seq, get_ctx_seq\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 17, "column_number": 1, "text": "'commons.context.active_vp' imported but unused", "physical_line": "from commons.context import get_active_vp, get_context, active_vp, set_active_vp, update_context, TestRunContext, \\\n    inc_ctx_seq, get_ctx_seq\n"}, {"code": "F401", "filename": ".\\orchestrator\\run.py", "line_number": 19, "column_number": 1, "text": "'db.dbutils.filter_builder' imported but unused", "physical_line": "from db.dbutils import filter_builder\n"}, {"code": "E302", "filename": ".\\orchestrator\\run.py", "line_number": 53, "column_number": 1, "text": "expected 2 blank lines, found 0", "physical_line": "@atexit.register\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 54, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def goodbye():\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 55, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Exiting and shutting down DB db_sesh...\")\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 56, "column_number": 1, "text": "Found commented out code", "physical_line": "    # kill_session(db_sesh)\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 57, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Done, we hope.\")\n"}, {"code": "H601", "filename": ".\\orchestrator\\run.py", "line_number": 68, "column_number": 1, "text": "class has low (33.33%) cohesion", "physical_line": "class TAFVerificationPoint:\n"}, {"code": "D101", "filename": ".\\orchestrator\\run.py", "line_number": 68, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TAFVerificationPoint:\n"}, {"code": "E302", "filename": ".\\orchestrator\\run.py", "line_number": 68, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class TAFVerificationPoint:\n"}, {"code": "D107", "filename": ".\\orchestrator\\run.py", "line_number": 70, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D102", "filename": ".\\orchestrator\\run.py", "line_number": 98, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def entry_ctx_dict(self):\n"}, {"code": "R504", "filename": ".\\orchestrator\\run.py", "line_number": 102, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return ctx_dict\n"}, {"code": "D105", "filename": ".\\orchestrator\\run.py", "line_number": 104, "column_number": 1, "text": "Missing docstring in magic method", "physical_line": "    def __repr__(self):\n"}, {"code": "R504", "filename": ".\\orchestrator\\run.py", "line_number": 106, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return somedict\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 109, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_context(required_ctx=None):\n"}, {"code": "R504", "filename": ".\\orchestrator\\run.py", "line_number": 112, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return go_ahead\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 115, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_context_definition(entry_ctx_id):\n"}, {"code": "R504", "filename": ".\\orchestrator\\run.py", "line_number": 117, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return context_dictionary\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 120, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_vp_entry_conditions(vp_map, vp=None):\n"}, {"code": "CFQ004", "filename": ".\\orchestrator\\run.py", "line_number": 120, "column_number": 1, "text": "Function \"check_vp_entry_conditions\" has 4 returns that exceeds max allowed 3", "physical_line": "def check_vp_entry_conditions(vp_map, vp=None):\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 124, "column_number": 9, "text": "print found.", "physical_line": "        print(\"VP was none, so we got the current one: \", vp.vp_instance_id)\n"}, {"code": "R505", "filename": ".\\orchestrator\\run.py", "line_number": 127, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if vp_map.check_entry_conditions == \"NONE\":\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\run.py", "line_number": 144, "column_number": 1, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "def collect_event_params(vp_instance):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def collect_event_params(vp_instance):\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 150, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Event details: \", vp_event.event_function_handle, \" the \", vp_event.event_object_name)\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 185, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(f\"The event_function_params_py is a {type(event_function_params_py)}\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 186, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The PY !!!!!!! event details are: \", event_function_arguments_py)\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 191, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_gui_element_blocked(vp_event, vp_instance_arguments):\n"}, {"code": "R505", "filename": ".\\orchestrator\\run.py", "line_number": 200, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if gui_element.missing_in_ctx == get_ctx_seq():\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\run.py", "line_number": 207, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def trigger_vp_event(vp_map, vp_instance=None):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 207, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def trigger_vp_event(vp_map, vp_instance=None):\n"}, {"code": "E302", "filename": ".\\orchestrator\\run.py", "line_number": 207, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def trigger_vp_event(vp_map, vp_instance=None):\n"}, {"code": "E261", "filename": ".\\orchestrator\\run.py", "line_number": 208, "column_number": 21, "text": "at least two spaces before inline comment", "physical_line": "    vp_return = None # So far only the 'Observe' event returns any value, but that may change\n"}, {"code": "R505", "filename": ".\\orchestrator\\run.py", "line_number": 259, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    elif vp_map.use_event == \"NONE\":\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 268, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_vp_exit_conditions(vp_map, vp=None):\n"}, {"code": "CFQ004", "filename": ".\\orchestrator\\run.py", "line_number": 268, "column_number": 1, "text": "Function \"check_vp_exit_conditions\" has 4 returns that exceeds max allowed 3", "physical_line": "def check_vp_exit_conditions(vp_map, vp=None):\n"}, {"code": "R505", "filename": ".\\orchestrator\\run.py", "line_number": 273, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if vp_map.run_verification == \"NONE\":\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\run.py", "line_number": 285, "column_number": 1, "text": "Cognitive complexity is too high (27 > 7)", "physical_line": "def run_vp_instance(vp_map):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 285, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def run_vp_instance(vp_map):\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 293, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"\\t\\t\\tRunning VP {vp_instance.vp_id} Instance: {vp_instance.vp_instance_id}\")\n"}, {"code": "E128", "filename": ".\\orchestrator\\run.py", "line_number": 326, "column_number": 31, "text": "continuation line under-indented for visual indent", "physical_line": "                              f\"for the {te.event.event_object_name} {te.event.event_object_type} object\"\n"}, {"code": "E128", "filename": ".\\orchestrator\\run.py", "line_number": 327, "column_number": 31, "text": "continuation line under-indented for visual indent", "physical_line": "                              f\" in VP {vp_instance.vp_id} instance {vp_instance.vp_instance_id}\")\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 329, "column_number": 1, "text": "Found commented out code", "physical_line": "                #test_logger.error(f\"{te.error_code} - {te.message}\")\n"}, {"code": "E265", "filename": ".\\orchestrator\\run.py", "line_number": 329, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #test_logger.error(f\"{te.error_code} - {te.message}\")\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 331, "column_number": 1, "text": "Found commented out code", "physical_line": "                #vp_result.test_result = 'ERROR'\n"}, {"code": "E265", "filename": ".\\orchestrator\\run.py", "line_number": 331, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #vp_result.test_result = 'ERROR'\n"}, {"code": "B012", "filename": ".\\orchestrator\\run.py", "line_number": 352, "column_number": 17, "text": "return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.", "physical_line": "                return vp_result\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 360, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def run_test_step(test_step_id, test_step_version, test_step_order, test_session_id, test_run_id):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 391, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def run_test_case(test_case_id, test_case_version, test_case_order, test_session_id, test_run_id):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 404, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def run_test_suite(test_suite_id, test_suite_version, test_session_id, test_run_id):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 418, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def log_run_item(session_id, run_id, test_item_id, test_item_type, test_item_version):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 431, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def start_aut(aut_instance, **sut_options):\n"}, {"code": "R505", "filename": ".\\orchestrator\\run.py", "line_number": 432, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if aut_instance.aut_main.aut_type == \"Qt\":\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 443, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_aut(aut_instance):\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 452, "column_number": 1, "text": "Found commented out code", "physical_line": "        # get_gui_elements(aut_instance.aut_id, aut_instance.aut_version)\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 453, "column_number": 1, "text": "Found commented out code", "physical_line": "        # build_qt_object_map(aut_instance.aut_id, aut_instance.aut_version)\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 455, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"GUI ELEMENT LIST in run.py {this.gui_element_list}\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 458, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_test_session(test_session_id=None):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 474, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_test_run(test_session_id, node_udid):\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\run.py", "line_number": 493, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def main(test_node: TestNode, test_set: list):\n"}, {"code": "D103", "filename": ".\\orchestrator\\run.py", "line_number": 493, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def main(test_node: TestNode, test_set: list):\n"}, {"code": "E303", "filename": ".\\orchestrator\\run.py", "line_number": 529, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "if __name__ == '__main__':\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 532, "column_number": 1, "text": "Found commented out code", "physical_line": "    #aut_name = 'ti_terminal_10045_PyCharm'\n"}, {"code": "E265", "filename": ".\\orchestrator\\run.py", "line_number": 532, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #aut_name = 'ti_terminal_10045_PyCharm'\n"}, {"code": "E261", "filename": ".\\orchestrator\\run.py", "line_number": 539, "column_number": 37, "text": "at least two spaces before inline comment", "physical_line": "    node_udid = 'Terminal.Sim.10045' # Should be getting from dispatch\n"}, {"code": "E800", "filename": ".\\orchestrator\\run.py", "line_number": 544, "column_number": 1, "text": "Found commented out code", "physical_line": "    # aut_instance = session.query(AUT).join(AUTInstance, AUT.aut_id == AUTInstance.aut_id).first()\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 549, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\n\\tGUI Element list: \", this.gui_element_list, \"\\n\\n\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\run.py", "line_number": 555, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor connect response error: \", sens_connected.error)\n"}], ".\\orchestrator\\vp.py": [{"code": "D205", "filename": ".\\orchestrator\\vp.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe VP module is where the verification points are defined as functions.\nIt is using a dynamic\n\"\"\"\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def clean_mnemonic(function_name):\n"}, {"code": "SIM101", "filename": ".\\orchestrator\\vp.py", "line_number": 22, "column_number": 10, "text": "Multiple isinstance-calls which can be merged into a single call for variable 'function_name'", "physical_line": "    elif isinstance(function_name, dict) or isinstance(function_name, list):\n"}, {"code": "R504", "filename": ".\\orchestrator\\vp.py", "line_number": 26, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return clean_name\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_vp_func(function_name=None):\n"}, {"code": "T201", "filename": ".\\orchestrator\\vp.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Type error happened: \", te)\n"}, {"code": "T201", "filename": ".\\orchestrator\\vp.py", "line_number": 41, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Key error occurred \", ke)\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def run_vp_func(function_name):\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def vp_screen_title(expected_title=None):\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tmp_vp_got_to_burette_screen():\n"}, {"code": "T201", "filename": ".\\orchestrator\\vp.py", "line_number": 54, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Going to OP burette screen\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 58, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tmp_vp_got_to_setup_burette_screen():\n"}, {"code": "T201", "filename": ".\\orchestrator\\vp.py", "line_number": 59, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Going to setup burette screen\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\vp.py", "line_number": 63, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def tmp_vp_new_button():\n"}, {"code": "E305", "filename": ".\\orchestrator\\vp.py", "line_number": 70, "column_number": 1, "text": "expected 2 blank lines after class or function definition, found 1", "physical_line": "vp_func_map = {\n"}], ".\\orchestrator\\watcher.py": [{"code": "D100", "filename": ".\\orchestrator\\watcher.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import hashlib\n"}, {"code": "F401", "filename": ".\\orchestrator\\watcher.py", "line_number": 5, "column_number": 1, "text": "'db.aut.aut_release_exists' imported but unused", "physical_line": "from db.aut import aut_release_exists\n"}, {"code": "D103", "filename": ".\\orchestrator\\watcher.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def unzip_release(zip_file_path, out_dir):\n"}, {"code": "E800", "filename": ".\\orchestrator\\watcher.py", "line_number": 15, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(\"File list getnames: \", z.getnames())\n"}, {"code": "E265", "filename": ".\\orchestrator\\watcher.py", "line_number": 15, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(\"File list getnames: \", z.getnames())\n"}, {"code": "T201", "filename": ".\\orchestrator\\watcher.py", "line_number": 18, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Permission error\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\watcher.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_file_type(file_path):\n"}, {"code": "CFQ004", "filename": ".\\orchestrator\\watcher.py", "line_number": 22, "column_number": 1, "text": "Function \"check_file_type\" has 4 returns that exceeds max allowed 3", "physical_line": "def check_file_type(file_path):\n"}, {"code": "T201", "filename": ".\\orchestrator\\watcher.py", "line_number": 25, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's an exe file\")\n"}, {"code": "SIM115", "filename": ".\\orchestrator\\watcher.py", "line_number": 27, "column_number": 13, "text": "Use context handler for opening files", "physical_line": "        f = open(file_path, \"rb\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\watcher.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's a 7Zip file EXTENSION : \", file_path)\n"}, {"code": "R505", "filename": ".\\orchestrator\\watcher.py", "line_number": 39, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if py7zr.is_7zfile(file_path):\n"}, {"code": "T201", "filename": ".\\orchestrator\\watcher.py", "line_number": 40, "column_number": 13, "text": "print found.", "physical_line": "            print(\"It's a 7Zip file\")\n"}, {"code": "D103", "filename": ".\\orchestrator\\watcher.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sha256(file_path):\n"}, {"code": "SIM115", "filename": ".\\orchestrator\\watcher.py", "line_number": 54, "column_number": 13, "text": "Use context handler for opening files", "physical_line": "        f = open(file_path, \"rb\")\n"}, {"code": "R504", "filename": ".\\orchestrator\\watcher.py", "line_number": 57, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return readable_hash\n"}, {"code": "D103", "filename": ".\\orchestrator\\watcher.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_release_name(release_name):\n"}, {"code": "W605", "filename": ".\\orchestrator\\watcher.py", "line_number": 64, "column_number": 49, "text": "invalid escape sequence '\\.'", "physical_line": "    version_pattern = re.compile('^(?:[0-9]{1,2}\\.){3}[0-9]{1,2}$')\n"}, {"code": "E800", "filename": ".\\orchestrator\\watcher.py", "line_number": 68, "column_number": 1, "text": "Found commented out code", "physical_line": "        # release_info['version'] = release_info['version'][0:release_info['version'].rfind('.')]\n"}, {"code": "E800", "filename": ".\\orchestrator\\watcher.py", "line_number": 74, "column_number": 1, "text": "Found commented out code", "physical_line": "        # release_info['version'] = release_name[len(release_info['aut_name']) + 1:release_name.rfind('.')]\n"}, {"code": "R504", "filename": ".\\orchestrator\\watcher.py", "line_number": 84, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return release_info\n"}], ".\\orchestrator\\__init__.py": [{"code": "D104", "filename": ".\\orchestrator\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "\n"}, {"code": "E800", "filename": ".\\orchestrator\\__init__.py", "line_number": 2, "column_number": 1, "text": "Found commented out code", "physical_line": "#import utils.log as log\n"}, {"code": "E265", "filename": ".\\orchestrator\\__init__.py", "line_number": 2, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#import utils.log as log\n"}, {"code": "E800", "filename": ".\\orchestrator\\__init__.py", "line_number": 13, "column_number": 1, "text": "Found commented out code", "physical_line": "#log.set_log_config(log.read_log_config(os.path.join(config_path, \"taf_logging_conf_main.yaml\")))\n"}, {"code": "E265", "filename": ".\\orchestrator\\__init__.py", "line_number": 13, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#log.set_log_config(log.read_log_config(os.path.join(config_path, \"taf_logging_conf_main.yaml\")))\n"}, {"code": "D103", "filename": ".\\orchestrator\\__init__.py", "line_number": 18, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def next_free_port(lower_boundary=100):\n"}, {"code": "R504", "filename": ".\\orchestrator\\__init__.py", "line_number": 26, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return next_port\n"}], ".\\orchestrator\\client\\grpc_connection.py": [{"code": "D100", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 2, "column_number": 1, "text": "'asyncio' imported but unused", "physical_line": "import asyncio\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 3, "column_number": 1, "text": "'enum' imported but unused", "physical_line": "import enum\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 6, "column_number": 1, "text": "'grpc_health.v1.health' imported but unused", "physical_line": "from grpc_health.v1 import health\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 7, "column_number": 1, "text": "'grpc_health.v1.health_pb2' imported but unused", "physical_line": "from grpc_health.v1 import health_pb2\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 8, "column_number": 1, "text": "'grpc_health.v1.health_pb2_grpc' imported but unused", "physical_line": "from grpc_health.v1 import health_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 9, "column_number": 1, "text": "'orchestrator.protos.gen.messages.test_exec_message_pb2_grpc' imported but unused", "physical_line": "from orchestrator.protos.gen.messages import test_exec_message_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 10, "column_number": 1, "text": "'orchestrator.protos.gen.messages.test_exec_message_pb2' imported but unused", "physical_line": "from orchestrator.protos.gen.messages import test_exec_message_pb2\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 11, "column_number": 1, "text": "'orchestrator.protos.gen.services.test_exec_service_pb2_grpc' imported but unused", "physical_line": "from orchestrator.protos.gen.services import test_exec_service_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 12, "column_number": 1, "text": "'orchestrator.protos.gen.services.test_exec_service_pb2' imported but unused", "physical_line": "from orchestrator.protos.gen.services import test_exec_service_pb2\n"}, {"code": "SIM120", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 35, "column_number": 1, "text": "Use 'class GrpcConnection:' instead of 'class GrpcConnection(object):'", "physical_line": "class GrpcConnection(object):\n"}, {"code": "D200", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 36, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Singleton class for creating channel to communicate with server\n    \"\"\"\n"}, {"code": "D204", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 36, "column_number": 1, "text": "1 blank line required after class docstring", "physical_line": "    \"\"\"\n    Singleton class for creating channel to communicate with server\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 36, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Singleton class for creating channel to communicate with server\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 40, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        Parameters\n        ----------\n        ip_address : ip address to get connected with grpc server\n        port : port number of grpc\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 40, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Parameters\n        ----------\n        ip_address : ip address to get connected with grpc server\n        port : port number of grpc\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 53, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        calls the create_channel function\n        Returns : returns the channel created against the server\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 53, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        calls the create_channel function\n        Returns : returns the channel created against the server\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 53, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        calls the create_channel function\n        Returns : returns the channel created against the server\n        -------\n\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 53, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        calls the create_channel function\n        Returns : returns the channel created against the server\n        -------\n\n        \"\"\"\n"}, {"code": "D200", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 63, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "        \"\"\"\n        Creates channel with the server, and assign value to channel and connected state\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 63, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Creates channel with the server, and assign value to channel and connected state\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 63, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        Creates channel with the server, and assign value to channel and connected state\n\n        \"\"\"\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 75, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Exception in creating Grpc Channel - \" + str(e))\n"}, {"code": "E303", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 78, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    def disconnect_channel(self):\n"}, {"code": "D200", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 79, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "        \"\"\"\n        closes the channel created.\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 79, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        closes the channel created.\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 79, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        closes the channel created.\n        \"\"\"\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\grpc_connection.py", "line_number": 86, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Exception in disconnect channel - \" + str(e))\n"}], ".\\orchestrator\\client\\grpc_service_binding.py": [{"code": "D100", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from orchestrator.client.grpc_connection import GrpcConnection\n"}, {"code": "D103", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def invoke_grpc_api(method_to_invoke, input_request):\n"}, {"code": "R504", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 7, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return response\n"}, {"code": "D103", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def invoke_unary_stream_grpc_api(method_to_invoke, input_request):\n"}, {"code": "E302", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 9, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def invoke_unary_stream_grpc_api(method_to_invoke, input_request):\n"}, {"code": "SIM104", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 10, "column_number": 5, "text": "Use 'yield from method_to_invoke(input_request)'", "physical_line": "    for response in method_to_invoke(input_request):\n"}, {"code": "E303", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 15, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "@singleton\n"}, {"code": "D101", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestExecution(object):\n"}, {"code": "SIM120", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 16, "column_number": 1, "text": "Use 'class TestExecution:' instead of 'class TestExecution(object):'", "physical_line": "class TestExecution(object):\n"}, {"code": "D107", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "E302", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 21, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "@singleton\n"}, {"code": "D101", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class healthCheck(object):\n"}, {"code": "SIM120", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 22, "column_number": 1, "text": "Use 'class healthCheck:' instead of 'class healthCheck(object):'", "physical_line": "class healthCheck(object):\n"}, {"code": "D107", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "W292", "filename": ".\\orchestrator\\client\\grpc_service_binding.py", "line_number": 25, "column_number": 82, "text": "no newline at end of file", "physical_line": "        self.instance = health_pb2_grpc.HealthStub(GrpcConnection().grpc_channel)"}], ".\\orchestrator\\client\\test_exec_client.py": [{"code": "D100", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from orchestrator.client.grpc_connection import GrpcConnection\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 1, "column_number": 1, "text": "'orchestrator.client.grpc_connection.GrpcConnection' imported but unused", "physical_line": "from orchestrator.client.grpc_connection import GrpcConnection\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 4, "column_number": 1, "text": "'orchestrator.protos.gen.services.test_exec_service_pb2_grpc' imported but unused", "physical_line": "from orchestrator.protos.gen.services import test_exec_service_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 6, "column_number": 1, "text": "'grpc_health.v1.health_pb2_grpc' imported but unused", "physical_line": "from grpc_health.v1 import health_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 7, "column_number": 1, "text": "'grpc_health.v1.health' imported but unused", "physical_line": "from grpc_health.v1 import health\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 8, "column_number": 1, "text": "'time' imported but unused", "physical_line": "import time\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 9, "column_number": 1, "text": "'threading' imported but unused", "physical_line": "import threading\n"}, {"code": "F401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 10, "column_number": 1, "text": "'orchestrator.server.test_exec_server' imported but unused", "physical_line": "from orchestrator.server import test_exec_server\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 14, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def start_test_execution():\n"}, {"code": "E302", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 14, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def start_test_execution():\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 15, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the StartTestExecution rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 15, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the StartTestExecution rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 15, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the StartTestExecution rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 15, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the StartTestExecution rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 19, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #forming test_request_data\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 25, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #creating stub\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 27, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #calling StartTestExecution rpc\n"}, {"code": "E231", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 28, "column_number": 89, "text": "missing whitespace after ','", "physical_line": "    response = grpc_service_binding.invoke_unary_stream_grpc_api(stub.StartTestExecution,test_request_data)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 32, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Test Session ID received\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 33, "column_number": 13, "text": "print found.", "physical_line": "            print(val.test_session_id)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 35, "column_number": 9, "text": "print found.", "physical_line": "        print(test_exec_message_pb2.TestResponse.State.Name(val.state))\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 37, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Error occured during execution\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 38, "column_number": 13, "text": "print found.", "physical_line": "            print(val.err_msg)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 40, "column_number": 13, "text": "print found.", "physical_line": "            print(test_exec_message_pb2.TestResponse.Result.Name(val.result))\n"}, {"code": "E303", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 44, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def generate_test_report():\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 45, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 45, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 45, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 45, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 49, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #forming test report request\n"}, {"code": "E800", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 52, "column_number": 1, "text": "Found commented out code", "physical_line": "    #test_report_request.test_session_id = \"846b4798-2a60-11ec-8855-c025a5d95fde\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 52, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #test_report_request.test_session_id = \"846b4798-2a60-11ec-8855-c025a5d95fde\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 55, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #creating stub\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 57, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #calling generatetestreport rpc\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 59, "column_number": 5, "text": "print found.", "physical_line": "    print(response)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 61, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unable to get the report generated from server\")\n"}, {"code": "F811", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 63, "column_number": 1, "text": "redefinition of unused 'generate_test_report' from line 44", "physical_line": "def generate_test_report():\n"}, {"code": "E302", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 63, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def generate_test_report():\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 64, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 64, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 64, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 64, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "    \"\"\"\n    calls the GrpcConnection class to get channel data, and creates the stub object\n    Calls the GenerateTestReport rpc of the  TestExecution service of the grpc server\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 68, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #forming test report request\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 73, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #creating stub\n"}, {"code": "E265", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 75, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #calling generatetestreport rpc\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 77, "column_number": 5, "text": "print found.", "physical_line": "    print(response)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 79, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unable to get the report generated from server\")\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 82, "column_number": 22, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def Check(serviceName = \"\"):\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 82, "column_number": 24, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def Check(serviceName = \"\"):\n"}, {"code": "D202", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 83, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    serviceName : Name of the service to check the status, by default it is \"\" which will check the status of server,\n                  if service name is passed status of service will be checked\n\n    Returns :\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 83, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    serviceName : Name of the service to check the status, by default it is \"\" which will check the status of server,\n                  if service name is passed status of service will be checked\n\n    Returns :\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 83, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    serviceName : Name of the service to check the status, by default it is \"\" which will check the status of server,\n                  if service name is passed status of service will be checked\n\n    Returns :\n    -------\n\n    \"\"\"\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 95, "column_number": 59, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "    health_request = health_pb2.HealthCheckRequest(service = serviceName)\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 95, "column_number": 61, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "    health_request = health_pb2.HealthCheckRequest(service = serviceName)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 98, "column_number": 5, "text": "print found.", "physical_line": "    print(health_response)\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 101, "column_number": 22, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def Watch(serviceName = \"\"):\n"}, {"code": "E251", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 101, "column_number": 24, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def Watch(serviceName = \"\"):\n"}, {"code": "D205", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 102, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    serviceName : Name of the service to continuously watch the status, by default it is \"\" which will check the status of server,\n                  if service name is passed then status of service will be checked.\n                  Note : stub.watch loop will return value immediately for the first time,\n                        and after that value will be returned only if changes in the status, so be careful it will get\n                        stuck in for loop\n                  how to test : introduces status setting in some rpc in server side  and call the rpc\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 102, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    serviceName : Name of the service to continuously watch the status, by default it is \"\" which will check the status of server,\n                  if service name is passed then status of service will be checked.\n                  Note : stub.watch loop will return value immediately for the first time,\n                        and after that value will be returned only if changes in the status, so be careful it will get\n                        stuck in for loop\n                  how to test : introduces status setting in some rpc in server side  and call the rpc\n    Returns\n    -------\n\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 121, "column_number": 13, "text": "print found.", "physical_line": "            print(hlt)\n"}, {"code": "T201", "filename": ".\\orchestrator\\client\\test_exec_client.py", "line_number": 123, "column_number": 9, "text": "print found.", "physical_line": "        print(e)\n"}], ".\\orchestrator\\client\\__init__.py": [{"code": "D104", "filename": ".\\orchestrator\\client\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\orchestrator\\ctrl\\squish.py": [{"code": "D205", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe squishcl.ops module facilitates operations around Squish and the AUT.\nUsing the squishtest and squish Python modules from external scripts requires some extra steps\nwhich are documented on https://kb.froglogic.com/squish/howto/using-squish-module-python-scripts-applications\n\"\"\"\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 22, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def start_local_server(server_exe=None, server_port=None):\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def start_local_server(server_exe=None, server_port=None):\n"}, {"code": "E302", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 22, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def start_local_server(server_exe=None, server_port=None):\n"}, {"code": "F841", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 31, "column_number": 5, "text": "local variable 'new_server_pid' is assigned to but never used", "physical_line": "    new_server_pid = None\n"}, {"code": "R505", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 41, "column_number": 13, "text": "unnecessary else after return statement.", "physical_line": "            if running_servers[server_port].returncode is None:\n"}, {"code": "W504", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 45, "column_number": 87, "text": "line break after binary operator", "physical_line": "                logging.warning(\"The server instance assigned to port \" + server_port +\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 79, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def stop_local_server(pid):\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 91, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def read_server_config():\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def read_server_config():\n"}, {"code": "SIM118", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 107, "column_number": 16, "text": "Use 'sub_key in aut_map' instead of 'sub_key in aut_map.keys()'", "physical_line": "            if sub_key in aut_map.keys():\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def register_aut():\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 123, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def start_local_aut(aut_name=None, server_port=4322, wrapper=\"Qt\", timeout_sec=20, cl_options=None):\n"}, {"code": "W503", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 132, "column_number": 27, "text": "line break before binary operator", "physical_line": "                          + \"' on port \" + str(server_port))\n"}, {"code": "D103", "filename": ".\\orchestrator\\ctrl\\squish.py", "line_number": 141, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def attach_to_aut(aut_name=None, server_host='localhost', server_port=4322, timeout_sec=20):\n"}], ".\\orchestrator\\server\\test_execution.py": [{"code": "D100", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import random\n"}, {"code": "F401", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 1, "column_number": 1, "text": "'random' imported but unused", "physical_line": "import random\n"}, {"code": "H601", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 5, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class Result():\n"}, {"code": "D101", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class Result():\n"}, {"code": "H601", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 10, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class State():\n"}, {"code": "D101", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class State():\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 16, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#Commening out old implementation\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 41, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    test_request_data : test request having test_suite or test_set, config file name and time_out\n\n    Returns : test_Session_id if test starts successfully\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 41, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    test_request_data : test request having test_suite or test_set, config file name and time_out\n\n    Returns : test_Session_id if test starts successfully\n    -------\n\n    \"\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 66, "column_number": 54, "text": "missing whitespace after ','", "physical_line": "def generate_report(test_id, test_type, report_format,latest = False):\n"}, {"code": "E251", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 66, "column_number": 61, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def generate_report(test_id, test_type, report_format,latest = False):\n"}, {"code": "E251", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 66, "column_number": 63, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "def generate_report(test_id, test_type, report_format,latest = False):\n"}, {"code": "D202", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 67, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    test_id : id of the test session\n    test_type : type of the test either ci or rel\n    report_format : format of the report -> HTML, nUnit_XML, jUnit_XML\n    latest : bool based on latest test or random test report, by default it is set to pick random session\n            based on test_session_id\n    Returns : generated test report path if test session is found, and test session found status\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 67, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    test_id : id of the test session\n    test_type : type of the test either ci or rel\n    report_format : format of the report -> HTML, nUnit_XML, jUnit_XML\n    latest : bool based on latest test or random test report, by default it is set to pick random session\n            based on test_session_id\n    Returns : generated test report path if test session is found, and test session found status\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 67, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    test_id : id of the test session\n    test_type : type of the test either ci or rel\n    report_format : format of the report -> HTML, nUnit_XML, jUnit_XML\n    latest : bool based on latest test or random test report, by default it is set to pick random session\n            based on test_session_id\n    Returns : generated test report path if test session is found, and test session found status\n    -------\n\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 95, "column_number": 5, "text": "print found.", "physical_line": "    print(report_path)\n"}, {"code": "W391", "filename": ".\\orchestrator\\server\\test_execution.py", "line_number": 99, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\orchestrator\\server\\test_exec_server.py": [{"code": "D100", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import asyncio\n"}, {"code": "F401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 1, "column_number": 1, "text": "'asyncio' imported but unused", "physical_line": "import asyncio\n"}, {"code": "F401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 7, "column_number": 1, "text": "'orchestrator.protos.gen.messages.test_exec_message_pb2_grpc' imported but unused", "physical_line": "from orchestrator.protos.gen.messages import test_exec_message_pb2_grpc\n"}, {"code": "F401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 10, "column_number": 1, "text": "'orchestrator.protos.gen.services.test_exec_service_pb2' imported but unused", "physical_line": "from orchestrator.protos.gen.services import test_exec_service_pb2\n"}, {"code": "H601", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 17, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class testexecutionservicer(test_exec_service_pb2_grpc.TestExecutionServicer):\n"}, {"code": "D211", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "No blank lines allowed before class docstring", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "D208", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "D209", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "Multi-line docstring closing quotes should be on a separate line", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "D300", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 1, "text": "First line should end with a period", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "E303", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 20, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    '''def __init__(self, health):\n        super().__init__()\n        self.health = health'''\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 24, "column_number": 37, "text": "missing whitespace after ','", "physical_line": "    def check_test_availability(self,test_request_data):\n"}, {"code": "D202", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 25, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if test case is available in either test_suite or test_set, else false\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 25, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if test case is available in either test_suite or test_set, else false\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 25, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if test case is available in either test_suite or test_set, else false\n        -------\n\n        \"\"\"\n"}, {"code": "R505", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 37, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if test_request_data.test_set or test_request_data.test_suite:\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 38, "column_number": 24, "text": "missing whitespace after ','", "physical_line": "            return True,\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 42, "column_number": 29, "text": "missing whitespace after ','", "physical_line": "    def check_conf_file(self,test_request_data):\n"}, {"code": "D202", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 43, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if file with conf_name exists, else false\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 43, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if file with conf_name exists, else false\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 43, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : True if file with conf_name exists, else false\n        -------\n\n        \"\"\"\n"}, {"code": "R505", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 56, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if os.path.isfile(test_request_data.conf_name):\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 61, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #commenting out old implementation\n"}, {"code": "CCR001", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 96, "column_number": 5, "text": "Cognitive complexity is too high (17 > 7)", "physical_line": "    def StartTestExecution(self,request, context):\n"}, {"code": "E303", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 96, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    def StartTestExecution(self,request, context):\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 96, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "    def StartTestExecution(self,request, context):\n"}, {"code": "D202", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 97, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : Test response data containing, Test_Session_id,test_state,result, err_msg\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 97, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : Test response data containing, Test_Session_id,test_state,result, err_msg\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 97, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        test_request_data : Test request data containing , test_Set, test_suite, conf_name and time_out\n\n        Returns : Test response data containing, Test_Session_id,test_state,result, err_msg\n        -------\n\n        \"\"\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 108, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #Start Execution service is called from the client side to start the test execution\n"}, {"code": "E203", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 110, "column_number": 19, "text": "whitespace before ','", "physical_line": "        test_found , test_err_msg = self.check_test_availability(request)\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 124, "column_number": 17, "text": "print found.", "physical_line": "                print(e)\n"}, {"code": "E221", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 130, "column_number": 34, "text": "multiple spaces before operator", "physical_line": "            test_response.err_msg  = test_err_msg + config_err_msg\n"}, {"code": "E303", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 134, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    def GenerateTestReport(self,request, context):\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 134, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "    def GenerateTestReport(self,request, context):\n"}, {"code": "D202", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 135, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        request : request having test_Session_id, report_format and report_type\n        context\n\n        Returns : response having report_path, report_found status and err_msg if anything goes wrong\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 135, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        request : request having test_Session_id, report_format and report_type\n        context\n\n        Returns : response having report_path, report_found status and err_msg if anything goes wrong\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 135, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        request : request having test_Session_id, report_format and report_type\n        context\n\n        Returns : response having report_path, report_found status and err_msg if anything goes wrong\n        -------\n\n        \"\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 152, "column_number": 85, "text": "missing whitespace after ','", "physical_line": "            test_found, report_path = test_execution.generate_report(test_session_id,test_type,report_format)\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 152, "column_number": 95, "text": "missing whitespace after ','", "physical_line": "            test_found, report_path = test_execution.generate_report(test_session_id,test_type,report_format)\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 153, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #Assigning value to report response\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 158, "column_number": 13, "text": "print found.", "physical_line": "            print(report_res)\n"}, {"code": "F841", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 160, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 164, "column_number": 38, "text": "missing whitespace after ','", "physical_line": "    def GenerateLatestTestReport(self,request, context):\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 165, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        request : request having test_set_id, report_format and report_type\n        context\n\n        Returns : response having report_path, report_found status and err_msg if anything goes wrong\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 165, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        request : request having test_set_id, report_format and report_type\n        context\n\n        Returns : response having report_path, report_found status and err_msg if anything goes wrong\n        -------\n\n        \"\"\"\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 181, "column_number": 85, "text": "missing whitespace after ','", "physical_line": "            test_found, report_path = test_execution.generate_report(test_session_id,test_type,report_format,True)\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 181, "column_number": 95, "text": "missing whitespace after ','", "physical_line": "            test_found, report_path = test_execution.generate_report(test_session_id,test_type,report_format,True)\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 181, "column_number": 109, "text": "missing whitespace after ','", "physical_line": "            test_found, report_path = test_execution.generate_report(test_session_id,test_type,report_format,True)\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 182, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #Assigning value to report response\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 187, "column_number": 13, "text": "print found.", "physical_line": "            print(report_res)\n"}, {"code": "F841", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 189, "column_number": 9, "text": "local variable 'e' is assigned to but never used", "physical_line": "        except Exception as e:\n"}, {"code": "E302", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 193, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def serve():\n"}, {"code": "D200", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 194, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    method to start the grpc server in global ip address and with port 50051\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 194, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    method to start the grpc server in global ip address and with port 50051\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 194, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    method to start the grpc server in global ip address and with port 50051\n\n    \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 194, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "    \"\"\"\n    method to start the grpc server in global ip address and with port 50051\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 201, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #creating object for health.HealthServicer\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 204, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #creating object for testexecutionservicer to add in add_TestExecutionServicer_to_server and health_servicer object is passed to set status while calling RPC,\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 205, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #but here status is set in this function serve()\n"}, {"code": "E800", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 206, "column_number": 1, "text": "Found commented out code", "physical_line": "    #test_exec_server = testexecutionservicer(health_servicer)\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 206, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #test_exec_server = testexecutionservicer(health_servicer)\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 209, "column_number": 84, "text": "missing whitespace after ','", "physical_line": "    test_exec_service_pb2_grpc.add_TestExecutionServicer_to_server(test_exec_server,server)\n"}, {"code": "E265", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 213, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #empty string is passed  to set status of server in health check\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 217, "column_number": 40, "text": "missing whitespace after ','", "physical_line": "    health_servicer.set(\"TestExecution\",health_pb2.HealthCheckResponse.SERVING)\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 221, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Server listening\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 225, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Keyboard Interrupt\")\n"}, {"code": "D101", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 227, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class server_cls():\n"}, {"code": "E302", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 227, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class server_cls():\n"}, {"code": "D107", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 229, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "E231", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 234, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "    def set_service_status(self,serviceName, status):\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 235, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        serviceName: Name of the serverice, or \"\" for setting server status\n        status: status to set\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 235, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        serviceName: Name of the serverice, or \"\" for setting server status\n        status: status to set\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D414", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 235, "column_number": 1, "text": "Section has no content", "physical_line": "        \"\"\"\n\n        Parameters\n        ----------\n        serviceName: Name of the serverice, or \"\" for setting server status\n        status: status to set\n\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "E303", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 250, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    def graceful_shutdown(self):\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 251, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 251, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 251, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 251, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D200", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 260, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "        \"\"\"\n            method to start the grpc server in global ip address and with port 50051\n            \"\"\"\n"}, {"code": "D208", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 260, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "        \"\"\"\n            method to start the grpc server in global ip address and with port 50051\n            \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 260, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n            method to start the grpc server in global ip address and with port 50051\n            \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 260, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "        \"\"\"\n            method to start the grpc server in global ip address and with port 50051\n            \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 260, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n            method to start the grpc server in global ip address and with port 50051\n            \"\"\"\n"}, {"code": "E303", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 278, "column_number": 9, "text": "too many blank lines (2)", "physical_line": "        self.server.start()\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 279, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Server listening\")\n"}, {"code": "T201", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 283, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Keyboard Interrupt\")\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 286, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        starts the server in different thread\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 286, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        starts the server in different thread\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 286, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        starts the server in different thread\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 286, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        starts the server in different thread\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 296, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING, and stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 296, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING, and stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 296, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING, and stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "D403", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 296, "column_number": 1, "text": "First word of the first line should be properly capitalized", "physical_line": "        \"\"\"\n        sets the server status to NOT_SERVING, and stops the server\n        Returns\n        -------\n\n        \"\"\"\n"}, {"code": "W391", "filename": ".\\orchestrator\\server\\test_exec_server.py", "line_number": 306, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\orchestrator\\server\\__init__.py": [{"code": "D104", "filename": ".\\orchestrator\\server\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\report\\blocks.py": [{"code": "D100", "filename": ".\\report\\blocks.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import and_\n"}, {"code": "F401", "filename": ".\\report\\blocks.py", "line_number": 4, "column_number": 1, "text": "'db.schemas.control.AUTReleaseAdo' imported but unused", "physical_line": "from db.schemas.control import TestSession, TestNode, AUTReleaseAdo\n"}, {"code": "D103", "filename": ".\\report\\blocks.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_connection(conf_name, db_name):\n"}, {"code": "CCR001", "filename": ".\\report\\blocks.py", "line_number": 16, "column_number": 1, "text": "Cognitive complexity is too high (10 > 7)", "physical_line": "def get_test_session_items(session_id, conf_name, db_name):\n"}, {"code": "D103", "filename": ".\\report\\blocks.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_session_items(session_id, conf_name, db_name):\n"}, {"code": "E128", "filename": ".\\report\\blocks.py", "line_number": 61, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    {\n"}, {"code": "E123", "filename": ".\\report\\blocks.py", "line_number": 66, "column_number": 21, "text": "closing bracket does not match indentation of opening bracket's line", "physical_line": "                    }})\n"}, {"code": "ECE001", "filename": ".\\report\\blocks.py", "line_number": 76, "column_number": 9, "text": "Expression is too complex (10.5 > 7)", "physical_line": "        tr_tree[tr.test_suite_id]['test_cases'][tr.test_case_id]['test_steps'][tr.test_step_id]['results'].append(\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 90, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestSessionReport(TestSession):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestSessionReport(TestSession):\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 98, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestRunReport(TestRun):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 98, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestRunReport(TestRun):\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 99, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 106, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestStepResult(TestStep):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 106, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestStepResult(TestStep):\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 107, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 111, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReportHeader():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 111, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportHeader():\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 115, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReportMeta():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 115, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportMeta():\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 119, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReportSummary():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 119, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportSummary():\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 123, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class CoverageReport():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 123, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class CoverageReport():\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 127, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class DetailedReport():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 127, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class DetailedReport():\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 131, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class ReportContents():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 131, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class ReportContents():\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 147, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class NUnitTestSuite:\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 148, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, item_id):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 166, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class NUnitTestRun:\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 167, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, session_id):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 183, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class NUnitReport:\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 184, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, session_id):\n"}, {"code": "H601", "filename": ".\\report\\blocks.py", "line_number": 193, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TestEnvSummary(TestNode):\n"}, {"code": "D101", "filename": ".\\report\\blocks.py", "line_number": 193, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestEnvSummary(TestNode):\n"}, {"code": "D107", "filename": ".\\report\\blocks.py", "line_number": 194, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}], ".\\report\\graphs.py": [{"code": "D100", "filename": ".\\report\\graphs.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import plotly.graph_objects as go\n"}, {"code": "D103", "filename": ".\\report\\graphs.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ci_bar_chart(data_dict):\n"}, {"code": "E265", "filename": ".\\report\\graphs.py", "line_number": 21, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #with open(\"unittests/test_resources/reports/ci/ci_plotly.png\", \"wb\") as png_plot:\n"}, {"code": "E800", "filename": ".\\report\\graphs.py", "line_number": 22, "column_number": 1, "text": "Found commented out code", "physical_line": "    #    png_plot.write(plot_png)\n"}, {"code": "R504", "filename": ".\\report\\graphs.py", "line_number": 24, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return plot_base64\n"}, {"code": "D103", "filename": ".\\report\\graphs.py", "line_number": 27, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ci_delta_chart(data_dict):\n"}, {"code": "E123", "filename": ".\\report\\graphs.py", "line_number": 39, "column_number": 9, "text": "closing bracket does not match indentation of opening bracket's line", "physical_line": "        )\n"}, {"code": "E265", "filename": ".\\report\\graphs.py", "line_number": 47, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #with open(\"unittests/test_resources/reports/ci/ci_plotly.png\", \"wb\") as png_plot:\n"}, {"code": "E800", "filename": ".\\report\\graphs.py", "line_number": 48, "column_number": 1, "text": "Found commented out code", "physical_line": "    #    png_plot.write(plot_png)\n"}, {"code": "R504", "filename": ".\\report\\graphs.py", "line_number": 50, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return plot_base64\n"}, {"code": "D103", "filename": ".\\report\\graphs.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ci_stacked_bar_chart(data_dict):\n"}, {"code": "E241", "filename": ".\\report\\graphs.py", "line_number": 59, "column_number": 44, "text": "multiple spaces after ','", "physical_line": "                   text=data_dict['Total'],  textposition='outside',\n"}, {"code": "E131", "filename": ".\\report\\graphs.py", "line_number": 64, "column_number": 15, "text": "continuation line unaligned for hanging indent", "physical_line": "              go.Bar(name='Failed', x=test_runs, y=data_dict['Failed'], text=data_dict['Failed'],\n"}, {"code": "E265", "filename": ".\\report\\graphs.py", "line_number": 77, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #with open(\"unittests/test_resources/reports/ci/ci_plotly.png\", \"wb\") as png_plot:\n"}, {"code": "E800", "filename": ".\\report\\graphs.py", "line_number": 78, "column_number": 1, "text": "Found commented out code", "physical_line": "    #    png_plot.write(plot_png)\n"}, {"code": "R504", "filename": ".\\report\\graphs.py", "line_number": 80, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return plot_base64\n"}, {"code": "D103", "filename": ".\\report\\graphs.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_graph():\n"}], ".\\report\\prettify.py": [{"code": "D100", "filename": ".\\report\\prettify.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\report\\prettify.py", "line_number": 1, "column_number": 1, "text": "'datetime' imported but unused", "physical_line": "import datetime\n"}, {"code": "D103", "filename": ".\\report\\prettify.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def static_translate(field_name, field_value):\n"}, {"code": "R503", "filename": ".\\report\\prettify.py", "line_number": 16, "column_number": 5, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "    if field_name in static_translations:\n"}, {"code": "E211", "filename": ".\\report\\prettify.py", "line_number": 17, "column_number": 98, "text": "whitespace before '['", "physical_line": "        return static_translations[field_name][field_value] if field_value in static_translations \\\n        [field_name] else field_value\n"}, {"code": "E122", "filename": ".\\report\\prettify.py", "line_number": 18, "column_number": 9, "text": "continuation line missing indentation or outdented", "physical_line": "        return static_translations[field_name][field_value] if field_value in static_translations \\\n        [field_name] else field_value\n"}, {"code": "D103", "filename": ".\\report\\prettify.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def format_chart_label(label_set):\n"}, {"code": "R504", "filename": ".\\report\\prettify.py", "line_number": 26, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return formatted_label\n"}], ".\\report\\publish.py": [{"code": "D100", "filename": ".\\report\\publish.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\report\\publish.py", "line_number": 10, "column_number": 1, "text": "'db.schemas.control.TestNode' imported but unused", "physical_line": "from db.schemas.control import AUTReleaseAdo, TestSession, TestNode\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def goodbye():\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_pipeline_details(sha256_id):\n"}, {"code": "R504", "filename": ".\\report\\publish.py", "line_number": 31, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return pipeline_details\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 34, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_env_details(test_node_udid):\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_old_runs_for_branch(source_branch):\n"}, {"code": "ECE001", "filename": ".\\report\\publish.py", "line_number": 46, "column_number": 5, "text": "Expression is too complex (11.5 > 7)", "physical_line": "    old_runs = db_sesh.query(AUTReleaseAdo.build_run_number,\n"}, {"code": "R504", "filename": ".\\report\\publish.py", "line_number": 51, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return old_runs\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 54, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def ci_stats_to_chart_data(hist_stats):\n"}, {"code": "T201", "filename": ".\\report\\publish.py", "line_number": 70, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Chart data: {chart_data}\")\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 74, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_ci_quick_stats(test_session_id, source_branch):\n"}, {"code": "ECE001", "filename": ".\\report\\publish.py", "line_number": 77, "column_number": 5, "text": "Expression is too complex (9.0 > 7)", "physical_line": "    quick_stats = db_sesh.query(TestResult.test_result, func.count(TestResult.vp_id).label('vp_count')). \\\n        filter(TestResult.session_id == test_session_id).group_by(TestResult.test_result).all()\n"}, {"code": "ECE001", "filename": ".\\report\\publish.py", "line_number": 94, "column_number": 9, "text": "Expression is too complex (9.0 > 7)", "physical_line": "        hist_quick_stats = db_sesh.query(TestResult.test_result, func.count(TestResult.vp_id).label('vp_count')). \\\n            filter(TestResult.session_id == old_run.session_id).group_by(TestResult.test_result).all()\n"}, {"code": "E127", "filename": ".\\report\\publish.py", "line_number": 98, "column_number": 39, "text": "continuation line over-indented for visual indent", "physical_line": "                                      {'Failed': 0, 'Inconclusive': 0, 'Blocked': 0, 'Passed': 0, 'Total': 0},\n"}, {"code": "D103", "filename": ".\\report\\publish.py", "line_number": 118, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def modbas_test_report(test_run_info, taf_config, report_type=\"ci\"):\n"}], ".\\report\\publish_release.py": [{"code": "D100", "filename": ".\\report\\publish_release.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\report\\publish_release.py", "line_number": 5, "column_number": 1, "text": "'atexit' imported but unused", "physical_line": "import atexit\n"}, {"code": "D103", "filename": ".\\report\\publish_release.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def modbas_release_report(iteration: str):\n"}, {"code": "D205", "filename": ".\\report\\publish_release.py", "line_number": 37, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This is just an experimental version of modbas_release_report, only for development\n    :param iteration:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\report\\publish_release.py", "line_number": 37, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This is just an experimental version of modbas_release_report, only for development\n    :param iteration:\n    :return:\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\report\\publish_release.py", "line_number": 37, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This is just an experimental version of modbas_release_report, only for development\n    :param iteration:\n    :return:\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\report\\publish_release.py", "line_number": 43, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"SUPPLEMENTAL TYPE: {type(release_scope.supplemental)}\")\n"}, {"code": "W293", "filename": ".\\report\\publish_release.py", "line_number": 55, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "    \"\"\"\n        for req_list in [bl.linked_requirements for bl in release_scope.backlogs]:\n            for req in req_list:\n                print(f\"Req_items in publish: {req.req_items}\")\n    \n    \"\"\"\n"}, {"code": "F841", "filename": ".\\report\\publish_release.py", "line_number": 60, "column_number": 5, "text": "local variable 'time_format_string' is assigned to but never used", "physical_line": "    time_format_string = \"%Y.%b.%d.%H%M%S\"\n"}, {"code": "E800", "filename": ".\\report\\publish_release.py", "line_number": 61, "column_number": 1, "text": "Found commented out code", "physical_line": "    #html_report_name = f\"Release_Report_iteration_{iteration}_{datetime.datetime.now().strftime(time_format_string)}.html\"\n"}, {"code": "E265", "filename": ".\\report\\publish_release.py", "line_number": 61, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #html_report_name = f\"Release_Report_iteration_{iteration}_{datetime.datetime.now().strftime(time_format_string)}.html\"\n"}, {"code": "W292", "filename": ".\\report\\publish_release.py", "line_number": 64, "column_number": 33, "text": "no newline at end of file", "physical_line": "        f.write(rendered_report)"}], ".\\report\\test_suite.py": [{"code": "D100", "filename": ".\\report\\test_suite.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db.schemas import management as mgt\n"}, {"code": "F401", "filename": ".\\report\\test_suite.py", "line_number": 1, "column_number": 1, "text": "'db.schemas.management as mgt' imported but unused", "physical_line": "from db.schemas import management as mgt\n"}, {"code": "D103", "filename": ".\\report\\test_suite.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_test_suite(suite_id, include=None):\n"}, {"code": "R504", "filename": ".\\report\\test_suite.py", "line_number": 6, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return test_suite\n"}], ".\\report\\__init__.py": [{"code": "D104", "filename": ".\\report\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\resources\\object_maps\\terminal_10016.py": [{"code": "D100", "filename": ".\\resources\\object_maps\\terminal_10016.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "main_QQuickApplicationWindow = {\"title\": \"Main\", \"type\": \"QQuickApplicationWindow\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E128", "filename": ".\\resources\\object_maps\\terminal_10016.py", "line_number": 107, "column_number": 27, "text": "continuation line under-indented for visual indent", "physical_line": "                          \"type\": \"HamburgerMenuItem\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E128", "filename": ".\\resources\\object_maps\\terminal_10016.py", "line_number": 111, "column_number": 31, "text": "continuation line under-indented for visual indent", "physical_line": "                              \"text\": \"Chemicals\", \"type\": \"HamburgerMenuItem\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E128", "filename": ".\\resources\\object_maps\\terminal_10016.py", "line_number": 120, "column_number": 20, "text": "continuation line under-indented for visual indent", "physical_line": "                   \"visible\": True}\n"}], ".\\resources\\object_maps\\terminal_10022.py": [{"code": "D100", "filename": ".\\resources\\object_maps\\terminal_10022.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "main_QQuickApplicationWindow = {\"title\": \"Main\", \"type\": \"QQuickApplicationWindow\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E800", "filename": ".\\resources\\object_maps\\terminal_10022.py", "line_number": 4, "column_number": 1, "text": "Found commented out code", "physical_line": "# main_PageHeader = {\"container\": main_QQuickApplicationWindow, \"type\": \"PageHeader\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E800", "filename": ".\\resources\\object_maps\\terminal_10022.py", "line_number": 9, "column_number": 1, "text": "Found commented out code", "physical_line": "# hamburgerButton = {\"container\": main_QQuickApplicationWindow, \"id\": \"hamburgerMenuId\", \"type\": \"HamburgerMenu\", \"unnamed\": 1, \"visible\": True}\n"}, {"code": "E800", "filename": ".\\resources\\object_maps\\terminal_10022.py", "line_number": 79, "column_number": 1, "text": "Found commented out code", "physical_line": "#burettesList_TableViewContentItem = {\"container\": main_root_BasePage, \"type\": \"Item\", \"visible\": True, str(\"parent\"): {\"id\": \"tableView\"}}\n"}, {"code": "E265", "filename": ".\\resources\\object_maps\\terminal_10022.py", "line_number": 79, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#burettesList_TableViewContentItem = {\"container\": main_root_BasePage, \"type\": \"Item\", \"visible\": True, str(\"parent\"): {\"id\": \"tableView\"}}\n"}], ".\\tdk\\__init__.py": [{"code": "D104", "filename": ".\\tdk\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\tdk\\data\\__init__.py": [{"code": "D104", "filename": ".\\tdk\\data\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\tdk\\data\\format\\xlsx.py": [{"code": "CCR001", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 62, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def determine_merged_range_values(ws: Worksheet) -> dict:\n"}, {"code": "D205", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 63, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function checks all the merged cells in a worksheet and returns a dictionary where the keys are the coordinates\n    of the cells in the merged cell ranges and the value of the only non-merged cell in the range is copied to all the\n    cells in the range.\n\n    :param ws: A worksheet object from the openpyxl package\n    :return: A dictionary as described above\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 63, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function checks all the merged cells in a worksheet and returns a dictionary where the keys are the coordinates\n    of the cells in the merged cell ranges and the value of the only non-merged cell in the range is copied to all the\n    cells in the range.\n\n    :param ws: A worksheet object from the openpyxl package\n    :return: A dictionary as described above\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 63, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function checks all the merged cells in a worksheet and returns a dictionary where the keys are the coordinates\n    of the cells in the merged cell ranges and the value of the only non-merged cell in the range is copied to all the\n    cells in the range.\n\n    :param ws: A worksheet object from the openpyxl package\n    :return: A dictionary as described above\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 88, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def _parse_ws(ws: Worksheet) -> list:\n"}, {"code": "D205", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 89, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function takes a worksheet object from the openpyxl package and returns a list of lists where each list\n    represents a row in the worksheet. Merged cells are handled by copying the value of the only non-merged cell in the\n    merged cell range to all the cells.\n    :param ws: A worksheet object from the openpyxl package\n    :return: List of lists as described above\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 89, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function takes a worksheet object from the openpyxl package and returns a list of lists where each list\n    represents a row in the worksheet. Merged cells are handled by copying the value of the only non-merged cell in the\n    merged cell range to all the cells.\n    :param ws: A worksheet object from the openpyxl package\n    :return: List of lists as described above\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 89, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function takes a worksheet object from the openpyxl package and returns a list of lists where each list\n    represents a row in the worksheet. Merged cells are handled by copying the value of the only non-merged cell in the\n    merged cell range to all the cells.\n    :param ws: A worksheet object from the openpyxl package\n    :return: List of lists as described above\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 116, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The parse_xlsx function takes a path to an XLSX file and returns a dictionary of the data in the file.\n    Merged cells are handled by copying the value of the only non-merged cell in the merged cell range to all the cells.\n    :param path: The path to the XLSX file\n    :return: A dictionary where the keys are the worksheet names and the values\n    are the data in the worksheets as a list of lists.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 116, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The parse_xlsx function takes a path to an XLSX file and returns a dictionary of the data in the file.\n    Merged cells are handled by copying the value of the only non-merged cell in the merged cell range to all the cells.\n    :param path: The path to the XLSX file\n    :return: A dictionary where the keys are the worksheet names and the values\n    are the data in the worksheets as a list of lists.\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 132, "column_number": 1, "text": "Cognitive complexity is too high (50 > 7)", "physical_line": "def write_to_xlsx(path: Union[str, Path], data: dict, template_file: Union[str, Path] = None):\n"}, {"code": "D205", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 133, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The write_to_xlsx function takes a dictionary of data and writes it to an XLSX file.\n    The input dictionary's keys are the worksheet names and the values are the data to be written to the worksheet.\n    Optionally, a template XLSX file can be passed to the function. If a template file is passed, the function will use\n    the worksheets in the template file as the worksheets in the output file.\n    The input dictionary may contain metadata. In this case, the actual data content must be in a key called \"data\".\n    The metadata must be in a key called \"meta\". The metadata must be a dictionary and may contain the following keys:\n    - \"template_sheet\": The name of the worksheet in the template file to use as the output worksheet.\n        The name of the sheet in the output file will NOT be the same as the name of the sheet in the template file.\n        Instead, the name of the sheet in the output file will be the same as the key in the input dictionary.\n        !!! If a template_sheet name is defined, but is not found in the template file, the function will raise an error.\n    - \"start_cell\": Must be a tuple of integers, where the first item is the number of rows,\n        the second item is the number of columns to skip before writing the data to the worksheet.\n\n    Notes on the template file: The openpyxl package does not support copying worksheets from one workbook to another,\n    so the template file is used as a reference for the formatting of the output file. The template file is not modified.\n    Openpyxl ignores the formatting of the cells in the template file, if the cells don't contain actual values,\n    so to define a properly formatted worksheet, the best practice is to use Conditional Formatting in the templates.\n\n    :param path: The path to the output XLSX file. If the parent directory does not exist, it will be created.\n    :param data: A dictionary of data to be written to the output XLSX file. The structure is described above.\n    :param template_file: An optional path to a template XLSX file. The details are described above.\n    :return: No return value. If no errors are raised, the output file is written to the specified path. (Hopefully.)\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 133, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The write_to_xlsx function takes a dictionary of data and writes it to an XLSX file.\n    The input dictionary's keys are the worksheet names and the values are the data to be written to the worksheet.\n    Optionally, a template XLSX file can be passed to the function. If a template file is passed, the function will use\n    the worksheets in the template file as the worksheets in the output file.\n    The input dictionary may contain metadata. In this case, the actual data content must be in a key called \"data\".\n    The metadata must be in a key called \"meta\". The metadata must be a dictionary and may contain the following keys:\n    - \"template_sheet\": The name of the worksheet in the template file to use as the output worksheet.\n        The name of the sheet in the output file will NOT be the same as the name of the sheet in the template file.\n        Instead, the name of the sheet in the output file will be the same as the key in the input dictionary.\n        !!! If a template_sheet name is defined, but is not found in the template file, the function will raise an error.\n    - \"start_cell\": Must be a tuple of integers, where the first item is the number of rows,\n        the second item is the number of columns to skip before writing the data to the worksheet.\n\n    Notes on the template file: The openpyxl package does not support copying worksheets from one workbook to another,\n    so the template file is used as a reference for the formatting of the output file. The template file is not modified.\n    Openpyxl ignores the formatting of the cells in the template file, if the cells don't contain actual values,\n    so to define a properly formatted worksheet, the best practice is to use Conditional Formatting in the templates.\n\n    :param path: The path to the output XLSX file. If the parent directory does not exist, it will be created.\n    :param data: A dictionary of data to be written to the output XLSX file. The structure is described above.\n    :param template_file: An optional path to a template XLSX file. The details are described above.\n    :return: No return value. If no errors are raised, the output file is written to the specified path. (Hopefully.)\n    \"\"\"\n"}, {"code": "R506", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 169, "column_number": 9, "text": "unnecessary else after raise statement.", "physical_line": "        if not template_file.exists():\n"}, {"code": "C403", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 173, "column_number": 23, "text": "Unnecessary list comprehension - rewrite as a set comprehension.", "physical_line": "            ws_list = set([ws.title for ws in wb.worksheets])\n"}, {"code": "C403", "filename": ".\\tdk\\data\\format\\xlsx.py", "line_number": 174, "column_number": 29, "text": "Unnecessary list comprehension - rewrite as a set comprehension.", "physical_line": "            template_list = set([meta['meta']['template_sheet'] for meta in data.values() if 'meta' in meta])\n"}], ".\\tdk\\data\\format\\__init__.py": [{"code": "D104", "filename": ".\\tdk\\data\\format\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "\n"}, {"code": "W391", "filename": ".\\tdk\\data\\format\\__init__.py", "line_number": 1, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\tools\\__init__.py": [{"code": "D104", "filename": ".\\tools\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\tools\\atm\\main.py": [{"code": "D200", "filename": ".\\tools\\atm\\main.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nThe ATM (Automated Test Manager) package helps with keeping track of requirements, backlogs and tests.\n\"\"\"\n"}, {"code": "F401", "filename": ".\\tools\\atm\\main.py", "line_number": 6, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import Union, Dict\n"}, {"code": "F401", "filename": ".\\tools\\atm\\main.py", "line_number": 6, "column_number": 1, "text": "'typing.Dict' imported but unused", "physical_line": "from typing import Union, Dict\n"}, {"code": "F401", "filename": ".\\tools\\atm\\main.py", "line_number": 9, "column_number": 1, "text": "'db.parameter_table.get_params_w_desc_ado' imported but unused", "physical_line": "from db.parameter_table import get_params_w_desc_ado, get_params_w_desc_taf\n"}, {"code": "D205", "filename": ".\\tools\\atm\\main.py", "line_number": 21, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The stage_mgt_data() function collects the requirements and backlogs from Azure DevOps and\n    SRD documents (MS Word format), then brings them to a common format in the tables under the 'staging' schema of\n    the Test Automation database. The requirements from the documents and ADO are then consolidated,\n    as the first step towards creating a 'Single Point of Truth'.\n\n    :param input_path: The path to the root directory under which all SRD Documents are stored.\n    :param output_path: The path where the converted (HTML) SRD documents are to be stored.\n    :param file_name_pattern: The file name pattern to match the naming conventions of the input SRD documents.\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\tools\\atm\\main.py", "line_number": 21, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The stage_mgt_data() function collects the requirements and backlogs from Azure DevOps and\n    SRD documents (MS Word format), then brings them to a common format in the tables under the 'staging' schema of\n    the Test Automation database. The requirements from the documents and ADO are then consolidated,\n    as the first step towards creating a 'Single Point of Truth'.\n\n    :param input_path: The path to the root directory under which all SRD Documents are stored.\n    :param output_path: The path where the converted (HTML) SRD documents are to be stored.\n    :param file_name_pattern: The file name pattern to match the naming conventions of the input SRD documents.\n    :return:\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\tools\\atm\\main.py", "line_number": 21, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The stage_mgt_data() function collects the requirements and backlogs from Azure DevOps and\n    SRD documents (MS Word format), then brings them to a common format in the tables under the 'staging' schema of\n    the Test Automation database. The requirements from the documents and ADO are then consolidated,\n    as the first step towards creating a 'Single Point of Truth'.\n\n    :param input_path: The path to the root directory under which all SRD Documents are stored.\n    :param output_path: The path where the converted (HTML) SRD documents are to be stored.\n    :param file_name_pattern: The file name pattern to match the naming conventions of the input SRD documents.\n    :return:\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\tools\\atm\\main.py", "line_number": 21, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The stage_mgt_data() function collects the requirements and backlogs from Azure DevOps and\n    SRD documents (MS Word format), then brings them to a common format in the tables under the 'staging' schema of\n    the Test Automation database. The requirements from the documents and ADO are then consolidated,\n    as the first step towards creating a 'Single Point of Truth'.\n\n    :param input_path: The path to the root directory under which all SRD Documents are stored.\n    :param output_path: The path where the converted (HTML) SRD documents are to be stored.\n    :param file_name_pattern: The file name pattern to match the naming conventions of the input SRD documents.\n    :return:\n    \"\"\"\n"}, {"code": "B007", "filename": ".\\tools\\atm\\main.py", "line_number": 38, "column_number": 9, "text": "Loop control variable 'docx_key' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for docx_key, html_details in html_list.items():\n"}, {"code": "CCR001", "filename": ".\\tools\\atm\\main.py", "line_number": 65, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def stage_params(db_name: str = 'taf'):\n"}, {"code": "D103", "filename": ".\\tools\\atm\\main.py", "line_number": 65, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def stage_params(db_name: str = 'taf'):\n"}, {"code": "D103", "filename": ".\\tools\\atm\\main.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def main():\n"}, {"code": "E302", "filename": ".\\tools\\atm\\main.py", "line_number": 85, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def main():\n"}], ".\\tools\\hrsync\\__main__.py": [{"code": "D100", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import argparse\n"}, {"code": "F401", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 3, "column_number": 1, "text": "'sys' imported but unused", "physical_line": "import sys\n"}, {"code": "F811", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 5, "column_number": 1, "text": "redefinition of unused 'datetime' from line 2", "physical_line": "import datetime as datetime\n"}, {"code": "D103", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def define_cli_args() -> argparse.ArgumentParser:\n"}, {"code": "E800", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 16, "column_number": 1, "text": "Found commented out code", "physical_line": "        # usage =  \"By default, ArgumentParser calculates the usage message from the arguments it contains\",\n"}, {"code": "D103", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 58, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_cli_args(args: argparse.ArgumentParser) -> dict:\n"}, {"code": "E128", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 117, "column_number": 11, "text": "continuation line under-indented for visual indent", "physical_line": "          f\"to {sync_run_params['target']['arg']}\")\n"}, {"code": "W391", "filename": ".\\tools\\hrsync\\__main__.py", "line_number": 130, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\tools\\pilotlight\\fswatcher.py": [{"code": "D100", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from PySide2.QtCore import QFileSystemWatcher, QDir, QCoreApplication, Slot\n"}, {"code": "F401", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 5, "column_number": 1, "text": "'utils.log' imported but unused", "physical_line": "from utils import log\n"}, {"code": "W291", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 14, "column_number": 97, "text": "trailing whitespace", "physical_line": "\"\"\"\nOne way to invoke the TAF is by copying a new AUT release into one of the preconfigured directories.\nWhen a file is detected its SHA256 checksum is checked against the that of the previous releases \nand only installed if it is new. Depending on which directoy the file was detected in, \nthe TAF may perform a full regression test, a smoke test, or installation only.\n\nAn alternative to using QFileSystemWatcher is inotify https://pypi.org/project/inotify/\n\"\"\"\n"}, {"code": "W291", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 15, "column_number": 87, "text": "trailing whitespace", "physical_line": "\"\"\"\nOne way to invoke the TAF is by copying a new AUT release into one of the preconfigured directories.\nWhen a file is detected its SHA256 checksum is checked against the that of the previous releases \nand only installed if it is new. Depending on which directoy the file was detected in, \nthe TAF may perform a full regression test, a smoke test, or installation only.\n\nAn alternative to using QFileSystemWatcher is inotify https://pypi.org/project/inotify/\n\"\"\"\n"}, {"code": "E302", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 27, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "@Slot()\n"}, {"code": "D103", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def new_file_found():\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"A change has been detected in one of the watched directories\")\n"}, {"code": "CCR001", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 33, "column_number": 1, "text": "Cognitive complexity is too high (25 > 7)", "physical_line": "def new_file_found(changed_dir):\n"}, {"code": "D103", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def new_file_found(changed_dir):\n"}, {"code": "F811", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 33, "column_number": 1, "text": "redefinition of unused 'new_file_found' from line 28", "physical_line": "def new_file_found(changed_dir):\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 35, "column_number": 5, "text": "print found.", "physical_line": "    print(\"A change detected in the directory: \", changed_dir)\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 41, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It really is something new\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 54, "column_number": 21, "text": "print found.", "physical_line": "                    print(\"Current :\", curr_file_size, \" last: \", last_file_size)\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 56, "column_number": 17, "text": "print found.", "physical_line": "                print(\"\\tChecking file type of: \", new_file.fileName())\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 64, "column_number": 21, "text": "print found.", "physical_line": "                    print(\"UNKNOWN FILE TYPE\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 69, "column_number": 17, "text": "print found.", "physical_line": "                print(\"EXE HASH: \", exe_hash)\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 70, "column_number": 17, "text": "print found.", "physical_line": "                print(\"Exe metadata: \", os.stat(exe_file))\n"}, {"code": "E800", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 73, "column_number": 1, "text": "Found commented out code", "physical_line": "            # release_info = parse_release_name(new_file.baseName())\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 76, "column_number": 13, "text": "print found.", "physical_line": "            print(\"And here the thing is : \", release_info['version'], \" out of \", new_file.fileName())\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 81, "column_number": 17, "text": "print found.", "physical_line": "                print(\"This release has been installed already\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 90, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\tA file has been removed, but we don't care\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 92, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\tA file has been renamed (probably), but we don't really care\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 96, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Nothing to see here!\")\n"}, {"code": "D103", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 99, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def list_files(dir_dict):\n"}, {"code": "D103", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 104, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def find_rel_exe(dir_path):\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 107, "column_number": 5, "text": "print found.", "physical_line": "    print(\"We're checking the temp directory now with find_rel_exe(dir_path)\")\n"}, {"code": "E800", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 112, "column_number": 1, "text": "Found commented out code", "physical_line": "    # tmp_dir.setFilter(QDir.NoDot)\n"}, {"code": "SIM102", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 115, "column_number": 9, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "        if one_item.fileName() not in ['.', '..']:\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 118, "column_number": 17, "text": "print found.", "physical_line": "                print(\"It's a directory\")\n"}, {"code": "R504", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 124, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return new_exe_files\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 149, "column_number": 13, "text": "print found.", "physical_line": "            print(\"The directory doesn't exist\")\n"}, {"code": "T201", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 154, "column_number": 9, "text": "print found.", "physical_line": "        print(\"File list: \", dir_name, \" - \", file_list)\n"}, {"code": "E303", "filename": ".\\tools\\pilotlight\\fswatcher.py", "line_number": 157, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    release_watcher.directoryChanged.connect(new_file_found)\n"}], ".\\tools\\pilotlight\\__init__.py": [{"code": "D205", "filename": ".\\tools\\pilotlight\\__init__.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe TAF Pilot Light is a small application whose role is to enhance the availability of the test automation framework.\nIt checks the TAF server's capacity and allows, queues or rejects connection attempts and test execution requests.\nAn equally important function of the tool is process management, where it's ensured that if an incoming request arrives\nat a time when the TAF server is down, (e.g. after the host machine is rebooted),\nthen it starts the necessary applications so the TAF can fulfill the request.\n\"\"\""}, {"code": "W292", "filename": ".\\tools\\pilotlight\\__init__.py", "line_number": 7, "column_number": 4, "text": "no newline at end of file", "physical_line": "\"\"\"\nThe TAF Pilot Light is a small application whose role is to enhance the availability of the test automation framework.\nIt checks the TAF server's capacity and allows, queues or rejects connection attempts and test execution requests.\nAn equally important function of the tool is process management, where it's ensured that if an incoming request arrives\nat a time when the TAF server is down, (e.g. after the host machine is rebooted),\nthen it starts the necessary applications so the TAF can fulfill the request.\n\"\"\""}], ".\\tools\\tafrunner\\__main__.py": [{"code": "D205", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe tafrunner package is an access point to some of the test execution and reporting features of the TAF.\nIt's purpose is to provide an interface to TAF through which, the user can execute some of the most important\nfunctions to execute tests and generate reports. It is also the most convenient way of integrating automated tests\ninto the SUT's CI/CD pipeline.\n\nThis file is the package's entry point, much like the main() function in a C program. It is named  __main__.py\nso that even if the generated executable is faulty or not available in an environment, it can still be run from the\nCLI using python's -m switch to run it as a module.\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 20, "column_number": 1, "text": "'db.aut.init_connection' imported but unused", "physical_line": "from db.aut import register_aut_instance, init_connection, register_aut_release, get_aut_instance, register_mgt_release, \\\n    get_aut_by_id, register_ado_release\n"}, {"code": "E800", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 22, "column_number": 1, "text": "Found commented out code", "physical_line": "# from orchestrator.dispatch import list_nodes\n"}, {"code": "F401", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 25, "column_number": 1, "text": "'orchestrator.ctrl.squish.running_servers' imported but unused", "physical_line": "from orchestrator.ctrl.squish import start_local_server, running_servers, stop_local_server\n"}, {"code": "D103", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def define_cli_args() -> argparse.ArgumentParser:\n"}, {"code": "E302", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 45, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def define_cli_args() -> argparse.ArgumentParser:\n"}, {"code": "E800", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 48, "column_number": 1, "text": "Found commented out code", "physical_line": "        # usage =  \"By default, ArgumentParser calculates the usage message from the arguments it contains\",\n"}, {"code": "E131", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 86, "column_number": 46, "text": "continuation line unaligned for hanging indent", "physical_line": "                                             \"the LabX instance will be chosen to match the SUT's version. \"\n"}, {"code": "D103", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 94, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_cli_args(args: argparse.ArgumentParser) -> dict:\n"}, {"code": "D103", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 108, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_runner(conf_arg: str):\n"}, {"code": "E800", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 120, "column_number": 1, "text": "Found commented out code", "physical_line": "    # init_connection(conf_arg, 'taf')\n"}, {"code": "CCR001", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 130, "column_number": 1, "text": "Cognitive complexity is too high (18 > 7)", "physical_line": "def find_sut_instance(sut_arg: str):\n"}, {"code": "D103", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 130, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def find_sut_instance(sut_arg: str):\n"}, {"code": "R506", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 135, "column_number": 5, "text": "unnecessary elif after raise statement.", "physical_line": "    if sut_arg == 'new':\n"}, {"code": "T201", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 215, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Taf Config file: {taf_config}\")\n"}, {"code": "E800", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 226, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(f\"SUT Instance: {sut_instance.aut_instance}\")\n"}, {"code": "E265", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 226, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(f\"SUT Instance: {sut_instance.aut_instance}\")\n"}, {"code": "T201", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 245, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Test Node: {test_node}\")\n"}, {"code": "W391", "filename": ".\\tools\\tafrunner\\__main__.py", "line_number": 255, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\tools\\test_mgt\\req_sync.py": [{"code": "D100", "filename": ".\\tools\\test_mgt\\req_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "D103", "filename": ".\\tools\\test_mgt\\req_sync.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def main(taf_config_name, ado_config_name, query_id):\n"}, {"code": "E302", "filename": ".\\tools\\test_mgt\\req_sync.py", "line_number": 8, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def main(taf_config_name, ado_config_name, query_id):\n"}, {"code": "R504", "filename": ".\\tools\\test_mgt\\req_sync.py", "line_number": 23, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return req_details\n"}], ".\\unittests\\test_config.py": [{"code": "D100", "filename": ".\\unittests\\test_config.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "F401", "filename": ".\\unittests\\test_config.py", "line_number": 1, "column_number": 1, "text": "'logging' imported but unused", "physical_line": "import logging\n"}, {"code": "PT001", "filename": ".\\unittests\\test_config.py", "line_number": 14, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\test_config.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_env_variable():\n"}, {"code": "E302", "filename": ".\\unittests\\test_config.py", "line_number": 23, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_read_defaults():\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 24, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the default parameters are used when the function\n    is called without specifying the config file and its type.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 24, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the default parameters are used when the function\n    is called without specifying the config file and its type.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 35, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the exception is caught and a message is printed\n    if the incorrect file type -JSON- is passed to the config reader.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 35, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the exception is caught and a message is printed\n    if the incorrect file type -JSON- is passed to the config reader.\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\unittests\\test_config.py", "line_number": 39, "column_number": 5, "text": "local variable 'conf' is assigned to but never used", "physical_line": "    conf = cfg.read_config_file(file_type=\"json\")\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 45, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the exception is caught and a message is printed\n    if a non-existing filename is passed to the config reader.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 45, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the exception is caught and a message is printed\n    if a non-existing filename is passed to the config reader.\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\unittests\\test_config.py", "line_number": 49, "column_number": 5, "text": "local variable 'conf' is assigned to but never used", "physical_line": "    conf = cfg.read_config_file(conf_file_name=\"non_existing_file\", file_type=\"json\")\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 55, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the config reader returns 'None'\n    if the file type passed to it is unknown\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 55, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the config reader returns 'None'\n    if the file type passed to it is unknown\n    \"\"\"\n"}, {"code": "E302", "filename": ".\\unittests\\test_config.py", "line_number": 62, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_read_json():\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 63, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the config reader can parse JSON files,\n    and - implicitly - that it can handle file names passed as arguments.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 63, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the config reader can parse JSON files,\n    and - implicitly - that it can handle file names passed as arguments.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_config.py", "line_number": 74, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This test function checks that the config reader can parse toml files.\n    \"\"\"\n"}, {"code": "E302", "filename": ".\\unittests\\test_config.py", "line_number": 82, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_read_env(set_env_variable):\n"}, {"code": "D200", "filename": ".\\unittests\\test_config.py", "line_number": 83, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This test function checks that we're able to read environment variables\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 83, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that we're able to read environment variables\n    \"\"\"\n"}, {"code": "E302", "filename": ".\\unittests\\test_config.py", "line_number": 90, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_read_miss_env(capsys):\n"}, {"code": "D205", "filename": ".\\unittests\\test_config.py", "line_number": 91, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This test function checks that the read_env_var() returns 'None' if the\n    environment variable was not found.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 91, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test function checks that the read_env_var() returns 'None' if the\n    environment variable was not found.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_config.py", "line_number": 102, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    This test checks if the read_env_var() function throws and exception if the env variable is not defined\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 102, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This test checks if the read_env_var() function throws and exception if the env variable is not defined\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\unittests\\test_config.py", "line_number": 105, "column_number": 53, "text": "local variable 'ke' is assigned to but never used", "physical_line": "    with pytest.raises(utils.tafexcept.TafError) as ke:\n"}, {"code": "F841", "filename": ".\\unittests\\test_config.py", "line_number": 106, "column_number": 9, "text": "local variable 'env_var' is assigned to but never used", "physical_line": "        env_var = cfg.read_env_var(\"this_should_not_be_found\")\n"}, {"code": "D200", "filename": ".\\unittests\\test_config.py", "line_number": 110, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the read_env_var() function can read system env. variables\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_config.py", "line_number": 110, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check that the read_env_var() function can read system env. variables\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\test_config.py", "line_number": 114, "column_number": 5, "text": "print found.", "physical_line": "    print(env_var)\n"}, {"code": "D103", "filename": ".\\unittests\\test_config.py", "line_number": 118, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_config_by_name():\n"}, {"code": "T201", "filename": ".\\unittests\\test_config.py", "line_number": 120, "column_number": 5, "text": "print found.", "physical_line": "    print(fp)\n"}, {"code": "D103", "filename": ".\\unittests\\test_config.py", "line_number": 123, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_config_init():\n"}, {"code": "T201", "filename": ".\\unittests\\test_config.py", "line_number": 126, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Config map: {cfg.config_map}\")"}, {"code": "W292", "filename": ".\\unittests\\test_config.py", "line_number": 126, "column_number": 43, "text": "no newline at end of file", "physical_line": "    print(f\"Config map: {cfg.config_map}\")"}], ".\\unittests\\test_conn.py": [{"code": "D100", "filename": ".\\unittests\\test_conn.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "F401", "filename": ".\\unittests\\test_conn.py", "line_number": 1, "column_number": 1, "text": "'pytest' imported but unused", "physical_line": "import pytest\n"}, {"code": "F403", "filename": ".\\unittests\\test_conn.py", "line_number": 4, "column_number": 1, "text": "'from db.conn import *' used; unable to detect undefined names", "physical_line": "from db.conn import *\n"}, {"code": "D103", "filename": ".\\unittests\\test_conn.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_factory():\n"}, {"code": "T201", "filename": ".\\unittests\\test_conn.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(\"I'm running\")\n"}, {"code": "F405", "filename": ".\\unittests\\test_conn.py", "line_number": 9, "column_number": 20, "text": "'new_session_factory' may be undefined, or defined from star imports: db.conn", "physical_line": "    sesh_factory = new_session_factory(\n"}, {"code": "F405", "filename": ".\\unittests\\test_conn.py", "line_number": 14, "column_number": 5, "text": "'kill_session' may be undefined, or defined from star imports: db.conn", "physical_line": "    kill_session(new_sesh)\n"}, {"code": "D103", "filename": ".\\unittests\\test_conn.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_factory_path():\n"}, {"code": "E302", "filename": ".\\unittests\\test_conn.py", "line_number": 16, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_init_factory_path():\n"}, {"code": "T201", "filename": ".\\unittests\\test_conn.py", "line_number": 17, "column_number": 5, "text": "print found.", "physical_line": "    print(\"I'm running\")\n"}, {"code": "F405", "filename": ".\\unittests\\test_conn.py", "line_number": 18, "column_number": 20, "text": "'new_session_factory' may be undefined, or defined from star imports: db.conn", "physical_line": "    sesh_factory = new_session_factory(\n"}, {"code": "F405", "filename": ".\\unittests\\test_conn.py", "line_number": 23, "column_number": 5, "text": "'kill_session' may be undefined, or defined from star imports: db.conn", "physical_line": "    kill_session(new_sesh)\n"}, {"code": "D103", "filename": ".\\unittests\\test_conn.py", "line_number": 26, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_db():\n"}, {"code": "F405", "filename": ".\\unittests\\test_conn.py", "line_number": 27, "column_number": 5, "text": "'init_db' may be undefined, or defined from star imports: db.conn", "physical_line": "    init_db('DEV', 'taf')\n"}], ".\\unittests\\test_gherkin_parser.py": [{"code": "D100", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.parsers import gherkin\n"}, {"code": "D103", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_gherkin():\n"}, {"code": "T201", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 9, "column_number": 5, "text": "print found.", "physical_line": "    print(os.path.basename(feat_file_name))\n"}, {"code": "T201", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 10, "column_number": 5, "text": "print found.", "physical_line": "    print(\"File name: \", os.path.splitext(os.path.basename(feat_file_name))[0])\n"}, {"code": "T201", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 14, "column_number": 5, "text": "print found.", "physical_line": "    print(\"File name: \", out_json_path + \"/\" + out_json_name)\n"}, {"code": "SIM115", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 15, "column_number": 16, "text": "Use context handler for opening files", "physical_line": "    out_file = open(out_json_path + \"/\" + out_json_name, \"w\")\n"}, {"code": "W292", "filename": ".\\unittests\\test_gherkin_parser.py", "line_number": 17, "column_number": 21, "text": "no newline at end of file", "physical_line": "    out_file.close()"}], ".\\unittests\\test_info.py": [{"code": "D100", "filename": ".\\unittests\\test_info.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.info as info\n"}, {"code": "D103", "filename": ".\\unittests\\test_info.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_test_environment():\n"}, {"code": "T201", "filename": ".\\unittests\\test_info.py", "line_number": 6, "column_number": 5, "text": "print found.", "physical_line": "    print(vars(te))\n"}, {"code": "T201", "filename": ".\\unittests\\test_info.py", "line_number": 8, "column_number": 9, "text": "print found.", "physical_line": "        print(t)\n"}, {"code": "W391", "filename": ".\\unittests\\test_info.py", "line_number": 9, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\test_log.py": [{"code": "D100", "filename": ".\\unittests\\test_log.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 12, "column_number": 1, "text": "Found commented out code", "physical_line": "#current_conf_file = \"../resources/conf/taf_logging_conf_main.yaml\"\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 12, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#current_conf_file = \"../resources/conf/taf_logging_conf_main.yaml\"\n"}, {"code": "E302", "filename": ".\\unittests\\test_log.py", "line_number": 18, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_taf_db_handler_connect():\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 19, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Test the custom TAFDBHandler class connection\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 19, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Test the custom TAFDBHandler class connection\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 45, "column_number": 1, "text": "Found commented out code", "physical_line": "    #test_logger.debug(\"It's supposed to be logging\")\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 45, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #test_logger.debug(\"It's supposed to be logging\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 46, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Smorgas: \", test_logger.handlers)\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 50, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Test the custom Logger class\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 50, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Test the custom Logger class\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 53, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\ttest_taf_logger\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 55, "column_number": 5, "text": "print found.", "physical_line": "    print(\"The config: \", conf)\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 58, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Test test_logger custom attrib: \", test_logger.custom_attrib)\n"}, {"code": "D205", "filename": ".\\unittests\\test_log.py", "line_number": 62, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Check that the config file reader returns a valid logging config dictionary if the source is a\n    file which contains only logging settings.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 62, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check that the config file reader returns a valid logging config dictionary if the source is a\n    file which contains only logging settings.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\unittests\\test_log.py", "line_number": 72, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Check that the config file reader returns a valid logging config dictionary if the source is a\n    file which contains only other settings besides logging relevant ones.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 72, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check that the config file reader returns a valid logging config dictionary if the source is a\n    file which contains only other settings besides logging relevant ones.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 82, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log output can be dispatched to the console by using the StreamHandler class.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 101, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log output can be dispatched to a file by using the FileHandler class.\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 108, "column_number": 5, "text": "print found.", "physical_line": "    print(\"TEST LOGGER:\", dir(test_logger))\n"}, {"code": "D103", "filename": ".\\unittests\\test_log.py", "line_number": 113, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_rotating_file_handler_basic():\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 114, "column_number": 1, "text": "Found commented out code", "physical_line": "    #conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 114, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 115, "column_number": 1, "text": "Found commented out code", "physical_line": "    #lc.dictConfig(conf)\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 115, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #lc.dictConfig(conf)\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 122, "column_number": 5, "text": "print found.", "physical_line": "    print(\"TEST LOGGER:\", dir(test_logger))\n"}, {"code": "E302", "filename": ".\\unittests\\test_log.py", "line_number": 126, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_buffer_log_basic():\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 127, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the buffered log only flushes when the configured level is hit.\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 134, "column_number": 5, "text": "print found.", "physical_line": "    print(\"TEST LOGGER:\", dir(test_logger))\n"}, {"code": "D103", "filename": ".\\unittests\\test_log.py", "line_number": 139, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_rotating_file_handler_basic():\n"}, {"code": "F811", "filename": ".\\unittests\\test_log.py", "line_number": 139, "column_number": 1, "text": "redefinition of unused 'test_rotating_file_handler_basic' from line 113", "physical_line": "def test_rotating_file_handler_basic():\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 140, "column_number": 1, "text": "Found commented out code", "physical_line": "    #conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 140, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}, {"code": "E800", "filename": ".\\unittests\\test_log.py", "line_number": 141, "column_number": 1, "text": "Found commented out code", "physical_line": "    #lc.dictConfig(conf)\n"}, {"code": "E265", "filename": ".\\unittests\\test_log.py", "line_number": 141, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #lc.dictConfig(conf)\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 148, "column_number": 5, "text": "print found.", "physical_line": "    print(\"TEST LOGGER:\", dir(test_logger))\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 154, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log output can be dispatched to an email by using the SMTPHandler class.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\unittests\\test_log.py", "line_number": 168, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Check that the log output can be suppressed by using the NullHandler class.\n    This scenario is to check that when the TAF package is used as a library,\n    the \u2018No handlers could be found for test_logger ...\u2019 messages won't appear.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 178, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log output can be buffered using the MemoryHandler class and flushed when certain criteria are met.\n    \"\"\"\n"}, {"code": "B007", "filename": ".\\unittests\\test_log.py", "line_number": 185, "column_number": 9, "text": "Loop control variable 'x' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for x in range(5):\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 189, "column_number": 9, "text": "print found.", "physical_line": "        print(\"At least we're looping\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_log.py", "line_number": 191, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Zis iz a memory handler\")\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 196, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log messages dispatched to the console are formatted according to the configuration.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 22, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 30, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 38, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 46, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 52, "text": "invalid escape sequence '\\:'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 55, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 61, "text": "invalid escape sequence '\\:'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 64, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 70, "text": "invalid escape sequence '\\,'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "W605", "filename": ".\\unittests\\test_log.py", "line_number": 216, "column_number": 73, "text": "invalid escape sequence '\\d'", "physical_line": "    date_pattern = '[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}\\:[\\d]{2}\\:[\\d]{2}\\,[\\d]{3}'\n"}, {"code": "D103", "filename": ".\\unittests\\test_log.py", "line_number": 229, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_handler():\n"}, {"code": "D103", "filename": ".\\unittests\\test_log.py", "line_number": 237, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_handler_key_error():\n"}, {"code": "PT012", "filename": ".\\unittests\\test_log.py", "line_number": 239, "column_number": 5, "text": "pytest.raises() block should contain a single simple statement", "physical_line": "    with pytest.raises(KeyError):\n"}, {"code": "D103", "filename": ".\\unittests\\test_log.py", "line_number": 244, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_handler_value_error():\n"}, {"code": "PT012", "filename": ".\\unittests\\test_log.py", "line_number": 246, "column_number": 5, "text": "pytest.raises() block should contain a single simple statement", "physical_line": "    with pytest.raises(ValueError):\n"}, {"code": "PT011", "filename": ".\\unittests\\test_log.py", "line_number": 246, "column_number": 10, "text": "pytest.raises(ValueError) is too broad, set the match parameter or use a more specific exception", "physical_line": "    with pytest.raises(ValueError):\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 252, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the structured log messages are written into files according to the configuration.\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 260, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log files are rotated when a certain size is reached\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 260, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check that the log files are rotated when a certain size is reached\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\unittests\\test_log.py", "line_number": 263, "column_number": 5, "text": "local variable 'conf' is assigned to but never used", "physical_line": "    conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}, {"code": "D200", "filename": ".\\unittests\\test_log.py", "line_number": 267, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Check that the log files are rotated after a certain amount of time elapsed\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\test_log.py", "line_number": 267, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Check that the log files are rotated after a certain amount of time elapsed\n    \"\"\"\n"}, {"code": "F841", "filename": ".\\unittests\\test_log.py", "line_number": 270, "column_number": 5, "text": "local variable 'conf' is assigned to but never used", "physical_line": "    conf = log.read_log_config(conf_file_name=current_conf_file, file_type=\"yaml\")\n"}], ".\\unittests\\test_lxc_sync.py": [{"code": "D100", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.ado.hrsync import lxc\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_source_req_ids():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_source_reqs():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 14, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 16, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Reqs: {source_reqs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 19, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_list_req_attachments():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 22, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "B007", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 24, "column_number": 9, "text": "Loop control variable 'src_req_key' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for src_req_key, src_req in source_reqs.items():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 25, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Attachments of {src_req.id} {lxc.list_req_attachments(src_req)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_filter_reqs_by_scope():\n"}, {"code": "E800", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 31, "column_number": 1, "text": "Found commented out code", "physical_line": "    #scope_list = {'nlcm(all)', 'extapps'}\n"}, {"code": "E265", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 31, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #scope_list = {'nlcm(all)', 'extapps'}\n"}, {"code": "E800", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 32, "column_number": 1, "text": "Found commented out code", "physical_line": "    #scope_list = [\"lcm(all)\", \"lcm(anachem)\", \"lcm(ana)\", \"lcm(uv)\", \"lcm(ti)\"]\n"}, {"code": "E265", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 32, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #scope_list = [\"lcm(all)\", \"lcm(anachem)\", \"lcm(ana)\", \"lcm(uv)\", \"lcm(ti)\"]\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 34, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 36, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Reqs: {source_reqs}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 38, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Filtered Reqs: {len(filtered_reqs)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_target_reqs():\n"}, {"code": "E303", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 42, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def test_get_target_reqs():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 45, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Target Reqs: {target_reqs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_update_target_reqs():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 51, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Target Reqs: {target_reqs.keys()}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 53, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 55, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Reqs: {source_reqs}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 56, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Missing reqs: {lxc.update_target_reqs(source_reqs, target_reqs)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 59, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_target_req_local_mock():\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 68, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_src_req_attachments():\n"}, {"code": "E225", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 69, "column_number": 10, "text": "missing whitespace around operator", "physical_line": "    fpath='C:/Users/boros-1/ProjectFiles/automation_framework/mt-anachem-systemtests-framework/unittests/test_resources/tmp/'\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 72, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "B007", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 74, "column_number": 9, "text": "Loop control variable 'src_req_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for src_req_id, src_req in source_reqs.items():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 76, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Req. atts: {req_atts.keys()}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 78, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Trying to save {req_att['name']} of {req_att_id}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 80, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"Buffer : {req_att['data']}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_target_req_attachments():\n"}, {"code": "F841", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 85, "column_number": 5, "text": "local variable 'fpath' is assigned to but never used", "physical_line": "    fpath='C:/Users/boros-1/ProjectFiles/automation_framework/mt-anachem-systemtests-framework/unittests/test_resources/tmp/'\n"}, {"code": "E225", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 85, "column_number": 10, "text": "missing whitespace around operator", "physical_line": "    fpath='C:/Users/boros-1/ProjectFiles/automation_framework/mt-anachem-systemtests-framework/unittests/test_resources/tmp/'\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 88, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 96, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_target_req():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 99, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Target req: {target_req}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 102, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_relations_as_dict():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 105, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 108, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Relations: {relations}\")\n"}, {"code": "D103", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 111, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_target_req_relations():\n"}, {"code": "T201", "filename": ".\\unittests\\test_lxc_sync.py", "line_number": 114, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Source Req IDs: {source_req_ids}\")\n"}], ".\\unittests\\test_squishqtcl.py": [{"code": "D100", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "D103", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_aut():\n"}, {"code": "E800", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 19, "column_number": 1, "text": "Found commented out code", "physical_line": "    # app_ctx = squish.attach_to_aut(aut_name)\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 20, "column_number": 5, "text": "print found.", "physical_line": "    print(app_ctx)\n"}, {"code": "D103", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_drill_down(init_aut):\n"}, {"code": "E302", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 23, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_drill_down(init_aut):\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Flat list: \", flat_list)\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 32, "column_number": 9, "text": "print found.", "physical_line": "        print(key)\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 37, "column_number": 17, "text": "print found.", "physical_line": "                print(\"Nothing changed\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 39, "column_number": 17, "text": "print found.", "physical_line": "                print(\"There's new stuff\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 41, "column_number": 13, "text": "print found.", "physical_line": "            print(\"RuntimeError\", str(re.args))\n"}, {"code": "D103", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_is_interactive():\n"}, {"code": "W292", "filename": ".\\unittests\\test_squishqtcl.py", "line_number": 48, "column_number": 62, "text": "no newline at end of file", "physical_line": "    assert not meta.has_interactive_signal(false_signal_list)"}], ".\\unittests\\test_utils.py": [{"code": "D100", "filename": ".\\unittests\\test_utils.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils\n"}, {"code": "D103", "filename": ".\\unittests\\test_utils.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_gen_uuid():\n"}, {"code": "T201", "filename": ".\\unittests\\test_utils.py", "line_number": 6, "column_number": 5, "text": "print found.", "physical_line": "    print(utils.init.gen_uuid('param_group'))\n"}, {"code": "T201", "filename": ".\\unittests\\test_utils.py", "line_number": 7, "column_number": 5, "text": "print found.", "physical_line": "    print(utils.init.gen_uuid('test_suite'))\n"}, {"code": "T201", "filename": ".\\unittests\\test_utils.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(utils.init.gen_uuid('other'))"}, {"code": "W292", "filename": ".\\unittests\\test_utils.py", "line_number": 8, "column_number": 40, "text": "no newline at end of file", "physical_line": "    print(utils.init.gen_uuid('other'))"}], ".\\unittests\\__init__.py": [{"code": "D205", "filename": ".\\unittests\\__init__.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThis project is using Pytest for unit testing.\nTo get started with the pytest package in PyCharm, follow the official JetBrains help:\nhttps://www.jetbrains.com/help/pycharm/pytest.html\n\nFor some more in-depth info on pytest, try https://docs.pytest.org/en/latest/getting-started.html\nand continue on the same site.\n\n\"\"\"\n"}], ".\\unittests\\bdd\\tests\\conftest.py": [{"code": "D100", "filename": ".\\unittests\\bdd\\tests\\conftest.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "E302", "filename": ".\\unittests\\bdd\\tests\\conftest.py", "line_number": 3, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "@pytest.fixture\n"}, {"code": "PT001", "filename": ".\\unittests\\bdd\\tests\\conftest.py", "line_number": 3, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\bdd\\tests\\conftest.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_resource_paths():\n"}, {"code": "W292", "filename": ".\\unittests\\bdd\\tests\\conftest.py", "line_number": 7, "column_number": 6, "text": "no newline at end of file", "physical_line": "    }"}], ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py": [{"code": "D100", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import os\n"}, {"code": "D103", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_games_feature():\n"}, {"code": "E111", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 8, "column_number": 4, "text": "indentation is not a multiple of 4", "physical_line": "   pass\n"}, {"code": "D103", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def xlsx_exists(file_name):\n"}, {"code": "D103", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_test_xlsx(test_resource_paths):\n"}, {"code": "R504", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 25, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return test_dict\n"}, {"code": "D103", "filename": ".\\unittests\\bdd\\tests\\xlsx_bdd_tests.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def check_xlsx_dict_with_keys(number_of_keys):\n"}], ".\\unittests\\commons\\gui\\test_general_elements.py": [{"code": "D100", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from commons.gui.general.elements import BaseElement, MenuTree, init_gui_element_list, get_translations\n"}, {"code": "F401", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 2, "column_number": 1, "text": "'orchestrator.ctrl.squish' imported but unused", "physical_line": "import orchestrator.ctrl.squish as squish\n"}, {"code": "E303", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 6, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "# TODO: Put this in a fixture\n"}, {"code": "E800", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 7, "column_number": 1, "text": "Found commented out code", "physical_line": "#aut_name = 'ti_terminal'\n"}, {"code": "E265", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 7, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#aut_name = 'ti_terminal'\n"}, {"code": "E800", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 8, "column_number": 1, "text": "Found commented out code", "physical_line": "#app_ctx = squish.start_local_aut(aut_name)\n"}, {"code": "E265", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 8, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#app_ctx = squish.start_local_aut(aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_base_element():\n"}, {"code": "E302", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 11, "column_number": 1, "text": "expected 2 blank lines, found 3", "physical_line": "def test_base_element():\n"}, {"code": "T201", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 13, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Base Elem: \", base_elem.element_definition)\n"}, {"code": "T201", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 14, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Base Elem native object: \", type(base_elem.native_object))\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_menu_tree():\n"}, {"code": "F841", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 18, "column_number": 5, "text": "local variable 'menu_tree' is assigned to but never used", "physical_line": "    menu_tree = MenuTree('FirstGUIElement', '0.1')\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_gui_element_list():\n"}, {"code": "T201", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 25, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Element: \", elem, \" is a \", type(elem_type))\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_translations():\n"}, {"code": "T201", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 30, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Translation dictionary: \", translation_text_dict)"}, {"code": "W292", "filename": ".\\unittests\\commons\\gui\\test_general_elements.py", "line_number": 30, "column_number": 61, "text": "no newline at end of file", "physical_line": "    print(\"Translation dictionary: \", translation_text_dict)"}], ".\\unittests\\commons\\hw\\test_handlers.py": [{"code": "D100", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_exc():\n"}, {"code": "F841", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 13, "column_number": 53, "text": "local variable 'ke' is assigned to but never used", "physical_line": "    with pytest.raises(utils.tafexcept.TafError) as ke:\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_connect_sensor():\n"}, {"code": "E225", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 23, "column_number": 30, "text": "missing whitespace around operator", "physical_line": "    sut_event.event_object_id=2\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_disconnect_sensor():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_connect_pump():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_disconnect_pump():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_connect_burette():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 109, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_disconnect_burette():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 127, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_connect_stirrer():\n"}, {"code": "D103", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hw_event_trigger_disconnect_stirrer():\n"}, {"code": "W292", "filename": ".\\unittests\\commons\\hw\\test_handlers.py", "line_number": 158, "column_number": 71, "text": "no newline at end of file", "physical_line": "    hw_event_trigger(hw_element, sut_event, event_params=event_params)"}], ".\\unittests\\db\\aut_test.py": [{"code": "D100", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db.aut import aut_release_exists, get_aut_id, register_aut_release, next_instance_seq, register_aut_instance, \\\n    get_aut_instance, init_connection\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_aut_release():\n"}, {"code": "E712", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 7, "column_number": 99, "text": "comparison to False should be 'if cond is False:' or 'if not cond:'", "physical_line": "    assert aut_release_exists('1d8d3a1ba084c9acf2f79b5a3a97c4f6476262a39a9a2bcb5642ca9c502f8fc2') == False\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_aut_id():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 9, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_get_aut_id():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 12, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n AUT ID: \", aut_id)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 14, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_register_aut_release():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 14, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_register_aut_release():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_next_instance_seq():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 39, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\nNext instance: \", next_instance_seq(release_info))\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 42, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_register_aut_instance():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 69, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_aut_instance():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 73, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"AUT Instance SHA256: {aut_instance.aut_sha256_id}\")\n"}, {"code": "W292", "filename": ".\\unittests\\db\\aut_test.py", "line_number": 74, "column_number": 108, "text": "no newline at end of file", "physical_line": "    assert aut_instance.aut_sha256_id == '7c5601b713bd3d704e4ab2388e90512568e26eb55e5c8ac32f8bdcade08c722a'"}], ".\\unittests\\db\\test_ado_sync.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import os\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 1, "column_number": 1, "text": "'os' imported but unused", "physical_line": "import os\n"}, {"code": "E266", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 9, "column_number": 1, "text": "too many leading '#' for block comment", "physical_line": "## Test Data\n"}, {"code": "E303", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 19, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "test_case_id_map = {(101, 1008, 3): '39662', (101, 1222, 4): '39663', (101, 1236, 6): '39664', (101, 1237, 7): '39665',\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 77, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_store_ado_ts_ids():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 82, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_store_ado_tc_ids():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 87, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_tc_linked_reqs():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 90, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Full list: {req_list}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_suites_ado():\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 95, "column_number": 1, "text": "Found commented out code", "physical_line": "    # init(\"DEV\", \"AnaChem\")\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 97, "column_number": 1, "text": "Found commented out code", "physical_line": "    # ado_ts_id_map = create_ado_test_suites(taf_test_suites, '39046', '39278')\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 98, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"ado_ts_id_map = {taf_test_suites}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_cases_ado():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 104, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Test case list: {tc_list}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 377, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_suites_ado_only():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 380, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Test Suite list: {ts_list}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 383, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_store_test_points_ado():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 403, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_store_test_points_ado_map():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 412, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_ado_tc_to_ts():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 415, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"TS Map ADO: {ts_map_ado}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 418, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_results_ado():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 421, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Full results: {results}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 762, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_e2e():\n"}, {"code": "E261", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 766, "column_number": 27, "text": "at least two spaces before inline comment", "physical_line": "    test_plan_id = '39839' #TAF Sync Test\n"}, {"code": "E262", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 766, "column_number": 28, "text": "inline comment should start with '# '", "physical_line": "    test_plan_id = '39839' #TAF Sync Test\n"}, {"code": "E261", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 767, "column_number": 33, "text": "at least two spaces before inline comment", "physical_line": "    root_test_suite_id = '40333' #TAF Sync Test\n"}, {"code": "E262", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 767, "column_number": 34, "text": "inline comment should start with '# '", "physical_line": "    root_test_suite_id = '40333' #TAF Sync Test\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 770, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"tc_list: {tc_list}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 772, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"ts_list_out: {ts_list_out}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 775, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"taf_test_suites: {taf_test_suites}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 777, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"ado_test_suites_map: {ado_test_suites_map}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 780, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"ts_to_tcs_map: {ts_to_tcs_map}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 783, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"ts_list: {ts_list_dict}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 786, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"tp_ids: {tp_ids}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 790, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_taf_requirements():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 793, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"key: {trd_key} - value {trd_value}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 796, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sync_req_from_ado():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 804, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Smorgas: {smorgas}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 807, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sync_ado_iterations():\n"}, {"code": "E231", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 810, "column_number": 37, "text": "missing whitespace after ','", "physical_line": "    sync_ado_iterations('DEV', 'taf','AnaChem')\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 813, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_load_reqs_per_sprint():\n"}, {"code": "W292", "filename": ".\\unittests\\db\\test_ado_sync.py", "line_number": 815, "column_number": 78, "text": "no newline at end of file", "physical_line": "    load_reqs_per_sprint(datetime(2022, 10, 1), no_future=True, staging=True)"}], ".\\unittests\\db\\test_conn.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_conn.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import db.conn as tafdb\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_conn.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_pgsql_connection():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_conn.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_mssql_connection():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_conn.py", "line_number": 14, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Test Record: {trec.test_id} - {trec.test_name}\")"}, {"code": "W292", "filename": ".\\unittests\\db\\test_conn.py", "line_number": 14, "column_number": 65, "text": "no newline at end of file", "physical_line": "        print(f\"Test Record: {trec.test_id} - {trec.test_name}\")"}], ".\\unittests\\db\\test_control_schema.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import sqlalchemy\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 4, "column_number": 1, "text": "Found commented out code", "physical_line": "# from db.schemas.control import AUT, AUTReleaseAdo, AUTReleaseBase, AUTInstance\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 6, "column_number": 1, "text": "'orchestrator.dispatch.find_sut_releases' imported but unused", "physical_line": "from orchestrator.dispatch import find_sut_releases\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_aut_release_view():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\tWoohoo\")\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 30, "column_number": 1, "text": "Found commented out code", "physical_line": "    # aut_ids = session.query(my_release_view.aut_id).filter(my_release_view.aut_name == 'ti_simulation').all()\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 42, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Woohoo, poop: \", rel.aut_name, rel.aut_sha256_id)\n"}, {"code": "W391", "filename": ".\\unittests\\db\\test_control_schema.py", "line_number": 43, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\db\\test_meta.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_meta.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db.meta import get_db_meta\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_meta.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_db_meta():\n"}, {"code": "W292", "filename": ".\\unittests\\db\\test_meta.py", "line_number": 5, "column_number": 101, "text": "no newline at end of file", "physical_line": "    get_db_meta(config_name='DEV', db_name='sirius_olap', out_dir='utils/dev_help/gen_code/db/olap')"}], ".\\unittests\\db\\test_mgt_schema.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 7, "column_number": 1, "text": "'sqlalchemy.and_' imported but unused", "physical_line": "from sqlalchemy import and_\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 8, "column_number": 1, "text": "redefinition of unused 'TestSuite' from line 3", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 8, "column_number": 1, "text": "redefinition of unused 'TcSuiteMap' from line 3", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 8, "column_number": 1, "text": "redefinition of unused 'TestCase' from line 3", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 8, "column_number": 1, "text": "redefinition of unused 'TestRun' from line 3", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 8, "column_number": 1, "text": "'db.schemas.management.TcSuiteMap' imported but unused", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 9, "column_number": 1, "text": "redefinition of unused 'sqlalchemy' from line 4", "physical_line": "import sqlalchemy\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 10, "column_number": 1, "text": "redefinition of unused 'declarative_base' from line 5", "physical_line": "from sqlalchemy.ext.declarative import declarative_base\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 11, "column_number": 1, "text": "redefinition of unused 'sessionmaker' from line 6", "physical_line": "from sqlalchemy.orm import sessionmaker\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 13, "column_number": 1, "text": "'orchestrator.run.run_test_suite' imported but unused", "physical_line": "from orchestrator.run import run_test_suite, run_test_case, init_test_session, init_test_run\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 13, "column_number": 1, "text": "'orchestrator.run.run_test_case' imported but unused", "physical_line": "from orchestrator.run import run_test_suite, run_test_case, init_test_session, init_test_run\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 13, "column_number": 1, "text": "'orchestrator.run.init_test_session' imported but unused", "physical_line": "from orchestrator.run import run_test_suite, run_test_case, init_test_session, init_test_run\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 13, "column_number": 1, "text": "'orchestrator.run.init_test_run' imported but unused", "physical_line": "from orchestrator.run import run_test_suite, run_test_case, init_test_session, init_test_run\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_tc_suite_mapping():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 38, "column_number": 9, "text": "print found.", "physical_line": "        print(\"TS: \", ts.mapped_tcs)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_tc_step_mapping():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 44, "column_number": 9, "text": "print found.", "physical_line": "        print(\"TStep: \", ts.mapped_tss)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 46, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_tc_seq():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 46, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_tc_seq():\n"}, {"code": "E225", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 47, "column_number": 11, "text": "missing whitespace around operator", "physical_line": "    new_tc=TestCase()\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 56, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_test_run_seq():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 67, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_step_map():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 70, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Test Step: \", ts)\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 72, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\tVPIM: \", vpim)\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 73, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\t\\tVPI: \", vpim.vpi_details)"}, {"code": "W292", "filename": ".\\unittests\\db\\test_mgt_schema.py", "line_number": 73, "column_number": 49, "text": "no newline at end of file", "physical_line": "            print(\"\\t\\tVPI: \", vpim.vpi_details)"}], ".\\unittests\\db\\test_parameters.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db.parameters import get_param_details, get_param_domain, get_param_group_members\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_param_details():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 7, "column_number": 9, "text": "print found.", "physical_line": "        print(param_item_key, \" - Param detail:\", param_detail)\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Parameter name: \", test_param_one['param_base'].param_name)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_param_domain():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 14, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\n Param STRING: \", test_param_string, \"\\n\\n\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 17, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\n Param FLOAT: \", test_param_float, \"\\n\\n\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 20, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\n Param INT: \", test_param_int, \"\\n\\n\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 23, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n\\n Param INT: \", test_param_enum, \"\\n\\n\")\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 25, "column_number": 1, "text": "Found commented out code", "physical_line": "#        print(param_item_key, \" - Param detail:\", param_detail)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_param_group_members():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 31, "column_number": 9, "text": "print found.", "physical_line": "        print(mem.instance_name)"}, {"code": "W292", "filename": ".\\unittests\\db\\test_parameters.py", "line_number": 31, "column_number": 33, "text": "no newline at end of file", "physical_line": "        print(mem.instance_name)"}], ".\\unittests\\db\\test_parameter_table.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 4, "column_number": 1, "text": "'os' imported but unused", "physical_line": "import os\n"}, {"code": "SIM115", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 6, "column_number": 7, "text": "Use context handler for opening files", "physical_line": "src = open(\"unittests/test_resources/parser_input/parameter_table/31632.json\")\n"}, {"code": "E231", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 10, "column_number": 45, "text": "missing whitespace after ','", "physical_line": "tables = wd.extract_table_from_html(req_desc,\"code\")\n"}, {"code": "E231", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 11, "column_number": 13, "text": "missing whitespace after ','", "physical_line": "param_tables,desc_tables = wd.get_all_param_and_desc_table(tables)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_map_param_table_to_taf_format():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 13, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_map_param_table_to_taf_format():\n"}, {"code": "E231", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 14, "column_number": 60, "text": "missing whitespace after ','", "physical_line": "    map_param_taf = pt.map_param_table_to_taf_format(req_id,param_tables)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_map_desc_table_to_taf_format():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 17, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_map_desc_table_to_taf_format():\n"}, {"code": "E231", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 18, "column_number": 58, "text": "missing whitespace after ','", "physical_line": "    map_desc_taf = pt.map_desc_table_to_taf_format(req_id,desc_tables)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_paramTable_descTable_from_ado_req():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 21, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_taf_paramTable_descTable_from_ado_req():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 26, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sync_param_table_to_db():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 26, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_sync_param_table_to_db():\n"}, {"code": "E203", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 27, "column_number": 28, "text": "whitespace before ','", "physical_line": "    param_value, desc_value , data_synced = pt.sync_param_table_to_db()\n"}, {"code": "W391", "filename": ".\\unittests\\db\\test_parameter_table.py", "line_number": 31, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\db\\test_pjm.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from datetime import datetime\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sprints():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 9, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Sprint: {sprint.item_end_planned}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sprints_after():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 15, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Sprint: {sprint.item_end_planned}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 18, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sprints_after_no_future():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 21, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Sprint: {sprint.item_end_planned}\")"}, {"code": "W292", "filename": ".\\unittests\\db\\test_pjm.py", "line_number": 21, "column_number": 52, "text": "no newline at end of file", "physical_line": "        print(f\"Sprint: {sprint.item_end_planned}\")"}], ".\\unittests\\db\\test_reference_schema.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from time import sleep\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 8, "column_number": 1, "text": "'commons.gui.qt.elements.get_squish_class' imported but unused", "physical_line": "from commons.gui.qt.elements import get_squish_class\n"}, {"code": "F401", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 13, "column_number": 1, "text": "'orchestrator.run.gui_element_list' imported but unused", "physical_line": "from orchestrator.run import init_aut, gui_element_list\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_gui_element():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 38, "column_number": 5, "text": "print found.", "physical_line": "    print(\"GUI Element: \", gui_element)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_gui_element_container():\n"}, {"code": "E711", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 42, "column_number": 91, "text": "comparison to None should be 'if cond is None:'", "physical_line": "    gui_elements = session.query(SutGUIElement).filter(SutGUIElement.container_element_id == None).all()\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 50, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Original CHILD ID: \", gc.external_identifier)\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 60, "column_number": 13, "text": "print found.", "physical_line": "            print(gc.gui_element_name, \" ext ID \", gc.external_identifier)\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 62, "column_number": 13, "text": "print found.", "physical_line": "            print(gc.gui_element_name, \" ext ID DICT TYPE \", pooper[\"type\"])\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 69, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Top dog \", rege.gui_element_name, \" ext ID \", rege.external_identifier)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 73, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_content_item():\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 78, "column_number": 1, "text": "Found commented out code", "physical_line": "    # aut_instance = session.query(AUT).join(AUTInstance, AUT.aut_id == AUTInstance.aut_id).first()\n"}, {"code": "F841", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 83, "column_number": 5, "text": "local variable 'app_ctx' is assigned to but never used", "physical_line": "    app_ctx = squish.start_local_aut(aut_name)\n"}, {"code": "E128", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 87, "column_number": 58, "text": "continuation line under-indented for visual indent", "physical_line": "                                                         SutGUIElement.gui_element_version == '0.1')).one()\n"}, {"code": "E303", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 90, "column_number": 5, "text": "too many blank lines (2)", "physical_line": "    container_def = session.query(SutGUIElement).filter(and_(SutGUIElement.gui_element_id == content_item_def.container_element_id,\n"}, {"code": "E128", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 91, "column_number": 58, "text": "continuation line under-indented for visual indent", "physical_line": "                                                         SutGUIElement.gui_element_version == content_item_def.container_element_version)).one()\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 93, "column_number": 5, "text": "redefinition of unused 'gui_element_list' from line 13", "physical_line": "    from orchestrator.run import gui_element_list\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 98, "column_number": 5, "text": "print found.", "physical_line": "    print(\"DIR ContentItem: \", dir(content_item))\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 103, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Content Item List: \", content_item.item_list)\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 106, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_menu_translations():\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 111, "column_number": 1, "text": "Found commented out code", "physical_line": "    # aut_instance = session.query(AUT).join(AUTInstance, AUT.aut_id == AUTInstance.aut_id).first()\n"}, {"code": "F841", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 116, "column_number": 5, "text": "local variable 'app_ctx' is assigned to but never used", "physical_line": "    app_ctx = squish.start_local_aut(aut_name)\n"}, {"code": "F841", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 118, "column_number": 5, "text": "local variable 'language_code' is assigned to but never used", "physical_line": "    language_code = \"en\"\n"}, {"code": "F811", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 119, "column_number": 5, "text": "redefinition of unused 'gui_element_list' from line 13", "physical_line": "    from orchestrator.run import gui_element_list\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 120, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #for gui_element_key, gui_element in gui_element_list.items():\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 121, "column_number": 1, "text": "Found commented out code", "physical_line": "    #    print(\"!!!!!!!!! \", gui_element_key, \" is \", gui_element.external_identifier)\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 142, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_input_field(gui_element_list[\"OnScreenAlphaInputField\"])\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 142, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_input_field(gui_element_list[\"OnScreenAlphaInputField\"])\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 143, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_cancel_button(gui_element_list[\"OnScreenKeyboardCancel\"])\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 143, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_cancel_button(gui_element_list[\"OnScreenKeyboardCancel\"])\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 144, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_ok_button(gui_element_list[\"OnScreenKeyboardOK\"])\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 144, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_ok_button(gui_element_list[\"OnScreenKeyboardOK\"])\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 145, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_preview_button(gui_element_list[\"OnScreenKeyboardPreview\"])\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 145, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].set_preview_button(gui_element_list[\"OnScreenKeyboardPreview\"])\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 146, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].enter_text_direct(\"Method Stuff 6\")\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 146, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].enter_text_direct(\"Method Stuff 6\")\n"}, {"code": "E800", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 147, "column_number": 1, "text": "Found commented out code", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].ok_button.short_press()\n"}, {"code": "E265", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 147, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #gui_element_list[\"OnScreenAlphaKeyboard\"].ok_button.short_press()\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 170, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\n!!!Screen title: \", gui_element_list[\"TitrationRunningTaskPage\"].get_title())\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 183, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_gui_element():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 185, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Pupak: \", pupak)"}, {"code": "W292", "filename": ".\\unittests\\db\\test_reference_schema.py", "line_number": 185, "column_number": 28, "text": "no newline at end of file", "physical_line": "    print(\"Pupak: \", pupak)"}], ".\\unittests\\db\\test_release_report.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db import conn as tafdb\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_release_scope():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 10, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"TEST STUFF: {stuff}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 11, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"supplemental: {type(stuff.supplemental)}: {stuff.supplemental[0]}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 13, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"rel_req: {type(rel_req)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_modbas_release_report():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_modbas_release_report_exp():\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_release_scope():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 23, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_release_scope():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 27, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Release scope: {release_scope_query}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 29, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tRC: {rel_content.backlog.req_map}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 31, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\t\\tRTW: {req_to_bl_rel.req.related_requirements}\")\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 33, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"\\t\\t\\tReq link: {req_link.req_a_object} -- {req_link.req_b_object}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_req_link_objects():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 41, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"{rl.req_a_object} related to {rl.req_b_object}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_latest_results():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 46, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"PLOP: {plop}\")\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_aggregate_results():\n"}, {"code": "E302", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 48, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_aggregate_results():\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 53, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Hello: {hello}\")"}, {"code": "W292", "filename": ".\\unittests\\db\\test_release_report.py", "line_number": 53, "column_number": 29, "text": "no newline at end of file", "physical_line": "    print(f\"Hello: {hello}\")"}], ".\\unittests\\db\\test_test_schema.py": [{"code": "D100", "filename": ".\\unittests\\db\\test_test_schema.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import sqlalchemy\n"}, {"code": "D103", "filename": ".\\unittests\\db\\test_test_schema.py", "line_number": 27, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_verification_point():\n"}, {"code": "F841", "filename": ".\\unittests\\db\\test_test_schema.py", "line_number": 28, "column_number": 5, "text": "local variable 'vp' is assigned to but never used", "physical_line": "    vp = session.query(VerificationPoint).filter(and_(VerificationPoint.vp_id == 1, VerificationPoint.vp_version == '0.1')).one()\n"}, {"code": "T201", "filename": ".\\unittests\\db\\test_test_schema.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Maybe the import...\")\n"}], ".\\unittests\\gui\\test_paramtree.py": [{"code": "D100", "filename": ".\\unittests\\gui\\test_paramtree.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from gui.parameditor import paramtree\n"}, {"code": "D103", "filename": ".\\unittests\\gui\\test_paramtree.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_paramtree():\n"}, {"code": "W292", "filename": ".\\unittests\\gui\\test_paramtree.py", "line_number": 6, "column_number": 9, "text": "no newline at end of file", "physical_line": "    pass"}], ".\\unittests\\management\\test_release.py": [{"code": "D100", "filename": ".\\unittests\\management\\test_release.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import management.release as mgtrel\n"}, {"code": "D103", "filename": ".\\unittests\\management\\test_release.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_update_release_content():\n"}, {"code": "W292", "filename": ".\\unittests\\management\\test_release.py", "line_number": 5, "column_number": 36, "text": "no newline at end of file", "physical_line": "    mgtrel.update_release_content()"}], ".\\unittests\\orchestrator\\test_dispatch.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 1, "column_number": 1, "text": "'pytest' imported but unused", "physical_line": "import pytest\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 2, "column_number": 1, "text": "'db.schemas.control.TestSession' imported but unused", "physical_line": "from db.schemas.control import TestNode, TestSession, TestHost, AUTInstance\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 2, "column_number": 1, "text": "'db.schemas.control.TestHost' imported but unused", "physical_line": "from db.schemas.control import TestNode, TestSession, TestHost, AUTInstance\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 3, "column_number": 1, "text": "redefinition of unused 'list_nodes' from line 3", "physical_line": "from orchestrator.dispatch import list_nodes, list_nodes, list_free_nodes, find_node, find_sut_releases, \\\n    get_first_available_port, get_node_aut_instance, init_connection, get_suites_in_set\n"}, {"code": "D200", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 8, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 8, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "D200", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 15, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 15, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 22, "column_number": 9, "text": "print found.", "physical_line": "        print(one_node)\n"}, {"code": "D200", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 26, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 26, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Hello\n    \"\"\"\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 33, "column_number": 9, "text": "print found.", "physical_line": "        print(one_node)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_node():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 40, "column_number": 9, "text": "print found.", "physical_line": "        print(node)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 45, "column_number": 1, "text": "too many blank lines (4)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 62, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 65, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 67, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 73, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 73, "column_number": 1, "text": "redefinition of unused 'test_find_sut_release' from line 45", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 73, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 90, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 93, "column_number": 1, "text": "redefinition of unused 'test_get_first_available_port' from line 65", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 95, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 101, "column_number": 1, "text": "redefinition of unused 'test_find_sut_release' from line 73", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 101, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 118, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 121, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 121, "column_number": 1, "text": "redefinition of unused 'test_get_first_available_port' from line 93", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 123, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 129, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 129, "column_number": 1, "text": "redefinition of unused 'test_find_sut_release' from line 101", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 129, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 146, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 149, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 149, "column_number": 1, "text": "redefinition of unused 'test_get_first_available_port' from line 121", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 151, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 157, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 157, "column_number": 1, "text": "redefinition of unused 'test_find_sut_release' from line 129", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 157, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 174, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 177, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 177, "column_number": 1, "text": "redefinition of unused 'test_get_first_available_port' from line 149", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 179, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 185, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_sut_release():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 185, "column_number": 1, "text": "redefinition of unused 'test_find_sut_release' from line 157", "physical_line": "def test_find_sut_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 185, "column_number": 1, "text": "too many blank lines (5)", "physical_line": "def test_find_sut_release():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 202, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\t\\t Release: \", rel.aut_id, rel.aut_name)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 205, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_port():\n"}, {"code": "F811", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 205, "column_number": 1, "text": "redefinition of unused 'test_get_first_available_port' from line 177", "physical_line": "def test_get_first_available_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 207, "column_number": 5, "text": "print found.", "physical_line": "    print(\"First ports: \", first_port)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 210, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_node_aut_instance():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 216, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Test Node: {test_node.udid}\")\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 219, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_suites_in_set():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_dispatch.py", "line_number": 223, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Suite in the set {suite_id} version {suite_version}\")\n"}], ".\\unittests\\orchestrator\\test_lcm.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import time\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 5, "column_number": 1, "text": "'commons.gui.lxc.pages.lxc_launcher_page.LxcLauncher' imported but unused", "physical_line": "from commons.gui.lxc.pages.lxc_launcher_page import LxcLauncher\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 6, "column_number": 1, "text": "'commons.gui.lxc.pages.resource_page.Resourcepage' imported but unused", "physical_line": "from commons.gui.lxc.pages.resource_page import Resourcepage\n"}, {"code": "D101", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestElementDef():\n"}, {"code": "D107", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_start_labx():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 26, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"SUT Instance: {sut_instance.aut_main.aut_name}\")\n"}, {"code": "F841", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 28, "column_number": 5, "text": "local variable 'this_driver' is assigned to but never used", "physical_line": "    this_driver = driver_factory.getWebDriverInstance()\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 32, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_click_labx_link():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 34, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"SUT Instance: {sut_instance.aut_main.aut_name}\")\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 37, "column_number": 1, "text": "Found commented out code", "physical_line": "    #time.sleep(5)\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 37, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #time.sleep(5)\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 46, "column_number": 1, "text": "Found commented out code", "physical_line": "    #res_page_obj = LxcLauncher(dummy_element_def, this_driver)\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 46, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #res_page_obj = LxcLauncher(dummy_element_def, this_driver)\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 47, "column_number": 1, "text": "Found commented out code", "physical_line": "    #res_page_obj.click_resource_app()\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 47, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #res_page_obj.click_resource_app()\n"}, {"code": "W391", "filename": ".\\unittests\\orchestrator\\test_lcm.py", "line_number": 49, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\orchestrator\\test_run.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import and_\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 1, "column_number": 1, "text": "'sqlalchemy.and_' imported but unused", "physical_line": "from sqlalchemy import and_\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 4, "column_number": 1, "text": "'db.schemas.management.TestSuite' imported but unused", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 4, "column_number": 1, "text": "'db.schemas.management.TcSuiteMap' imported but unused", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 4, "column_number": 1, "text": "'db.schemas.management.TestCase' imported but unused", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 4, "column_number": 1, "text": "'db.schemas.management.TestRun' imported but unused", "physical_line": "from db.schemas.management import TestSuite, TcSuiteMap, TestCase, TestRun\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 5, "column_number": 1, "text": "'sqlalchemy' imported but unused", "physical_line": "import sqlalchemy\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 6, "column_number": 1, "text": "'sqlalchemy.ext.declarative.declarative_base' imported but unused", "physical_line": "from sqlalchemy.ext.declarative import declarative_base\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 7, "column_number": 1, "text": "'sqlalchemy.orm.sessionmaker' imported but unused", "physical_line": "from sqlalchemy.orm import sessionmaker\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 11, "column_number": 1, "text": "'db.conn as tafdb' imported but unused", "physical_line": "from db import conn as tafdb\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 14, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_run_test_suite():\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 16, "column_number": 1, "text": "Found commented out code", "physical_line": "    #run_test_suite(43, 0.1)\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 16, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #run_test_suite(43, 0.1)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_run_test_case():\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 21, "column_number": 1, "text": "Found commented out code", "physical_line": "    #test_run_test_case(430, 0.1)\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 21, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #test_run_test_case(430, 0.1)\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_test_session():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_test_run():\n"}, {"code": "E302", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 28, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_init_test_run():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_main():\n"}, {"code": "E302", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 31, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_main():\n"}, {"code": "E800", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 32, "column_number": 1, "text": "Found commented out code", "physical_line": "    #tafdb.init_db('DEV', 'taf')\n"}, {"code": "E265", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 32, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #tafdb.init_db('DEV', 'taf')\n"}, {"code": "W292", "filename": ".\\unittests\\orchestrator\\test_run.py", "line_number": 39, "column_number": 30, "text": "no newline at end of file", "physical_line": "    main(test_node, test_set)"}], ".\\unittests\\orchestrator\\test_vp.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\test_vp.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from orchestrator.vp import clean_mnemonic\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\test_vp.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_clean_mnemonic():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_vp.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(test_dict[test_key])\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\test_vp.py", "line_number": 9, "column_number": 5, "text": "print found.", "physical_line": "    print(clean_mnemonic(test_string))\n"}], ".\\unittests\\orchestrator\\watcher_tests.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from orchestrator.watcher import check_file_type\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_check_file_type():\n"}, {"code": "E302", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 6, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_check_file_type():\n"}, {"code": "E712", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 8, "column_number": 69, "text": "comparison to False should be 'if cond is False:' or 'if not cond:'", "physical_line": "    assert check_file_type(\"..\\\\test_resources\\\\taf_global.config\") == False\n"}, {"code": "E712", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 9, "column_number": 60, "text": "comparison to False should be 'if cond is False:' or 'if not cond:'", "physical_line": "    assert check_file_type(\"..\\\\test_resources\\\\fake.exe\") == False\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_unzip_release():\n"}, {"code": "E303", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 13, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def test_unzip_release():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sha256():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_find_rel_exe():\n"}, {"code": "F841", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 25, "column_number": 5, "text": "local variable 'dir_list' is assigned to but never used", "physical_line": "    dir_list = find_rel_exe(\"C:\\\\Users\\\\boros-1\\\\ProjectFiles\\\\automation_framework\\\\mt-anachem-systemtests-framework\\\\resources\\\\tmp\")\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_release_name():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 30, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\nRelease info: \", release_info)\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 32, "column_number": 5, "text": "print found.", "physical_line": "    print(\"\\nRelease info: \", release_info)"}, {"code": "W292", "filename": ".\\unittests\\orchestrator\\watcher_tests.py", "line_number": 32, "column_number": 44, "text": "no newline at end of file", "physical_line": "    print(\"\\nRelease info: \", release_info)"}], ".\\unittests\\orchestrator\\ctrl\\test_squish.py": [{"code": "D100", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from orchestrator.ctrl.squish import start_local_server, attach_to_aut\n"}, {"code": "F401", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 6, "column_number": 1, "text": "'time' imported but unused", "physical_line": "import time\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_start_local_server():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_next_free_port():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 16, "column_number": 5, "text": "print found.", "physical_line": "    print(next_free_port())\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 19, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_start_local_aut():\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_read_server_config():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 24, "column_number": 5, "text": "print found.", "physical_line": "    print(read_server_config())\n"}, {"code": "D103", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 27, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_attach_to_aut():\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 31, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Polly wants a cracker: \", running_servers[str(4322)].poll())\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 33, "column_number": 9, "text": "print found.", "physical_line": "        print(\"I think it's attached: \", aut_ctx.name, \" : \", aut_ctx.port, \" : \", aut_ctx.isRunning, \" : \", aut_ctx.host)\n"}, {"code": "T201", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Flat mates: \", flat_mates)\n"}, {"code": "W391", "filename": ".\\unittests\\orchestrator\\ctrl\\test_squish.py", "line_number": 41, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\report\\test_blocks.py": [{"code": "D100", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from report.blocks import TestEnvSummary\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_env_summary():\n"}, {"code": "E303", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 5, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def test_env_summary():\n"}, {"code": "F841", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 6, "column_number": 5, "text": "local variable 'tes' is assigned to but never used", "physical_line": "    tes=TestEnvSummary()"}, {"code": "E225", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 6, "column_number": 8, "text": "missing whitespace around operator", "physical_line": "    tes=TestEnvSummary()"}, {"code": "W292", "filename": ".\\unittests\\report\\test_blocks.py", "line_number": 6, "column_number": 25, "text": "no newline at end of file", "physical_line": "    tes=TestEnvSummary()"}], ".\\unittests\\report\\test_graphs.py": [{"code": "D100", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from report import graphs\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 6, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_graph():\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_ci_delta_chart():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 16, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Base64 plot: {base64_plot}\")\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_ci_bar_chart():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 28, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Base64 plot: {base64_plot}\")\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 34, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_ci_stacked_bar_chart():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 40, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Base64 plot: {base64_plot}\")\n"}, {"code": "W292", "filename": ".\\unittests\\report\\test_graphs.py", "line_number": 43, "column_number": 35, "text": "no newline at end of file", "physical_line": "        output_file.write(decoded)"}], ".\\unittests\\report\\test_modbas_reports.py": [{"code": "D100", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from report.publish import modbas_test_report, get_test_env_details, get_ci_quick_stats, get_old_runs_for_branch\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_modbas_test_reports():\n"}, {"code": "E302", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 4, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_modbas_test_reports():\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_env_sum():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 17, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Env sum mgt_release_base: {env_sum.mgt_release_base.release_version}\")\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 18, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Env sum t_host: {env_sum.t_host.host_name}\")\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 19, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Env sum aut_release_instance: {env_sum.aut_release_instance[0].platform}\")\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_ci_quick_stats():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 25, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"The {stats_key} is: {stats_dict}\")\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 27, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Historic key: {hist_run_id}, and value: {hist_run_value}\")\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 28, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"full stuff: {qs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_old_runs_for_branch():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 34, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Old run: {old_run.build_run_number}\")\n"}, {"code": "W391", "filename": ".\\unittests\\report\\test_modbas_reports.py", "line_number": 35, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\report\\test_reporting.py": [{"code": "D100", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import sqlalchemy\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 27, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_session_report():\n"}, {"code": "E800", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 28, "column_number": 1, "text": "Found commented out code", "physical_line": "    #sess_rep = TestSessionReport()\n"}, {"code": "E265", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 28, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #sess_rep = TestSessionReport()\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 32, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Test Run: \", test_run.run_id)\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_run_report():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 40, "column_number": 13, "text": "print found.", "physical_line": "            print(\"Test Run Result: \", res)\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_session_report():\n"}, {"code": "E303", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 45, "column_number": 1, "text": "too many blank lines (4)", "physical_line": "def test_get_session_report():\n"}, {"code": "D103", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_session_items():\n"}, {"code": "T201", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 51, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"The tr_tree is: {tr_tree[70]['test_cases']}\")"}, {"code": "W292", "filename": ".\\unittests\\report\\test_reporting.py", "line_number": 51, "column_number": 58, "text": "no newline at end of file", "physical_line": "    print(f\"The tr_tree is: {tr_tree[70]['test_cases']}\")"}], ".\\unittests\\tdk\\data\\format\\test_xlsx.py": [{"code": "D100", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "D103", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_xlsx():\n"}, {"code": "E800", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 24, "column_number": 1, "text": "Found commented out code", "physical_line": "            # assert len(row) == 3, \"The rows of the worksheet should have 3 columns\"\n"}, {"code": "D103", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_determine_merged_range_values():\n"}, {"code": "D103", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 40, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_write_to_xlsx():\n"}, {"code": "F841", "filename": ".\\unittests\\tdk\\data\\format\\test_xlsx.py", "line_number": 50, "column_number": 5, "text": "local variable 'test_dict_2' is assigned to but never used", "physical_line": "    test_dict_2 = xlsx.parse_xlsx(outfile)\n"}], ".\\unittests\\test_datafactory\\generators.py": [{"code": "D100", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from datafactory.generators import int_range\n"}, {"code": "D103", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_int_range():\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(int_10_200_30)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 9, "column_number": 5, "text": "print found.", "physical_line": "    print(int_neg200_neg20_2)\n"}, {"code": "D103", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 14, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_string_pattern():\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 24, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 29, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 33, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 41, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 45, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 50, "column_number": 9, "text": "print found.", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)"}, {"code": "W292", "filename": ".\\unittests\\test_datafactory\\generators.py", "line_number": 50, "column_number": 46, "text": "no newline at end of file", "physical_line": "        print(\"\\n\\n\\t HERE WE GO: \", str_pat)"}], ".\\unittests\\test_datafactory\\test_interfaces.py": [{"code": "D100", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from datafactory.interfaces import create_dataset\n"}, {"code": "F401", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 3, "column_number": 1, "text": "'typing.List' imported but unused", "physical_line": "from typing import List\n"}, {"code": "F401", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 8, "column_number": 1, "text": "'db.parameters.get_param_details' imported but unused", "physical_line": "from db.parameters import get_param_details, get_param_domain\n"}, {"code": "F401", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 8, "column_number": 1, "text": "'db.parameters.get_param_domain' imported but unused", "physical_line": "from db.parameters import get_param_details, get_param_domain\n"}, {"code": "F811", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 9, "column_number": 1, "text": "redefinition of unused 'ParamInstance' from line 2", "physical_line": "from db.schemas.reference import ParamInstance\n"}, {"code": "E800", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 21, "column_number": 1, "text": "Found commented out code", "physical_line": "#engine = sqlalchemy.create_engine(url, client_encoding='utf8', echo=True)\n"}, {"code": "E265", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 21, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#engine = sqlalchemy.create_engine(url, client_encoding='utf8', echo=True)\n"}, {"code": "D103", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 32, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_dataset():\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 39, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The data for Param ID: \", pkey, \"======================================================================\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 41, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\tShowing the data for instance \", instkey, \"======================================================\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 42, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\t\\tHere goes nothing: \", instpsams)\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 44, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Now doing the param group thing//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 46, "column_number": 9, "text": "print found.", "physical_line": "        print(\"The data for Param ID: \", pkey, \"======================================================================\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 48, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\tShowing the data for instance \", instkey, \"======================================================\")\n"}, {"code": "T201", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 49, "column_number": 13, "text": "print found.", "physical_line": "            print(\"\\t\\tHere goes nothing: \", instpsams)\n"}, {"code": "W391", "filename": ".\\unittests\\test_datafactory\\test_interfaces.py", "line_number": 50, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\test_datafactory\\__init__.py": [{"code": "D104", "filename": ".\\unittests\\test_datafactory\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\unittests\\tools\\test_tafrunner.py": [{"code": "D100", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from tools.tafrunner import __main__ as tr\n"}, {"code": "F401", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 2, "column_number": 1, "text": "'tools.tafrunner.__main__.init_runner' imported but unused", "physical_line": "from tools.tafrunner.__main__ import init_runner\n"}, {"code": "D103", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_tr_options():\n"}, {"code": "E302", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 5, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_tr_options():\n"}, {"code": "D103", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_runner():\n"}, {"code": "W391", "filename": ".\\unittests\\tools\\test_tafrunner.py", "line_number": 12, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\tools\\atm\\test_atm_main.py": [{"code": "D100", "filename": ".\\unittests\\tools\\atm\\test_atm_main.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from datetime import datetime\n"}, {"code": "F401", "filename": ".\\unittests\\tools\\atm\\test_atm_main.py", "line_number": 1, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime\n"}, {"code": "F401", "filename": ".\\unittests\\tools\\atm\\test_atm_main.py", "line_number": 5, "column_number": 1, "text": "'utils.ado.tafsync.requirements.init' imported but unused", "physical_line": "from utils.ado.tafsync.requirements import init\n"}, {"code": "D103", "filename": ".\\unittests\\tools\\atm\\test_atm_main.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_stage_mgt_data():\n"}], ".\\unittests\\utils\\test_parsers.py": [{"code": "D100", "filename": ".\\unittests\\utils\\test_parsers.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.parsers.ado_pipeline_details import parse_pipeline_details\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_parsers.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_pipeline_parser():\n"}, {"code": "W292", "filename": ".\\unittests\\utils\\test_parsers.py", "line_number": 15, "column_number": 93, "text": "no newline at end of file", "physical_line": "    assert \"requestedForID\" in pipeline_deets, \"Key: requestedForID not found in dictionary\""}], ".\\unittests\\utils\\test_sut_resources.py": [{"code": "D100", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sut_res_records():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 12, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"RES: {res_recs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sut_db_record():\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 17, "column_number": 5, "text": "local variable 'db_rec' is assigned to but never used", "physical_line": "    db_rec = sut.get_sut_db_record(sqlitefile_official, 33880320, '8125ca9e-d7a2-4a72-bf09-01f788dd76b8')\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 20, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_burette_blob():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 25, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Burette data: {burette_blob}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_stirrer_blob():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 33, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Stirrer data: {stirrer_blob}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_titrant_blob():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 42, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Titrant data {res_name}: {titrant_blob}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 47, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Titrant data {res_name}: {titrant_blob}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 52, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Titrant data {res_name}: {titrant_blob}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 57, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Titrant data {res_name}: {titrant_blob}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 62, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Titrant data {res_name}: {titrant_blob}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 65, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_meta_blob():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 69, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Meta BLOB: {meta_blob}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 75, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Reparsed: {sut.parse_meta_blob(blob)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 78, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sut_res_meta_records():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 82, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"{meta_recs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_res_full_data():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 87, "column_number": 5, "text": "print found.", "physical_line": "    print(sut.get_res_full_data(sim_root, 34335488, 'e0565348-ebef-4cec-8efc-9af9a72ca4a4'))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_new_res_from_template():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 100, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_burette_eeprom():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 107, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sensor_eeprom_from_template():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 122, "column_number": 1, "text": "Found commented out code", "physical_line": "        # eeprom_attribs['file_name'].unlink()\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 126, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_burette_eeprom_from_template():\n"}, {"code": "E128", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 131, "column_number": 34, "text": "continuation line under-indented for visual indent", "physical_line": "                                 burette_update_data)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 136, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_blank_eeprom():\n"}, {"code": "D205", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 148, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    !!!!! BEWARE: PyCharm somehow caches these binary files, so even though the test is successful, the sensor name\n    is changed in the file, if you open it in PyCharm, it will still display the old name. But if you open it\n    in an external editor (even Notepad++), you'll see the new value. I spent hours trying to find a bug\n    that never existed. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\unittests\\utils\\test_sut_resources.py", "line_number": 148, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    !!!!! BEWARE: PyCharm somehow caches these binary files, so even though the test is successful, the sensor name\n    is changed in the file, if you open it in PyCharm, it will still display the old name. But if you open it\n    in an external editor (even Notepad++), you'll see the new value. I spent hours trying to find a bug\n    that never existed. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    :return:\n    \"\"\"\n"}], ".\\unittests\\utils\\test_tafexcept.py": [{"code": "D100", "filename": ".\\unittests\\utils\\test_tafexcept.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.tafexcept as ta\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\test_tafexcept.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_constructor():\n"}, {"code": "E303", "filename": ".\\unittests\\utils\\test_tafexcept.py", "line_number": 5, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def test_constructor():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\test_tafexcept.py", "line_number": 7, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Traceback:\", new_taf_ex.tb)\n"}], ".\\unittests\\utils\\ado\\test_project_sync.py": [{"code": "D100", "filename": ".\\unittests\\utils\\ado\\test_project_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.ado.tafsync import project as prj\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_project_sync.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_iterations():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_project_sync.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_proj_cal_item_from_ado_iteration():\n"}, {"code": "W391", "filename": ".\\unittests\\utils\\ado\\test_project_sync.py", "line_number": 25, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\utils\\ado\\test_requirement_sync.py": [{"code": "D100", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 10, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_reqs_by_query():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 14, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Reqs Dict: {reqs_dict}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 17, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_req_from_ado_taf():\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 21, "column_number": 5, "text": "local variable 'taf_db_req' is assigned to but never used", "physical_line": "    taf_db_req = taf_req_from_ado_req(reqs_dict[next(iter(reqs_dict))])\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_g5_reqs_updates():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 29, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tGoing through the updates of {req_id}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 31, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\t\\tUpdate: {req_upd.as_dict()}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 34, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_aggregate_g5_req_updates():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 39, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"\\tAggregating the updates of {req_id}\")\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 39, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"\\tAggregating the updates of {req_id}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 43, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"WITH Relations: {req_v['relations']}\")\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 47, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Req version full list: {reqs_version_list.keys()}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 50, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_taf_staged_req_from_ado_req():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 55, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tAggregating the updates of {req_id}\")\n"}, {"code": "B007", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 59, "column_number": 9, "text": "Loop control variable 'req_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for req_id, req_versions in reqs_version_list.items():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 62, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Record: {req_staging_record}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 65, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_insert_req_staging_records():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 70, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tAggregating the updates of {req_id}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 76, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_insert_req_rel_staging_records():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 81, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tAggregating the updates of {req_id}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 87, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_g5_reqs():\n"}, {"code": "B007", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 90, "column_number": 9, "text": "Loop control variable 'g5r_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for g5r_id, g5r in g5_reqs.items():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 91, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"This is it: {type(g5r)} - {dir(g5r.relations)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 94, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_g5_reqs_as_of():\n"}, {"code": "B007", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 97, "column_number": 9, "text": "Loop control variable 'g5r_id' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for g5r_id, g5r in g5_reqs.items():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 98, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"This is it: {type(g5r)} - {dir(g5r.relations)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_reqs_per_sprint():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 105, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Sprint: {sprint_key} and reqs: {sprint_reqs}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 108, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_rels_as_dict():\n"}, {"code": "SIM102", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 112, "column_number": 9, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "        if hasattr(req, 'relations'):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 114, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"dir of relations of {req_id}: {req.relations[0].attributes}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 116, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"Relations of {req_id}: {req_rels}\")"}, {"code": "W292", "filename": ".\\unittests\\utils\\ado\\test_requirement_sync.py", "line_number": 116, "column_number": 60, "text": "no newline at end of file", "physical_line": "                print(f\"Relations of {req_id}: {req_rels}\")"}], ".\\unittests\\utils\\ado\\test_taf_ado_sync.py": [{"code": "D100", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 308, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_ado_test_cases():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 311, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Test case list: {tc_list}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 314, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"{shmoo}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 317, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_ado_test_suites():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 321, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"New TS LIST: {ts_list_out}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 324, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_ado_update_test_point_results():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 331, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_backlog_update_staging():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado\\test_taf_ado_sync.py", "line_number": 336, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_staging_params():\n"}], ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py": [{"code": "D100", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from datetime import datetime\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_reqs_to_check_req_items():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_req_items_count():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_test_items_for_reqs():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 31, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sync_backlog_from_ado():\n"}, {"code": "W292", "filename": ".\\unittests\\utils\\ado_reporting\\test_ado_taf_db_sync.py", "line_number": 33, "column_number": 82, "text": "no newline at end of file", "physical_line": "    ado_db_sync.sync_backlog_from_ado(as_of=datetime(2022, 10, 21), staging=True)"}], ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py": [{"code": "D100", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_format_uid():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 15, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"UID {uid} formatted to {format_uid(uid)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 18, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_connected_sim_devices():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 23, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 26, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_uid():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"New UID: \", new_uid)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_pumps():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 40, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's EMPTY: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 43, "column_number": 9, "text": "print found.", "physical_line": "        print(\"isspace: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 46, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 50, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_pump_exception():\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 55, "column_number": 53, "text": "local variable 'ke' is assigned to but never used", "physical_line": "    with pytest.raises(utils.tafexcept.TafError) as ke:\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 56, "column_number": 9, "text": "local variable 'grpc_response' is assigned to but never used", "physical_line": "        grpc_response = connect_pump(channel, '123456', EConnector.kConnectorCanPortA)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 59, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hex_format():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 63, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 66, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 69, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 76, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 79, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 83, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 86, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_mount_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 89, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 92, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 95, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 99, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_one_pump():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 104, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 108, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_pump():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 111, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 115, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_stirrer_connected():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 118, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 119, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Stirrer connected: \", str(grpc_response.connected))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 123, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_stirrer():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 126, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 130, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_stirrer():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 133, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 137, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_instrument_info():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 140, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Instrument info: \", instr_info)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_instrument_logs():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 147, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Instrument Logs: \", instr_log)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 151, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sensor_connected():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 154, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor status Logs: \", sens_connected.connected)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 158, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sensor_type():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 161, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor type: \", sensor_type['type'])\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 165, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_sensor():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 168, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor connect response error: \", sens_connected.error)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 172, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_sensor():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 175, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor connect response error: \", sens_connected.error)\n"}, {"code": "W391", "filename": ".\\unittests\\utils\\automation_grpc\\instrument\\test_calls.py", "line_number": 177, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py": [{"code": "D100", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.automation_grpc.common.calls import open_grpc_channel\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_terminal_info():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 8, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Terminal info: \", grpc_response)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_terminal_logs():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 15, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Terminal logs: \", grpc_response)\n"}, {"code": "W391", "filename": ".\\unittests\\utils\\automation_grpc\\terminal\\test_calls.py", "line_number": 17, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py": [{"code": "D100", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pytest\n"}, {"code": "F401", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 4, "column_number": 1, "text": "'utils.automation_grpc.v2.calls.set_sensor_error' imported but unused", "physical_line": "from utils.automation_grpc.v2.calls import get_connected_sim_devices, get_first_available_uid, connect_burette, \\\n    mount_burette, disconnect_burette, stirrer_connected, disconnect_stirrer, \\\n    connect_stirrer, format_uid, connect_pump, get_instrument_info, get_instrument_logs, sensor_connected, \\\n    get_sensor_type, connect_sensor, disconnect_sensor, set_sensor_error, disconnect_pump, open_grpc_channel, \\\n    connect_solvent_mgr\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_format_uid():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 15, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"UID {uid} formatted to {format_uid(uid)}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 18, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_connected_sim_devices():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 23, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 26, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_first_available_uid():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 29, "column_number": 5, "text": "print found.", "physical_line": "    print(\"New UID: \", new_uid)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_pumps():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 37, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 40, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's EMPTY: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 43, "column_number": 9, "text": "print found.", "physical_line": "        print(\"isspace: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 46, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 50, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 53, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_pump_exception():\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 55, "column_number": 53, "text": "local variable 'ke' is assigned to but never used", "physical_line": "    with pytest.raises(utils.tafexcept.TafError) as ke:\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 56, "column_number": 9, "text": "local variable 'grpc_response' is assigned to but never used", "physical_line": "        grpc_response = connect_pump(channel, '123456', EConnector.kConnectorCanPortA)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 59, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_hex_format():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 63, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 66, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 69, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"INT: {int_value}, HEX padded {hex_padded}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 76, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 80, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 83, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_dispensix():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 87, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 91, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Device {dev_type} is {dev_items}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_mount_burette():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 93, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_mount_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 96, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 99, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_unmount_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 103, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 106, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_burette():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 109, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 113, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_one_pump():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 118, "column_number": 9, "text": "print found.", "physical_line": "        print(\"It's NOT None: \", grpc_response.error)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 122, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_pump():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 125, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 129, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_stirrer_connected():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 132, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 133, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Stirrer connected: \", str(grpc_response.connected))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 137, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_stirrer():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 140, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_stirrer():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 147, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 151, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_solvent_mgr():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 154, "column_number": 5, "text": "print found.", "physical_line": "    print(\"gRPC Error: \", str(grpc_response.error))\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 158, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_instrument_info():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 161, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Instrument info: \", instr_info)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 165, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_instrument_logs():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 168, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Instrument Logs: \", instr_log)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 172, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_sensor_connected():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 175, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor status Logs: \", sens_connected.connected)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 179, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_sensor_type():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 182, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor type: \", sensor_type['type'])\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 186, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_connect_sensor():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 189, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor connect response error: \", sens_connected.error)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 193, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_disconnect_sensor():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 196, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Sensor connect response error: \", sens_connected.error)\n"}, {"code": "W391", "filename": ".\\unittests\\utils\\automation_grpc\\v2\\test_calls_v2.py", "line_number": 198, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\utils\\parsers\\test_gherkin_parser.py": [{"code": "D100", "filename": ".\\unittests\\utils\\parsers\\test_gherkin_parser.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "\n"}, {"code": "E303", "filename": ".\\unittests\\utils\\parsers\\test_gherkin_parser.py", "line_number": 4, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "file_path = \"unittests/test_resources/gherkin/SRD010_personal_shortcut_for_method.feature\""}, {"code": "W292", "filename": ".\\unittests\\utils\\parsers\\test_gherkin_parser.py", "line_number": 4, "column_number": 91, "text": "no newline at end of file", "physical_line": "file_path = \"unittests/test_resources/gherkin/SRD010_personal_shortcut_for_method.feature\""}], ".\\unittests\\utils\\parsers\\test_pdf_parser.py": [{"code": "D100", "filename": ".\\unittests\\utils\\parsers\\test_pdf_parser.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.parsers.pdf as pdf\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_pdf_parser.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_ready_pdf():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_pdf_parser.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_extract_pdf_meta():\n"}, {"code": "W292", "filename": ".\\unittests\\utils\\parsers\\test_pdf_parser.py", "line_number": 9, "column_number": 86, "text": "no newline at end of file", "physical_line": "    pdf.extract_pdf_meta(\"unittests/test_resources/parser_input/Test_ResultList.pdf\")"}], ".\\unittests\\utils\\parsers\\test_workitem_description.py": [{"code": "D100", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "F401", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 4, "column_number": 1, "text": "'re' imported but unused", "physical_line": "import re\n"}, {"code": "SIM115", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 6, "column_number": 7, "text": "Use context handler for opening files", "physical_line": "src = open(\"unittests/test_resources/parser_input/parameter_table/31632.json\")\n"}, {"code": "SIM115", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 11, "column_number": 21, "text": "Use context handler for opening files", "physical_line": "src_without_table = open(\"unittests/test_resources/parser_input/parameter_table/30325.json\")\n"}, {"code": "SIM115", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 16, "column_number": 36, "text": "Use context handler for opening files", "physical_line": "src_without_param_and_desc_table = open(\"unittests/test_resources/parser_input/parameter_table/28628.json\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_html_content():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 21, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_get_html_content():\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 22, "column_number": 48, "text": "missing whitespace after ','", "physical_line": "    html_content = wd.get_html_content(req_desc,\"code\")\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 24, "column_number": 35, "text": "missing whitespace after ','", "physical_line": "    assert isinstance(html_content,bs4.BeautifulSoup)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 26, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_extract_table_from_html():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 26, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_extract_table_from_html():\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 29, "column_number": 29, "text": "missing whitespace after ','", "physical_line": "    assert isinstance(tables,list)\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 30, "column_number": 63, "text": "missing whitespace after ','", "physical_line": "    tables = wd.extract_table_from_html(req_desc_without_table,\"code\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_header_wise_value():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 33, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_get_header_wise_value():\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 38, "column_number": 44, "text": "missing whitespace after ','", "physical_line": "        assert isinstance(header_wise_value,dict)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 40, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_all_param_and_desc_table():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 40, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_get_all_param_and_desc_table():\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 53, "column_number": 17, "text": "missing whitespace after ','", "physical_line": "    param_tables,desc_tables = wd.get_all_param_and_desc_table(tables)\n"}, {"code": "W292", "filename": ".\\unittests\\utils\\parsers\\test_workitem_description.py", "line_number": 55, "column_number": 33, "text": "no newline at end of file", "physical_line": "    assert len(desc_tables) == 0"}], ".\\unittests\\utils\\requirement_analysis\\test_commons.py": [{"code": "D100", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import re\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 8, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 9, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def regex_list_test_strings():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 12, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return regex_list_test_strings\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 15, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 16, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def chapter_reference_test_strings():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 19, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return chapter_reference_test_strings\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 22, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def link_section_reference_test_strings():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 26, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return link_section_reference_test_strings\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 29, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 30, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def all_reference_test_strings():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 33, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return all_reference_test_strings\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 36, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 37, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_value_bool_samples():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 40, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return param_value_bool_samples\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 43, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_remove_comment_refs():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 75, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Input: {ts} \\nOutput:{matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 78, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_list_matches(regex_list_test_strings):\n"}, {"code": "F841", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 79, "column_number": 5, "text": "local variable 'generic_string_regex' is assigned to but never used", "physical_line": "    generic_string_regex = '(?i)STR[0-9\\*]*\\s+'\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 79, "column_number": 40, "text": "invalid escape sequence '\\*'", "physical_line": "    generic_string_regex = '(?i)STR[0-9\\*]*\\s+'\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 79, "column_number": 44, "text": "invalid escape sequence '\\s'", "physical_line": "    generic_string_regex = '(?i)STR[0-9\\*]*\\s+'\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 80, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "    regex_list = ['(?i)STR\\s?\\+\\s?S',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 80, "column_number": 30, "text": "invalid escape sequence '\\+'", "physical_line": "    regex_list = ['(?i)STR\\s?\\+\\s?S',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 80, "column_number": 32, "text": "invalid escape sequence '\\s'", "physical_line": "    regex_list = ['(?i)STR\\s?\\+\\s?S',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 81, "column_number": 20, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)INT\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 81, "column_number": 30, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)INT\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 82, "column_number": 24, "text": "invalid escape sequence '\\('", "physical_line": "                  '(?i)\\(ro\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 82, "column_number": 28, "text": "invalid escape sequence '\\)'", "physical_line": "                  '(?i)\\(ro\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 30, "text": "invalid escape sequence '\\+'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 32, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 36, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 39, "text": "invalid escape sequence '\\('", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 41, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 44, "text": "invalid escape sequence '\\/'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 46, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 83, "column_number": 53, "text": "invalid escape sequence '\\)'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?S\\s*\\(\\s*\\/\\s*W\\s*\\)',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 84, "column_number": 27, "text": "invalid escape sequence '\\*'", "physical_line": "                  '(?i)STR\\*',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 86, "column_number": 20, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)D\\s*\\/\\s*T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 86, "column_number": 28, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)D\\s*\\/\\s*T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 86, "column_number": 31, "text": "invalid escape sequence '\\/'", "physical_line": "                  '\\s+(?i)D\\s*\\/\\s*T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 86, "column_number": 33, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)D\\s*\\/\\s*T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 86, "column_number": 37, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)D\\s*\\/\\s*T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 87, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)INT\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 87, "column_number": 30, "text": "invalid escape sequence '\\+'", "physical_line": "                  '(?i)INT\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 87, "column_number": 32, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)INT\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 87, "column_number": 36, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)INT\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 87, "column_number": 40, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)INT\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 88, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FOR\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 89, "column_number": 31, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)PARLIST\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 90, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)BUT\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 91, "column_number": 28, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)BOOL\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 94, "column_number": 20, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)LIST\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 94, "column_number": 31, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)LIST\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 95, "column_number": 30, "text": "invalid escape sequence '\\/'", "physical_line": "                  'FZ[0-9]{2}\\/[0-9]{1,2}',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 96, "column_number": 28, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)DATE\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 97, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)EXP\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 99, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)STR\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 100, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 102, "column_number": 27, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 102, "column_number": 30, "text": "invalid escape sequence '\\+'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 102, "column_number": 32, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 102, "column_number": 36, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 102, "column_number": 40, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)FPN\\s?\\+\\s?T\\s*-\\s*FOR',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 103, "column_number": 20, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 103, "column_number": 28, "text": "invalid escape sequence '\\s'", "physical_line": "                  '\\s+(?i)T\\s+',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 104, "column_number": 31, "text": "invalid escape sequence '\\s'", "physical_line": "                  '(?i)UNKNOWN\\s+']\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 107, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches in {retestr.strip()}:  {matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 110, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_chapter_references_from_string(chapter_reference_test_strings):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 115, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Value Error with {pumba}, {ve}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 118, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"'{test_string}' matches {mtch_type} : {' '.join([m[1] for m in match_list])}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 121, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_link_section_references_from_string(link_section_reference_test_strings):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 126, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Value Error with {pumba}, {ve}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 129, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"'{test_string}' matches {mtch_type} : {' '.join([m[1] for m in match_list])}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 132, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_ALL_references_from_string(all_reference_test_strings):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 137, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Value Error with {pumba}, {ve}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 139, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for '{test_string}': {matches}\")\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 140, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #for mtch_type, match_list in matches.items():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 141, "column_number": 1, "text": "Found commented out code", "physical_line": "        #    print(f\"'{test_string}' matches {mtch_type} : {match_list}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 144, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_chapter_ref_patterns():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 147, "column_number": 49, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(Ch[.]?)\\s?([\\d.]*\\d+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 147, "column_number": 54, "text": "invalid escape sequence '\\d'", "physical_line": "        regex_pattern = re.compile('(?i)(Ch[.]?)\\s?([\\d.]*\\d+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 147, "column_number": 59, "text": "invalid escape sequence '\\d'", "physical_line": "        regex_pattern = re.compile('(?i)(Ch[.]?)\\s?([\\d.]*\\d+)')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 149, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 152, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_link_section_ref_patterns():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 155, "column_number": 1, "text": "Found commented out code", "physical_line": "        #regex_pattern = re.compile('(?i)(See\\s*)(\\[\\d*\\])')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 155, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #regex_pattern = re.compile('(?i)(See\\s*)(\\[\\d*\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 156, "column_number": 55, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:(?:See|and)\\s*)(\\[\\d*\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 156, "column_number": 60, "text": "invalid escape sequence '\\['", "physical_line": "        regex_pattern = re.compile('(?i)(?:(?:See|and)\\s*)(\\[\\d*\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 156, "column_number": 62, "text": "invalid escape sequence '\\d'", "physical_line": "        regex_pattern = re.compile('(?i)(?:(?:See|and)\\s*)(\\[\\d*\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 156, "column_number": 65, "text": "invalid escape sequence '\\]'", "physical_line": "        regex_pattern = re.compile('(?i)(?:(?:See|and)\\s*)(\\[\\d*\\])')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 158, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 161, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parameter_ref_patterns():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 164, "column_number": 1, "text": "Found commented out code", "physical_line": "        #regex_pattern = re.compile('(?i)(See\\s*)(\\[\\d*\\])')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 164, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #regex_pattern = re.compile('(?i)(See\\s*)(\\[\\d*\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 165, "column_number": 48, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 165, "column_number": 69, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 165, "column_number": 82, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 165, "column_number": 87, "text": "invalid escape sequence '\\d'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 165, "column_number": 92, "text": "invalid escape sequence '\\d'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 167, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 170, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_req_self_ref_patterns():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 176, "column_number": 1, "text": "Found commented out code", "physical_line": "        #regex_pattern = re.compile('(?i)(?:See)\\s*(above|below)\\s*(within)?\\s*(\\'(.*)\\')?')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 176, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #regex_pattern = re.compile('(?i)(?:See)\\s*(above|below)\\s*(within)?\\s*(\\'(.*)\\')?')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 177, "column_number": 48, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 177, "column_number": 60, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 177, "column_number": 78, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 177, "column_number": 90, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 178, "column_number": 48, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 178, "column_number": 61, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 178, "column_number": 75, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 180, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 183, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_vague_srd_ref_patterns():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 192, "column_number": 49, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(SRD(s)?\\s*([0-9]{3})?)')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 194, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 197, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_format_bool():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 209, "column_number": 43, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i:.*\\s*(Y|Yes|N|No))\\s*.*(?:\\||I).*\\s*(?i:(Y|Yes|N|No))\\s*.*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 209, "column_number": 59, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i:.*\\s*(Y|Yes|N|No))\\s*.*(?:\\||I).*\\s*(?i:(Y|Yes|N|No))\\s*.*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 209, "column_number": 67, "text": "invalid escape sequence '\\|'", "physical_line": "        regex_pattern = re.compile('(?i:.*\\s*(Y|Yes|N|No))\\s*.*(?:\\||I).*\\s*(?i:(Y|Yes|N|No))\\s*.*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 209, "column_number": 74, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i:.*\\s*(Y|Yes|N|No))\\s*.*(?:\\||I).*\\s*(?i:(Y|Yes|N|No))\\s*.*')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 209, "column_number": 94, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i:.*\\s*(Y|Yes|N|No))\\s*.*(?:\\||I).*\\s*(?i:(Y|Yes|N|No))\\s*.*')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 211, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 214, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_format_list():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 226, "column_number": 44, "text": "invalid escape sequence '\\>'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\>)(.*)(?:\\<)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 226, "column_number": 54, "text": "invalid escape sequence '\\<'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\>)(.*)(?:\\<)')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 228, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 231, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_format_datetime():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 54, "text": "invalid escape sequence '\\.'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 64, "text": "invalid escape sequence '\\.'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 74, "text": "invalid escape sequence '\\s'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 82, "text": "invalid escape sequence '\\s'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 93, "text": "invalid escape sequence '\\.'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 237, "column_number": 103, "text": "invalid escape sequence '\\.'", "physical_line": "        date_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 238, "column_number": 63, "text": "invalid escape sequence '\\s'", "physical_line": "        time_regex_pattern = re.compile('(?i)[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 238, "column_number": 71, "text": "invalid escape sequence '\\s'", "physical_line": "        time_regex_pattern = re.compile('(?i)[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 59, "text": "invalid escape sequence '\\.'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 69, "text": "invalid escape sequence '\\.'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 79, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 87, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 98, "text": "invalid escape sequence '\\.'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 108, "text": "invalid escape sequence '\\.'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 118, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 121, "text": "invalid escape sequence '\\/'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 123, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 143, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 239, "column_number": 151, "text": "invalid escape sequence '\\s'", "physical_line": "        date_time_regex_pattern = re.compile('(?i)[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*[\u2013-]?\\s*[0-9]{2}\\.[0-9]{2}\\.[0-9]{4}\\s*\\/\\s*[0-9]{2}:[0-9]{2}\\s*[\u2013-]?\\s*[0-9]{2}:[0-9]{2}')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 243, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: DATE: '{date_matches}' TIME: '{time_matches}' DATETIME: {date_time__matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 246, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_format_fpn():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 277, "column_number": 1, "text": "Found commented out code", "physical_line": "        #easy_dot_regex_patterns = re.compile('(\\s*[+-]?\\s*[0-9\u2019]*[.][0-9]+)\\s(D\\s?[:.])?(\\s*[0-9]*\\s*)?')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 277, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #easy_dot_regex_patterns = re.compile('(\\s*[+-]?\\s*[0-9\u2019]*[.][0-9]+)\\s(D\\s?[:.])?(\\s*[0-9]*\\s*)?')\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 278, "column_number": 1, "text": "Found commented out code", "physical_line": "        #easy_d_regex_patterns = re.compile('^((D\\s?[:.])(\\s*[0-9]*\\s*))?(\\s*[+-]?\\s*[0-9\u2019]*[.]?[0-9]+)')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 278, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #easy_d_regex_patterns = re.compile('^((D\\s?[:.])(\\s*[0-9]*\\s*))?(\\s*[+-]?\\s*[0-9\u2019]*[.]?[0-9]+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 52, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 65, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 74, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 102, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 115, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 279, "column_number": 124, "text": "invalid escape sequence '\\s'", "physical_line": "        easy_d_regex_patterns = re.compile('^(D[:.]\\s*)?([0-9])?\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?\\s*([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*$', flags=re.UNICODE)\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 280, "column_number": 1, "text": "Found commented out code", "physical_line": "        #easy_dot_matches = re.findall(easy_dot_regex_patterns, in_string)\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 280, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #easy_dot_matches = re.findall(easy_dot_regex_patterns, in_string)\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 282, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"Matches for {in_string}: easy_dot_matches: '{easy_dot_matches}', easy_d_matches: {easy_d_matches}\")\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 282, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"Matches for {in_string}: easy_dot_matches: '{easy_dot_matches}', easy_d_matches: {easy_d_matches}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 283, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}:  easy_d_matches: {easy_d_matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 286, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_format_int():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 303, "column_number": 41, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)([0-9]+\\s*[.]{2,4}\\s*[0-9]+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 303, "column_number": 45, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)([0-9]+\\s*[.]{2,4}\\s*[0-9]+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 303, "column_number": 52, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)([0-9]+\\s*[.]{2,4}\\s*[0-9]+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 303, "column_number": 63, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)([0-9]+\\s*[.]{2,4}\\s*[0-9]+)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 303, "column_number": 74, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)([0-9]+\\s*[.]{2,4}\\s*[0-9]+)')\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 304, "column_number": 1, "text": "Found commented out code", "physical_line": "        #tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)[0-9]+\\s*[.]{2,4}\\s*[TBD]')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 304, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)[0-9]+\\s*[.]{2,4}\\s*[TBD]')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 305, "column_number": 45, "text": "invalid escape sequence '\\s'", "physical_line": "        tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*TBD)(?:.*)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 305, "column_number": 49, "text": "invalid escape sequence '\\s'", "physical_line": "        tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*TBD)(?:.*)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 305, "column_number": 56, "text": "invalid escape sequence '\\s'", "physical_line": "        tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*TBD)(?:.*)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 305, "column_number": 73, "text": "invalid escape sequence '\\s'", "physical_line": "        tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*TBD)(?:.*)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 305, "column_number": 84, "text": "invalid escape sequence '\\s'", "physical_line": "        tbd_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*TBD)(?:.*)')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 54, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 61, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 78, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 89, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 92, "text": "invalid escape sequence '\\['", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 102, "text": "invalid escape sequence '\\s'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 306, "column_number": 109, "text": "invalid escape sequence '\\]'", "physical_line": "        brackets_regex_pattern = re.compile('^(?!\\s?D\\s?[:.]\\s*)(?:.*)([0-9]+\\s*[.]{2,4}\\s*\\[[a-z0-9.\\s]{4,}\\])')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 310, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: Basic: '{matches}' TBD: {tbd_matches} brackets_matches: {brackets_matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 313, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_str():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 327, "column_number": 34, "text": "invalid escape sequence '\\/'", "physical_line": "                  'any, except: ^\\/:*?\"|<>[]   L: 0... 60',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 44, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 57, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 61, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 68, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 76, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 333, "column_number": 94, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('(?i)(?:\\s*any\\s*)?((\\s?L\\s?[:.]\\s*[0-9]\\s*([\u2013-]|[.]{2,4})\\s*[0-9]))')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 335, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: '{matches}'\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 338, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_value_range_sel():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 365, "column_number": 48, "text": "invalid escape sequence '\\|'", "physical_line": "        correct_regex_pattern = re.compile('(.*\\|.*)+')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 366, "column_number": 42, "text": "invalid escape sequence '\\s'", "physical_line": "        i_regex_pattern = re.compile('(.*\\s+I\\s+.*)+')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 366, "column_number": 46, "text": "invalid escape sequence '\\s'", "physical_line": "        i_regex_pattern = re.compile('(.*\\s+I\\s+.*)+')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 369, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: Correct: '{matches}', I: {i_matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 373, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_param_format_pattern_but():\n"}, {"code": "E303", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 373, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "def test_param_format_pattern_but():\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 376, "column_number": 38, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^\\s*BUT\\s*$')\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 376, "column_number": 44, "text": "invalid escape sequence '\\s'", "physical_line": "        regex_pattern = re.compile('^\\s*BUT\\s*$')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 378, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Matches for {in_string}: '{matches}'\")"}, {"code": "W292", "filename": ".\\unittests\\utils\\requirement_analysis\\test_commons.py", "line_number": 378, "column_number": 55, "text": "no newline at end of file", "physical_line": "        print(f\"Matches for {in_string}: '{matches}'\")"}], ".\\unittests\\utils\\requirement_analysis\\test_msword.py": [{"code": "D100", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.srd.msword as msw\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 7, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_srd_record():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 20, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"DB Record: {db_record}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 23, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_insert_srd_records():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 25, "column_number": 1, "text": "Found commented out code", "physical_line": "    #in_file = Path('unittests/test_resources/req_analysis/output/SRD011_MenuItemNavigation_V0.02_Released.html')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 25, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #in_file = Path('unittests/test_resources/req_analysis/output/SRD011_MenuItemNavigation_V0.02_Released.html')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 34, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Consolidated struct: {new_req_struct}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 38, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_to_html():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_bulk_to_html():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 56, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_bulk_to_html_remote_dir():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_srd_structure():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 70, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"SRD Struct: {doc_struct}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 73, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_consolidate_srd_structure():\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 74, "column_number": 1, "text": "Found commented out code", "physical_line": "    #in_file = Path('unittests/test_resources/req_analysis/output/SRD050_ResourcesRules_V0.03_Released.html')\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 74, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #in_file = Path('unittests/test_resources/req_analysis/output/SRD050_ResourcesRules_V0.03_Released.html')\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 84, "column_number": 5, "text": "print found.", "physical_line": "    print(new_req_struct)\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 87, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_bulk_srd_insert():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 101, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_e2e():\n"}, {"code": "B007", "filename": ".\\unittests\\utils\\requirement_analysis\\test_msword.py", "line_number": 108, "column_number": 9, "text": "Loop control variable 'docx_key' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for docx_key, html_details in html_list.items():\n"}], ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py": [{"code": "D100", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging\n"}, {"code": "F401", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 2, "column_number": 1, "text": "'re' imported but unused", "physical_line": "import re\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 14, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_value_range_mixed_patterns():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 18, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return patterns\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 21, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def basic_valid_numeric_patterns():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 25, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return patterns\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 27, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "@pytest.fixture\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 27, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_names():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 31, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return param_names\n"}, {"code": "PT001", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 34, "column_number": 2, "text": "use @pytest.fixture() over @pytest.fixture", "physical_line": "@pytest.fixture\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_formats():\n"}, {"code": "R504", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 38, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return param_formats\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_is_numeric_range(basic_valid_numeric_patterns):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 44, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Tested \\\"{patt.strip()}\\\" and it is a numeric range\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 46, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Tested \\\"{patt.strip()}\\\" and it is NOT a numeric range\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_split_numeric_range(basic_valid_numeric_patterns):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 53, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Tested \\\"{patt}\\\" and it is a numeric range with parts: {patt_pts}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 55, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Tested \\\"{patt}\\\" and it is NOT a numeric range {patt_pts}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 58, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_transform_name(param_names):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 61, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Normalized version of {pn.strip()}: {pn_norm}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_init_param_analysis():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 67, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Param format dict: {pfd}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 70, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_param_format_stemmer():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 76, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"CPF Parts of '{cpf}': {cpf_parts}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 79, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_param_value_bool_samples(param_value_bool_samples):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 84, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Value Error with {pumba}, {ve}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 86, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Matches for '{test_string}': {matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 89, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_param_format_to_type_matches(param_formats):\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 93, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Param formats from {pf}: {pf_norm}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 96, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_param_domain_to_type_matches(param_value_range_mixed_patterns):\n"}, {"code": "E800", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 101, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"{sample_string} \\tMatches: {[k for k, m in matches.items() if len(m) > 0]}\")\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 102, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"\\tMatches for {sample_string} raw {matches}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 105, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_determine_param_taf_type():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 114, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"New type: {new_type}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_param_candidates():\n"}, {"code": "E128", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 120, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    format='%(asctime)s - %(module)s.%(funcName)s -%(levelname)s: %(message)s',\n"}, {"code": "E128", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 121, "column_number": 21, "text": "continuation line under-indented for visual indent", "physical_line": "                    datefmt=\"%Y %b %d. %H:%M:%S\")\n"}, {"code": "E265", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 128, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #for n in range(1000):\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 135, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_create_param_link_candidates():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 139, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_identify_param_references():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 143, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_get_condition_tags_from_string():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 157, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_load_raw_param_conditions():\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 161, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_str_value_range():\n"}, {"code": "E201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 162, "column_number": 23, "text": "whitespace after '['", "physical_line": "    sample_strings = [ 'Any L: 1 - 30',\n"}, {"code": "W605", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 168, "column_number": 39, "text": "invalid escape sequence '\\/'", "physical_line": "                       'any, except: ^\\/:*?\"|<>[]   L: 0... 60',\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 181, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_parse_numeric_value_range():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_param_analysis.py", "line_number": 235, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"IN: {sample_string}: \\n\\tout: {num_range_dict}\")\n"}], ".\\unittests\\utils\\requirement_analysis\\test_reqs_ado.py": [{"code": "D100", "filename": ".\\unittests\\utils\\requirement_analysis\\test_reqs_ado.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import utils.requirement_analysis.reqs_ado as pe\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_reqs_ado.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_extract_all_from_ado():\n"}, {"code": "E231", "filename": ".\\unittests\\utils\\requirement_analysis\\test_reqs_ado.py", "line_number": 9, "column_number": 35, "text": "missing whitespace after ','", "physical_line": "    assert isinstance(all_ado_reqs,dict)\n"}, {"code": "W391", "filename": ".\\unittests\\utils\\requirement_analysis\\test_reqs_ado.py", "line_number": 13, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\unittests\\utils\\requirement_analysis\\test_req_description.py": [{"code": "D100", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from db.schemas.management import Requirement\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 5, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_split_req_to_items():\n"}, {"code": "E302", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 5, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def test_split_req_to_items():\n"}, {"code": "T201", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 10, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Requirement items: {[req_item.req_snippet for req_item in req_items]}\")\n"}, {"code": "D103", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 13, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def test_itemize_all_reqs():\n"}, {"code": "W292", "filename": ".\\unittests\\utils\\requirement_analysis\\test_req_description.py", "line_number": 14, "column_number": 23, "text": "no newline at end of file", "physical_line": "    itemize_all_reqs()"}], ".\\utils\\config.py": [{"code": "D205", "filename": ".\\utils\\config.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe config module helps with handling configuration files and credentials.\nIt is possible to read configuration parameters from json, yaml or toml formats, but\nto be able to use those interchangeably, the structure must be the same.\ni.e. Use arrays/objects/scalars (of the same type) for the same configuration item in all different formats.\n\"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 27, "column_number": 1, "text": "Found commented out code", "physical_line": "# \"getLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not. \"\n"}, {"code": "CCR001", "filename": ".\\utils\\config.py", "line_number": 35, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def read_config_file(conf_file_name=\"resources/conf/taf_config_list.json\", file_type=\"json\"):\n"}, {"code": "E302", "filename": ".\\utils\\config.py", "line_number": 35, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def read_config_file(conf_file_name=\"resources/conf/taf_config_list.json\", file_type=\"json\"):\n"}, {"code": "D205", "filename": ".\\utils\\config.py", "line_number": 36, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Read and parse a configuration file in JSON, TOML or YAML format.\n    :param conf_file_name: The path to a configuration file (yaml|json|toml) including the file name.\n    :type conf_file_name: str\n    :param file_type: The configuration file format; toml, yaml or json.\n    :type file_type: str\n    :return: If successful: the contents of the configuration file in a dictionary, or None if it failed.\n    :rtype: dict or None\n    \"\"\"\n"}, {"code": "SIM115", "filename": ".\\utils\\config.py", "line_number": 52, "column_number": 21, "text": "Use context handler for opening files", "physical_line": "        conf_file = open(conf_file_name, 'r')\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 54, "column_number": 9, "text": "print found.", "physical_line": "        print(\"IOError HAHO: \", ioe.strerror, \" - \", ioe.filename)\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 69, "column_number": 9, "text": "print found.", "physical_line": "        print(\"JSONDecodeError while parsing\", jse.msg, \" - \", jse.pos)\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 71, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unknown exception: \", exc.args)\n"}, {"code": "D103", "filename": ".\\utils\\config.py", "line_number": 78, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def read_env_var(var_name):\n"}, {"code": "CCR001", "filename": ".\\utils\\config.py", "line_number": 89, "column_number": 1, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "def merge_dicts(dict_left, dict_right):\n"}, {"code": "D103", "filename": ".\\utils\\config.py", "line_number": 89, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def merge_dicts(dict_left, dict_right):\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 96, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(\"Key: \", k, \" Value: \", v)\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 96, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(\"Key: \", k, \" Value: \", v)\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 98, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(\"So we do have \", k ,\" already\")\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 98, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(\"So we do have \", k ,\" already\")\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 99, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(k, \" in my_dict: \", merged[k], \" as a \", type(merged[k]))\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 99, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(k, \" in my_dict: \", merged[k], \" as a \", type(merged[k]))\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 100, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(k, \" in iterator: \", v, \" as a \", type(v))\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 100, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(k, \" in iterator: \", v, \" as a \", type(v))\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 102, "column_number": 1, "text": "Found commented out code", "physical_line": "                #print(\"And the values aren't the same\")\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 102, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #print(\"And the values aren't the same\")\n"}, {"code": "E225", "filename": ".\\utils\\config.py", "line_number": 104, "column_number": 30, "text": "missing whitespace around operator", "physical_line": "                    merged[k]=merge_dicts(merged[k], v)\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 109, "column_number": 1, "text": "Found commented out code", "physical_line": "                #print(\"New value in my_dict! \", merged)\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 109, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #print(\"New value in my_dict! \", merged)\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 112, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(\"New key in my_dict! \", merged)\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 112, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(\"New key in my_dict! \", merged)\n"}, {"code": "E800", "filename": ".\\utils\\config.py", "line_number": 113, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(merged)\n"}, {"code": "E265", "filename": ".\\utils\\config.py", "line_number": 113, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(merged)\n"}, {"code": "D103", "filename": ".\\utils\\config.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def merge_conf(global_conf, local_conf, keeper=\"local\"):\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 129, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Unknown merge operation type: \", keeper )\n"}, {"code": "E202", "filename": ".\\utils\\config.py", "line_number": 129, "column_number": 55, "text": "whitespace before ')'", "physical_line": "        print(\"Unknown merge operation type: \", keeper )\n"}, {"code": "R504", "filename": ".\\utils\\config.py", "line_number": 130, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return conf\n"}, {"code": "D103", "filename": ".\\utils\\config.py", "line_number": 133, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_config_by_name(config_name=None):\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 142, "column_number": 9, "text": "print found.", "physical_line": "        print(taf_conf_dir)\n"}, {"code": "R503", "filename": ".\\utils\\config.py", "line_number": 142, "column_number": 9, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "        print(taf_conf_dir)\n"}, {"code": "T201", "filename": ".\\utils\\config.py", "line_number": 147, "column_number": 13, "text": "print found.", "physical_line": "            print(os.path.dirname(sys.executable))\n"}, {"code": "R503", "filename": ".\\utils\\config.py", "line_number": 147, "column_number": 13, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "            print(os.path.dirname(sys.executable))\n"}, {"code": "R503", "filename": ".\\utils\\config.py", "line_number": 153, "column_number": 9, "text": "missing explicit return at the end of function able to return non-None value.", "physical_line": "        if config_name in config_list:\n"}, {"code": "D103", "filename": ".\\utils\\config.py", "line_number": 157, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init():\n"}, {"code": "F841", "filename": ".\\utils\\config.py", "line_number": 159, "column_number": 5, "text": "local variable 'taf_root_path' is assigned to but never used", "physical_line": "    taf_root_path = read_env_var('TAF_ROOT')\n"}, {"code": "B007", "filename": ".\\utils\\config.py", "line_number": 164, "column_number": 20, "text": "Loop control variable 'conf_details' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for conf_name, conf_details in conf_file_list.items():\n"}, {"code": "W391", "filename": ".\\utils\\config.py", "line_number": 170, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\info.py": [{"code": "D100", "filename": ".\\utils\\info.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import os\n"}, {"code": "D101", "filename": ".\\utils\\info.py", "line_number": 11, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TestEnvironment(dict):\n"}, {"code": "D107", "filename": ".\\utils\\info.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "W391", "filename": ".\\utils\\info.py", "line_number": 17, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\init.py": [{"code": "D100", "filename": ".\\utils\\init.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import uuid\n"}, {"code": "D103", "filename": ".\\utils\\init.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_uuid(what_for):\n"}, {"code": "R505", "filename": ".\\utils\\init.py", "line_number": 6, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if what_for in ('test_suite', 'test_session'):\n"}], ".\\utils\\janitor.py": [{"code": "D200", "filename": ".\\utils\\janitor.py", "line_number": 1, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "\"\"\"\nThis module contains generic functions that help facilitate the TAF functionalities.\n\"\"\"\n"}, {"code": "D103", "filename": ".\\utils\\janitor.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_aut_arch(aut_exe):\n"}, {"code": "R504", "filename": ".\\utils\\janitor.py", "line_number": 21, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return exe_platform\n"}, {"code": "D103", "filename": ".\\utils\\janitor.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def install_release_from_dump(in_dir, out_dir, release_info):\n"}, {"code": "T201", "filename": ".\\utils\\janitor.py", "line_number": 30, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Install Release From Dump in : \", release_info)\n"}, {"code": "ECE001", "filename": ".\\utils\\janitor.py", "line_number": 32, "column_number": 5, "text": "Expression is too complex (9 > 7)", "physical_line": "    install_dir = out_dir + \"/\" + release_info['release_type'] + \"/\" + release_info['aut_name'] + \"/\" + \\\n                  release_info['version'] + \"/build_\" + release_info['sha256sum']\n"}, {"code": "E127", "filename": ".\\utils\\janitor.py", "line_number": 33, "column_number": 19, "text": "continuation line over-indented for visual indent", "physical_line": "    install_dir = out_dir + \"/\" + release_info['release_type'] + \"/\" + release_info['aut_name'] + \"/\" + \\\n                  release_info['version'] + \"/build_\" + release_info['sha256sum']\n"}, {"code": "D103", "filename": ".\\utils\\janitor.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def install_sut(in_dir, out_dir, release_info):\n"}, {"code": "D103", "filename": ".\\utils\\janitor.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def archive_sut(sut_path, archive_path):\n"}, {"code": "E800", "filename": ".\\utils\\janitor.py", "line_number": 74, "column_number": 1, "text": "Found commented out code", "physical_line": "    #shutil.copytree(str(sut_path), str(archive_path), dirs_exist_ok=True)\n"}, {"code": "E265", "filename": ".\\utils\\janitor.py", "line_number": 74, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #shutil.copytree(str(sut_path), str(archive_path), dirs_exist_ok=True)\n"}, {"code": "E800", "filename": ".\\utils\\janitor.py", "line_number": 75, "column_number": 1, "text": "Found commented out code", "physical_line": "    #shutil.rmtree(str(sut_path))\n"}, {"code": "E265", "filename": ".\\utils\\janitor.py", "line_number": 75, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #shutil.rmtree(str(sut_path))\n"}, {"code": "W391", "filename": ".\\utils\\janitor.py", "line_number": 82, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\log.py": [{"code": "D205", "filename": ".\\utils\\log.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nProvides logging functionality based on the standard Python package 'logging', customized for G5 TAF.\nhttps://docs.python.org/3/library/logging.html\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 8, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 11, "column_number": 1, "text": "'commons.context.get_context' imported but unused", "physical_line": "from commons.context import get_run_mode, get_context, get_test_context, get_vp_results\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 11, "column_number": 1, "text": "'commons.context.get_test_context' imported but unused", "physical_line": "from commons.context import get_run_mode, get_context, get_test_context, get_vp_results\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 13, "column_number": 1, "text": "'db.schemas.management.TestResult' imported but unused", "physical_line": "from db.schemas.management import TestResult\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 16, "column_number": 1, "text": "'logging.handlers' imported but unused", "physical_line": "from logging import handlers\n"}, {"code": "F401", "filename": ".\\utils\\log.py", "line_number": 20, "column_number": 1, "text": "'utils.info' imported but unused", "physical_line": "import utils.info as info\n"}, {"code": "D103", "filename": ".\\utils\\log.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def filter_log_config(full_config):\n"}, {"code": "T201", "filename": ".\\utils\\log.py", "line_number": 30, "column_number": 5, "text": "print found.", "physical_line": "    print(\"FULL CONFIG: \", full_config)\n"}, {"code": "R504", "filename": ".\\utils\\log.py", "line_number": 40, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return log_conf\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 45, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The read_log_config() function relies on the utils.config.read_config_file() to parse the\n    logging configuration dictionary defined in yaml or JSON format.\n\n    Either a dedicated log configuration, or a config file with a 'logging' key is expected.\n    If a 'log_context' key is also present, the log_context will be initialized with that for default values,\n    but any of those attributes may be overwritten when the TAF log module is initialized. The 'log_context'\n    attribute cannot be passed in dedicated logging configuration files.\n    Parameters\n    ----------\n    conf_file_name : The log config file, or a config file with a 'logging' section\n    file_type : Yaml or JSON formats are supported\n\n    Returns\n    -------\n    A dictionary which can be used by the logging.config.dictConfig() method to set the logging configuration.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 45, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The read_log_config() function relies on the utils.config.read_config_file() to parse the\n    logging configuration dictionary defined in yaml or JSON format.\n\n    Either a dedicated log configuration, or a config file with a 'logging' key is expected.\n    If a 'log_context' key is also present, the log_context will be initialized with that for default values,\n    but any of those attributes may be overwritten when the TAF log module is initialized. The 'log_context'\n    attribute cannot be passed in dedicated logging configuration files.\n    Parameters\n    ----------\n    conf_file_name : The log config file, or a config file with a 'logging' section\n    file_type : Yaml or JSON formats are supported\n\n    Returns\n    -------\n    A dictionary which can be used by the logging.config.dictConfig() method to set the logging configuration.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\log.py", "line_number": 45, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The read_log_config() function relies on the utils.config.read_config_file() to parse the\n    logging configuration dictionary defined in yaml or JSON format.\n\n    Either a dedicated log configuration, or a config file with a 'logging' key is expected.\n    If a 'log_context' key is also present, the log_context will be initialized with that for default values,\n    but any of those attributes may be overwritten when the TAF log module is initialized. The 'log_context'\n    attribute cannot be passed in dedicated logging configuration files.\n    Parameters\n    ----------\n    conf_file_name : The log config file, or a config file with a 'logging' section\n    file_type : Yaml or JSON formats are supported\n\n    Returns\n    -------\n    A dictionary which can be used by the logging.config.dictConfig() method to set the logging configuration.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\utils\\log.py", "line_number": 45, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The read_log_config() function relies on the utils.config.read_config_file() to parse the\n    logging configuration dictionary defined in yaml or JSON format.\n\n    Either a dedicated log configuration, or a config file with a 'logging' key is expected.\n    If a 'log_context' key is also present, the log_context will be initialized with that for default values,\n    but any of those attributes may be overwritten when the TAF log module is initialized. The 'log_context'\n    attribute cannot be passed in dedicated logging configuration files.\n    Parameters\n    ----------\n    conf_file_name : The log config file, or a config file with a 'logging' section\n    file_type : Yaml or JSON formats are supported\n\n    Returns\n    -------\n    A dictionary which can be used by the logging.config.dictConfig() method to set the logging configuration.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\log.py", "line_number": 64, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return log_conf\n"}, {"code": "D401", "filename": ".\\utils\\log.py", "line_number": 69, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The set_log_config() function just calls the logging.config.dictConfig() method.\n\n    Parameters\n    ----------\n    conf_dict : A dictionary which can be used by the logging.dictConfig() method to set the logging configuration.\n    The read_log_config() function returns such a data structure.\n\n    Returns\n    -------\n    No return value.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\utils\\log.py", "line_number": 69, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The set_log_config() function just calls the logging.config.dictConfig() method.\n\n    Parameters\n    ----------\n    conf_dict : A dictionary which can be used by the logging.dictConfig() method to set the logging configuration.\n    The read_log_config() function returns such a data structure.\n\n    Returns\n    -------\n    No return value.\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\utils\\log.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_log_level(log_level='INFO', logger_name='root'):\n"}, {"code": "D101", "filename": ".\\utils\\log.py", "line_number": 90, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class JSONLog(object):\n"}, {"code": "SIM120", "filename": ".\\utils\\log.py", "line_number": 90, "column_number": 1, "text": "Use 'class JSONLog:' instead of 'class JSONLog(object):'", "physical_line": "class JSONLog(object):\n"}, {"code": "D107", "filename": ".\\utils\\log.py", "line_number": 92, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, **kwargs):\n"}, {"code": "D105", "filename": ".\\utils\\log.py", "line_number": 95, "column_number": 1, "text": "Missing docstring in magic method", "physical_line": "    def __str__(self):\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 105, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The QtHandler class facilitates sending log messages to a Qt GUI by implementing a signaller and\n    connecting it to a slot function, which can be configured in the log configuration dictionary.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 105, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The QtHandler class facilitates sending log messages to a Qt GUI by implementing a signaller and\n    connecting it to a slot function, which can be configured in the log configuration dictionary.\n    \"\"\"\n"}, {"code": "D107", "filename": ".\\utils\\log.py", "line_number": 110, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, slotfunc, *args, **kwargs):\n"}, {"code": "D106", "filename": ".\\utils\\log.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public nested class", "physical_line": "    class Signaller(QtCore.QObject):\n"}, {"code": "H601", "filename": ".\\utils\\log.py", "line_number": 117, "column_number": 5, "text": "class has low (0.00%) cohesion", "physical_line": "    class Signaller(QtCore.QObject):\n"}, {"code": "D102", "filename": ".\\utils\\log.py", "line_number": 120, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def emit(self, record):\n"}, {"code": "H601", "filename": ".\\utils\\log.py", "line_number": 125, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TAFRotatingFileHandler(logging.handlers.RotatingFileHandler):\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 126, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\"\n    The TAFRotatingFileHandler class is a custom handler to allow users to define file names with\n    placeholders in them, the same way the log formatter strings are defined.\n    It's a subclass of logging.handlers.RotatingFileHandler, so for more detailed documentation, please\n    refer to the official Python documentation.\n    https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler\n    The TAFRotatingFileHandler only supports the string.format() style, which means that the placeholders\n    must be enclosed in {curly braces}.\n    More information on the python string formatter:\n    https://docs.python.org/3.8/library/string.html#formatstrings\n    \"\"\"\n"}, {"code": "D300", "filename": ".\\utils\\log.py", "line_number": 126, "column_number": 1, "text": "Use \"\"\"triple double quotes\"\"\"", "physical_line": "    \"\"\"\"\n    The TAFRotatingFileHandler class is a custom handler to allow users to define file names with\n    placeholders in them, the same way the log formatter strings are defined.\n    It's a subclass of logging.handlers.RotatingFileHandler, so for more detailed documentation, please\n    refer to the official Python documentation.\n    https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler\n    The TAFRotatingFileHandler only supports the string.format() style, which means that the placeholders\n    must be enclosed in {curly braces}.\n    More information on the python string formatter:\n    https://docs.python.org/3.8/library/string.html#formatstrings\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 126, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\"\n    The TAFRotatingFileHandler class is a custom handler to allow users to define file names with\n    placeholders in them, the same way the log formatter strings are defined.\n    It's a subclass of logging.handlers.RotatingFileHandler, so for more detailed documentation, please\n    refer to the official Python documentation.\n    https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler\n    The TAFRotatingFileHandler only supports the string.format() style, which means that the placeholders\n    must be enclosed in {curly braces}.\n    More information on the python string formatter:\n    https://docs.python.org/3.8/library/string.html#formatstrings\n    \"\"\"\n"}, {"code": "CFQ002", "filename": ".\\utils\\log.py", "line_number": 138, "column_number": 5, "text": "Function \"__init__\" has 7 arguments that exceeds max allowed 6", "physical_line": "    def __init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=True):\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 139, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n\n        Parameters ----------\n        filename : This is the only parameter that is different from the super class. This parameter comes from the\n        logging configuration, so it has to be a string (<handlerName>.filename: attribute) with optional placeholders.\n        delay :  If delay is true, then file opening is deferred until the first call to emit(). This setting can be\n        useful if more details need to be included in the filename, some of which might not be available at startup.\n        Hence the default value of 'True', unlike in the superclass.\n\n        From this point, all parameters are standard, so for more detailed documentation, please\n        refer to the official Python documentation.\n\n        mode : The standard file opening mode, write (w) or append (a). No read(r), that makes no sense here.\n        maxBytes : The maximum size of the file\n        backupCount : When the number of archived files reaches this number, the extra ones are deleted.\n        encoding : The text encoding (e.g. utf8)\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 139, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n\n        Parameters ----------\n        filename : This is the only parameter that is different from the super class. This parameter comes from the\n        logging configuration, so it has to be a string (<handlerName>.filename: attribute) with optional placeholders.\n        delay :  If delay is true, then file opening is deferred until the first call to emit(). This setting can be\n        useful if more details need to be included in the filename, some of which might not be available at startup.\n        Hence the default value of 'True', unlike in the superclass.\n\n        From this point, all parameters are standard, so for more detailed documentation, please\n        refer to the official Python documentation.\n\n        mode : The standard file opening mode, write (w) or append (a). No read(r), that makes no sense here.\n        maxBytes : The maximum size of the file\n        backupCount : When the number of archived files reaches this number, the extra ones are deleted.\n        encoding : The text encoding (e.g. utf8)\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 162, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        This private method is used to create a valid filename out of the format string passed to the __init__ method.\n        For filename formatting details see https://www.python.org/dev/peps/pep-3101/,\n        https://docs.python.org/3/library/string.html#formatstrings and\n        https://docs.python.org/3/library/stdtypes.html?highlight=format_map#str.format_map\n\n        Parameters\n        ----------\n        filename : A string.format() compatible string with placeholders enclosed in curly braces {}.\n\n        Returns\n        -------\n        The formatted and enriched filename.\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\log.py", "line_number": 162, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "        \"\"\"\n        This private method is used to create a valid filename out of the format string passed to the __init__ method.\n        For filename formatting details see https://www.python.org/dev/peps/pep-3101/,\n        https://docs.python.org/3/library/string.html#formatstrings and\n        https://docs.python.org/3/library/stdtypes.html?highlight=format_map#str.format_map\n\n        Parameters\n        ----------\n        filename : A string.format() compatible string with placeholders enclosed in curly braces {}.\n\n        Returns\n        -------\n        The formatted and enriched filename.\n        \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\log.py", "line_number": 189, "column_number": 16, "text": "unnecessary variable assignment before return statement.", "physical_line": "        return filename\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 192, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        This method verifies if all placeholders have a matching field and substitution value.\n        It's only called from the _format_filename(self, filename) method\n        Parameters\n        ----------\n        placeholders : The string.format() placeholders extracted from the filename parameter.\n        fields : The list of available fields for placeholder value substitution.\n\n        Returns\n        -------\n        True if all placeholders have a matching field for value substitution, False otherwise.\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\log.py", "line_number": 192, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "        \"\"\"\n        This method verifies if all placeholders have a matching field and substitution value.\n        It's only called from the _format_filename(self, filename) method\n        Parameters\n        ----------\n        placeholders : The string.format() placeholders extracted from the filename parameter.\n        fields : The list of available fields for placeholder value substitution.\n\n        Returns\n        -------\n        True if all placeholders have a matching field for value substitution, False otherwise.\n        \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 218, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        This method parses the filename format string fetched from the configuration dictionary and extracts\n        the placeholders using the string.Formatter() (https://docs.python.org/3.7/library/string.html#string.Formatter)\n        Parameters\n        ----------\n        format_string : The filename format string fetched from the configuration dictionary\n\n        Returns\n        -------\n        A list of placeholder names.\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 218, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        This method parses the filename format string fetched from the configuration dictionary and extracts\n        the placeholders using the string.Formatter() (https://docs.python.org/3.7/library/string.html#string.Formatter)\n        Parameters\n        ----------\n        format_string : The filename format string fetched from the configuration dictionary\n\n        Returns\n        -------\n        A list of placeholder names.\n        \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\log.py", "line_number": 218, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "        \"\"\"\n        This method parses the filename format string fetched from the configuration dictionary and extracts\n        the placeholders using the string.Formatter() (https://docs.python.org/3.7/library/string.html#string.Formatter)\n        Parameters\n        ----------\n        format_string : The filename format string fetched from the configuration dictionary\n\n        Returns\n        -------\n        A list of placeholder names.\n        \"\"\"\n"}, {"code": "D101", "filename": ".\\utils\\log.py", "line_number": 241, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TAFDBHandler(logging.Handler):\n"}, {"code": "D107", "filename": ".\\utils\\log.py", "line_number": 243, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, db_name):\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 244, "column_number": 1, "text": "Found commented out code", "physical_line": "        # super(logging.Handler, self).__init__(self)\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 251, "column_number": 1, "text": "Found commented out code", "physical_line": "        #self.db_sesh_factory = tafdb.new_session_factory(conf_name, 'taf')\n"}, {"code": "E265", "filename": ".\\utils\\log.py", "line_number": 251, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #self.db_sesh_factory = tafdb.new_session_factory(conf_name, 'taf')\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 252, "column_number": 1, "text": "Found commented out code", "physical_line": "        #self.db_sesh = self.db_sesh_factory()\n"}, {"code": "E265", "filename": ".\\utils\\log.py", "line_number": 252, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #self.db_sesh = self.db_sesh_factory()\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 253, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(\"DB Session is:\", self.db_sesh)\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 254, "column_number": 1, "text": "Found commented out code", "physical_line": "        # self._name = None\n"}, {"code": "D102", "filename": ".\\utils\\log.py", "line_number": 256, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def emit(self, record):\n"}, {"code": "D102", "filename": ".\\utils\\log.py", "line_number": 268, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def close(self):\n"}, {"code": "E800", "filename": ".\\utils\\log.py", "line_number": 270, "column_number": 1, "text": "Found commented out code", "physical_line": "        # \"Subclasses should ensure that this gets called from overridden close() methods.\"\n"}, {"code": "H601", "filename": ".\\utils\\log.py", "line_number": 275, "column_number": 1, "text": "class has low (0.00%) cohesion", "physical_line": "class TAFDBFilter(logging.Filter):\n"}, {"code": "D101", "filename": ".\\utils\\log.py", "line_number": 275, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TAFDBFilter(logging.Filter):\n"}, {"code": "A003", "filename": ".\\utils\\log.py", "line_number": 277, "column_number": 5, "text": "class attribute \"filter\" is shadowing a python builtin", "physical_line": "    def filter(self, record: logging.LogRecord) -> int:\n"}, {"code": "D205", "filename": ".\\utils\\log.py", "line_number": 278, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "        \"\"\"\n        Parameters\n        ----------\n        record :\n\n        Returns\n        -------\n        Returns zero for no, nonzero for yes. If deemed appropriate, the record may be modified in-place by this method.\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\log.py", "line_number": 278, "column_number": 1, "text": "First line should end with a period", "physical_line": "        \"\"\"\n        Parameters\n        ----------\n        record :\n\n        Returns\n        -------\n        Returns zero for no, nonzero for yes. If deemed appropriate, the record may be modified in-place by this method.\n        \"\"\"\n"}, {"code": "T201", "filename": ".\\utils\\log.py", "line_number": 287, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Well, the filter is called\")\n"}, {"code": "D101", "filename": ".\\utils\\log.py", "line_number": 292, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TAFLogger(logging.Logger):\n"}, {"code": "E302", "filename": ".\\utils\\log.py", "line_number": 292, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "class TAFLogger(logging.Logger):\n"}, {"code": "D107", "filename": ".\\utils\\log.py", "line_number": 293, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self):\n"}, {"code": "D103", "filename": ".\\utils\\log.py", "line_number": 298, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_taf_log_factory():\n"}, {"code": "D103", "filename": ".\\utils\\log.py", "line_number": 311, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_log_context(log_ctx):\n"}, {"code": "D103", "filename": ".\\utils\\log.py", "line_number": 323, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_taf_log(config, config_type, log_ctx):\n"}, {"code": "T201", "filename": ".\\utils\\log.py", "line_number": 335, "column_number": 9, "text": "print found.", "physical_line": "        print(\"init_taf_log: \", config)\n"}, {"code": "T201", "filename": ".\\utils\\log.py", "line_number": 343, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Log CONFIG: \", log_config)\n"}, {"code": "W391", "filename": ".\\utils\\log.py", "line_number": 348, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\sut_resource.py": [{"code": "D100", "filename": ".\\utils\\sut_resource.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import re\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def gen_chip_id(last_chip_id):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_burette_eeprom():\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 29, "column_number": 5, "text": "local variable 'major_version' is assigned to but never used", "physical_line": "    major_version = 0\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 30, "column_number": 5, "text": "local variable 'minor_version' is assigned to but never used", "physical_line": "    minor_version = 1\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 31, "column_number": 5, "text": "local variable 'length_of_data' is assigned to but never used", "physical_line": "    length_of_data = 272\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 32, "column_number": 5, "text": "local variable 'burette_name' is assigned to but never used", "physical_line": "    burette_name = 'Goblet Monkey Burette'\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 33, "column_number": 5, "text": "local variable 'burette_aspiration_rate' is assigned to but never used", "physical_line": "    burette_aspiration_rate = 0\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 34, "column_number": 5, "text": "local variable 'chemical_name' is assigned to but never used", "physical_line": "    chemical_name = 'Titrant 1'\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 35, "column_number": 5, "text": "local variable 'chemical_uuid' is assigned to but never used", "physical_line": "    chemical_uuid = [1247080972, 48737, 20112, 38247, 10676, 1616314625]\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 36, "column_number": 5, "text": "local variable 'chemical_pp_chip_id' is assigned to but never used", "physical_line": "    chemical_pp_chip_id = ''\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 37, "column_number": 5, "text": "local variable 'chemical_type' is assigned to but never used", "physical_line": "    chemical_type = 5\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 38, "column_number": 5, "text": "local variable 'titrant_type' is assigned to but never used", "physical_line": "    titrant_type = 0\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 39, "column_number": 5, "text": "local variable 'reagent_comment' is assigned to but never used", "physical_line": "    reagent_comment = 'Created by the test automation framework'\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 40, "column_number": 5, "text": "local variable 'titrant_nominal_concentration' is assigned to but never used", "physical_line": "    titrant_nominal_concentration = (0, 0, 52, 34, 0, 0, 0, 0)\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 41, "column_number": 5, "text": "local variable 'titrant_titer' is assigned to but never used", "physical_line": "    titrant_titer = (0, 0, 0, 0, 0, 0, 0, 73)\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 42, "column_number": 5, "text": "local variable 'padding' is assigned to but never used", "physical_line": "    padding = (235, 230, 173, 0)\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def encode_blob_string(st):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_burette_blob(blob):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 107, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_titrant_blob(blob):\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 160, "column_number": 1, "text": "Found commented out code", "physical_line": "    # supplier_len = struct.unpack_from('L', blob, last_stop)[0]\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 161, "column_number": 1, "text": "Found commented out code", "physical_line": "    # last_stop += 4\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 162, "column_number": 1, "text": "Found commented out code", "physical_line": "    # supplier_format_string = f\"{supplier_len}s\"\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 163, "column_number": 1, "text": "Found commented out code", "physical_line": "    # supplier = struct.unpack_from(supplier_format_string, blob, last_stop)[0][:-1].decode('utf-8')\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 164, "column_number": 1, "text": "Found commented out code", "physical_line": "    # last_stop += supplier_len\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 203, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_stirrer_blob(blob):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 249, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_sensor_blob(blob):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 326, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_pump_blob(blob):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 410, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sut_db_record(sqlitefile, cid, name):\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 414, "column_number": 5, "text": "local variable 'db_record_query' is assigned to but never used", "physical_line": "    db_record_query = cursor.execute(sql_q, (cid, name))\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 422, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_meta_blob(blob):\n"}, {"code": "B007", "filename": ".\\utils\\sut_resource.py", "line_number": 430, "column_number": 9, "text": "Loop control variable 'fld_num' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for fld_num in range(number_of_fields):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 447, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def encode_meta_blob(meta_dict):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 456, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_meta_blob(blob, new_meta_dict):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 464, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_pump_eeprom(pump_file_name):\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 467, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Length of the Pump file {len(eeprom_data)}\")\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 471, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        pump_name = struct.unpack_from('60s', eeprom_data, 4)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 473, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        material_number = struct.unpack_from('24s', eeprom_data, 72)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 474, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"major_version: {major_version}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 475, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"minor_version: {minor_version}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 476, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"length_of_data: {length_of_data}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 477, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"pump_name: {pump_name}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 478, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"max_pump_rate: {max_pump_rate}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 479, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"material_number: {material_number}\")\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 482, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_sensor_eeprom(sensor_file_name):\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 486, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Length of the Sensor file {len(eeprom_data)}\")\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 490, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        sensor_name = struct.unpack_from('60s', eeprom_data, 4)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 492, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        material_number = struct.unpack_from('24s', eeprom_data, 65)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 493, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"major_version: {major_version}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 494, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"minor_version: {minor_version}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 495, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"length_of_data: {length_of_data}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 496, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"sensor_name: {sensor_name}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 497, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"sensor_type: {sensor_type}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 498, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"material_number: {material_number}\")\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 501, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_burette_eeprom(eeprom_file_path):\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 505, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Length of this file {len(eeprom_data)}\")\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 510, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['burette_name'] = struct.unpack_from('60s', eeprom_data, 4)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 513, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['chemical_name'] = struct.unpack_from('60s', eeprom_data, 65)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 516, "column_number": 1, "text": "Found commented out code", "physical_line": "        # eeprom_dict['chemical_uuid'] = struct.unpack_from('16s', eeprom_data, 125)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 521, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['chemical_pp_chip_id'] = struct.unpack_from('48s', eeprom_data, 141)[0].split(b'\\x00')[0].decode(\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 525, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['reagent_comment'] = struct.unpack_from('60s', eeprom_data, 197)[0].split(b'\\x00')[0].decode(\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 530, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['lot_batch'] = struct.unpack_from('40s', eeprom_data, 281)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 533, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['titrant_determination_method_uuid'] = \\\n        struct.unpack_from('16s', eeprom_data, 333)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "E122", "filename": ".\\utils\\sut_resource.py", "line_number": 534, "column_number": 9, "text": "continuation line missing indentation or outdented", "physical_line": "        eeprom_dict['titrant_determination_method_uuid'] = \\\n        struct.unpack_from('16s', eeprom_data, 333)[0].split(b'\\x00')[0].decode('utf-8')\n"}, {"code": "ECE001", "filename": ".\\utils\\sut_resource.py", "line_number": 535, "column_number": 9, "text": "Expression is too complex (7.5 > 7)", "physical_line": "        eeprom_dict['titrant_determined_by'] = struct.unpack_from('40s', eeprom_data, 349)[0].split(b'\\x00')[0].decode(\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 539, "column_number": 1, "text": "Found commented out code", "physical_line": "        # padding_format_string = f\"{len(eeprom_data) - 305}B\"\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 540, "column_number": 1, "text": "Found commented out code", "physical_line": "        # padding = struct.unpack_from(padding_format_string, eeprom_data, 305)\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 544, "column_number": 1, "text": "Cognitive complexity is too high (69 > 7)", "physical_line": "def burette_eeprom_from_template(template_file_name: Union[Path, str], burette_attributes: dict) -> dict:\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 544, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def burette_eeprom_from_template(template_file_name: Union[Path, str], burette_attributes: dict) -> dict:\n"}, {"code": "CFQ001", "filename": ".\\utils\\sut_resource.py", "line_number": 544, "column_number": 1, "text": "Function burette_eeprom_from_template has length 175 that exceeds max allowed length 100", "physical_line": "def burette_eeprom_from_template(template_file_name: Union[Path, str], burette_attributes: dict) -> dict:\n"}, {"code": "R506", "filename": ".\\utils\\sut_resource.py", "line_number": 561, "column_number": 9, "text": "unnecessary else after raise statement.", "physical_line": "        if len(burette_attributes['burette_name']) > 60:\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 605, "column_number": 1, "text": "Found commented out code", "physical_line": "            # struct.pack_into('16B', eeprom_data, 125, *burette_attributes['chemical_uuid'])\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 641, "column_number": 91, "text": "trailing whitespace", "physical_line": "    \"\"\"\n    We will ignore the _titrant_nominal_concentration, _titrant_actual_concentration, _titrant_titer attributes for now.\n    Those are CDecFloat64, which is a 64-bit floating point number with a 16-bit exponent. \n    We'll have to figure out how to handle those. They are not the same as the standard C CDecFloat type!\n    The serialisation is done in some weird proprietary way. \n    \"\"\"\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 643, "column_number": 61, "text": "trailing whitespace", "physical_line": "    \"\"\"\n    We will ignore the _titrant_nominal_concentration, _titrant_actual_concentration, _titrant_titer attributes for now.\n    Those are CDecFloat64, which is a 64-bit floating point number with a 16-bit exponent. \n    We'll have to figure out how to handle those. They are not the same as the standard C CDecFloat type!\n    The serialisation is done in some weird proprietary way. \n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 693, "column_number": 1, "text": "Found commented out code", "physical_line": "            # struct.pack_into('16B', eeprom_data, 125, *burette_attributes['chemical_uuid'])\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 722, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_res_full_data(sim_root, res_cid, res_name):\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 726, "column_number": 57, "text": "trailing whitespace", "physical_line": "    sql_q = \"\"\"select os.cid, os.name, os.blob, osm.blob \n    from ObjectStorage os, ObjectStorageMetaData osm \n    where os.cid = ? and os.name = ?\n    and os.cid = osm.cid and os.name = osm.name\"\"\"\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 727, "column_number": 53, "text": "trailing whitespace", "physical_line": "    sql_q = \"\"\"select os.cid, os.name, os.blob, osm.blob \n    from ObjectStorage os, ObjectStorageMetaData osm \n    where os.cid = ? and os.name = ?\n    and os.cid = osm.cid and os.name = osm.name\"\"\"\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 730, "column_number": 5, "text": "local variable 'db_record_query' is assigned to but never used", "physical_line": "    db_record_query = cursor.execute(sql_q, (res_cid, res_name))\n"}, {"code": "R504", "filename": ".\\utils\\sut_resource.py", "line_number": 759, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return res_data_set\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 818, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_burette_eeprom_file(burette_file_name):\n"}, {"code": "F841", "filename": ".\\utils\\sut_resource.py", "line_number": 820, "column_number": 9, "text": "local variable 'expected_f_len' is assigned to but never used", "physical_line": "        expected_f_len = 1048\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 829, "column_number": 1, "text": "Found commented out code", "physical_line": "        # of.write(struct.pack('60s', bytearray(burette_name, 'utf-8')))\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 843, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Current position is {of.tell()}\")\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 847, "column_number": 1, "text": "Found commented out code", "physical_line": "        # of.write(struct.pack('8B', *titrant_nominal_concentration))\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 848, "column_number": 1, "text": "Found commented out code", "physical_line": "        # of.write(struct.pack('8B', *titrant_titer))\n"}, {"code": "E800", "filename": ".\\utils\\sut_resource.py", "line_number": 849, "column_number": 1, "text": "Found commented out code", "physical_line": "        # of.write(struct.pack('4B', *padding))\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 850, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Current position is {of.tell()}\")\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 853, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def new_res_from_template(sim_root, res_cid, res_name, update_dict):\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 863, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"New meta: {template_res['meta_blob_contents']}\")\n"}, {"code": "T201", "filename": ".\\utils\\sut_resource.py", "line_number": 864, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"New BLOB: {template_res['blob_contents']}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 867, "column_number": 1, "text": "Cognitive complexity is too high (14 > 7)", "physical_line": "def sensor_eeprom_from_template(template_file_name: Union[Path, str], sensor_attributes: dict) -> dict:\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 867, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def sensor_eeprom_from_template(template_file_name: Union[Path, str], sensor_attributes: dict) -> dict:\n"}, {"code": "R506", "filename": ".\\utils\\sut_resource.py", "line_number": 884, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    elif sensor_attributes['sensor_position'] not in range(1, 8):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 920, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def rename_sensor_in_eeprom(sensor_file_name, sensor_name, outfile_name=None):\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 935, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sut_res_meta_records(sqlitefile):\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 941, "column_number": 65, "text": "trailing whitespace", "physical_line": "    sql_q = \"\"\"select cid, name, blob from ObjectStorageMetaData \n    where cid in (34335232, 34335744, 34336256, 33882368, 33880320, 33880576, \n    33880832, 34335488, 34334720, 33885952, 34337280, 34337024)\"\"\"\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 942, "column_number": 78, "text": "trailing whitespace", "physical_line": "    sql_q = \"\"\"select cid, name, blob from ObjectStorageMetaData \n    where cid in (34335232, 34335744, 34336256, 33882368, 33880320, 33880576, \n    33880832, 34335488, 34334720, 33885952, 34337280, 34337024)\"\"\"\n"}, {"code": "SIM118", "filename": ".\\utils\\sut_resource.py", "line_number": 947, "column_number": 51, "text": "Use 'cid in cid_translation' instead of 'cid in cid_translation.keys()'", "physical_line": "        meta_dict.update({cid_translation[cid] if cid in cid_translation.keys() else cid: {rec_name: blob_contents}})\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 953, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sut_res_records(sqlitefile):\n"}, {"code": "W291", "filename": ".\\utils\\sut_resource.py", "line_number": 959, "column_number": 57, "text": "trailing whitespace", "physical_line": "    sql_q = \"\"\"select cid, name, blob from ObjectStorage \n    where cid in (34335232, 33880320, 33880576, 33880832, 34335488)\"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 971, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def create_blank_sensor_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 971, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_blank_sensor_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 995, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def create_blank_pump_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 995, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_blank_pump_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 1018, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def create_blank_burette_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 1018, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_blank_burette_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "CCR001", "filename": ".\\utils\\sut_resource.py", "line_number": 1040, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def create_blank_stirrer_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 1040, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_blank_stirrer_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "D103", "filename": ".\\utils\\sut_resource.py", "line_number": 1063, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_blank_eeprom(resource_attributes: dict, output_path: Union[Path, str],\n"}, {"code": "R506", "filename": ".\\utils\\sut_resource.py", "line_number": 1072, "column_number": 5, "text": "unnecessary else after raise statement.", "physical_line": "    if 'class' not in resource_attributes:\n"}], ".\\utils\\tafexcept.py": [{"code": "D205", "filename": ".\\utils\\tafexcept.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\nThe utils.tafexcept module provides a class and helper methods to simplify exception handling, enrich\nexceptions with helpful details and hints, and allow the calling functions to recover from exceptions when possible.\n\nThe TafException behaves like a built-in exception, and left unhandled, will trigger a system exit.\n\nResources:\nhttps://docs.python.org/3/tutorial/errors.html#tut-userexceptions\n\n\"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\tafexcept.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\nThe utils.tafexcept module provides a class and helper methods to simplify exception handling, enrich\nexceptions with helpful details and hints, and allow the calling functions to recover from exceptions when possible.\n\nThe TafException behaves like a built-in exception, and left unhandled, will trigger a system exit.\n\nResources:\nhttps://docs.python.org/3/tutorial/errors.html#tut-userexceptions\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\utils\\tafexcept.py", "line_number": 13, "column_number": 1, "text": "'traceback' imported but unused", "physical_line": "import traceback\n"}, {"code": "H601", "filename": ".\\utils\\tafexcept.py", "line_number": 18, "column_number": 1, "text": "class has low (25.00%) cohesion", "physical_line": "class TafError(Exception):\n"}, {"code": "D101", "filename": ".\\utils\\tafexcept.py", "line_number": 18, "column_number": 1, "text": "Missing docstring in public class", "physical_line": "class TafError(Exception):\n"}, {"code": "D107", "filename": ".\\utils\\tafexcept.py", "line_number": 19, "column_number": 1, "text": "Missing docstring in __init__", "physical_line": "    def __init__(self, tolerance_level='ZERO', original_exception=None, error_code=None, msg=None, *args, **kwargs):\n"}, {"code": "CFQ002", "filename": ".\\utils\\tafexcept.py", "line_number": 19, "column_number": 5, "text": "Function \"__init__\" has 7 arguments that exceeds max allowed 6", "physical_line": "    def __init__(self, tolerance_level='ZERO', original_exception=None, error_code=None, msg=None, *args, **kwargs):\n"}, {"code": "E800", "filename": ".\\utils\\tafexcept.py", "line_number": 27, "column_number": 1, "text": "Found commented out code", "physical_line": "        #self.tb = traceback.extract_tb(self.original_exception[2])\n"}, {"code": "E265", "filename": ".\\utils\\tafexcept.py", "line_number": 27, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #self.tb = traceback.extract_tb(self.original_exception[2])\n"}, {"code": "D102", "filename": ".\\utils\\tafexcept.py", "line_number": 39, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def lookup_hints(self):\n"}, {"code": "R505", "filename": ".\\utils\\tafexcept.py", "line_number": 40, "column_number": 9, "text": "unnecessary else after return statement.", "physical_line": "        if self.error_code in xd.hints:\n"}, {"code": "D102", "filename": ".\\utils\\tafexcept.py", "line_number": 45, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def lookup_recovery(self):\n"}, {"code": "F841", "filename": ".\\utils\\tafexcept.py", "line_number": 48, "column_number": 9, "text": "local variable 'ke' is assigned to but never used", "physical_line": "        except KeyError as ke:\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 57, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"That thing: {fs}\")\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 58, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\tThat filename: {fs.filename}\")\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 59, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\tThat line: {fs.line}\")\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 60, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\tThat lineno: {fs.lineno}\")\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 61, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\tThat locals: {fs.locals}\")\n"}, {"code": "T201", "filename": ".\\utils\\tafexcept.py", "line_number": 62, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"\\tThat name: {fs.name}\")\n"}, {"code": "D102", "filename": ".\\utils\\tafexcept.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public method", "physical_line": "    def assemble_msg(self, user_msg):\n"}, {"code": "D105", "filename": ".\\utils\\tafexcept.py", "line_number": 70, "column_number": 1, "text": "Missing docstring in magic method", "physical_line": "    def __repr__(self):\n"}], ".\\utils\\tafexcept_definitions.py": [{"code": "D100", "filename": ".\\utils\\tafexcept_definitions.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "recovery_methods = {}\n"}, {"code": "E231", "filename": ".\\utils\\tafexcept_definitions.py", "line_number": 3, "column_number": 14, "text": "missing whitespace after ':'", "physical_line": "    'TAF0001':{\n"}, {"code": "W292", "filename": ".\\utils\\tafexcept_definitions.py", "line_number": 6, "column_number": 2, "text": "no newline at end of file", "physical_line": "}"}], ".\\utils\\ado\\taf_traceability_backlog_req.py": [{"code": "D100", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "#!/usr/bin/env python\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 15, "column_number": 1, "text": "Cognitive complexity is too high (20 > 7)", "physical_line": "def main():\n"}, {"code": "D103", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 15, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def main():\n"}, {"code": "CFQ001", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 15, "column_number": 1, "text": "Function main has length 189 that exceeds max allowed length 100", "physical_line": "def main():\n"}, {"code": "B007", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 78, "column_number": 9, "text": "Loop control variable 'backlog' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for backlog, reqs, backlog_item_details in backlogs:\n"}, {"code": "T201", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 196, "column_number": 5, "text": "print found.", "physical_line": "    print('Closed_backlog_reg_changes')\n"}, {"code": "T203", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 197, "column_number": 5, "text": "pprint found.", "physical_line": "    pprint.pprint(req_changes_details_closed_backlog)\n"}, {"code": "T201", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 200, "column_number": 5, "text": "print found.", "physical_line": "    print('Resolved_backlog_reg_changes')\n"}, {"code": "T203", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 201, "column_number": 5, "text": "pprint found.", "physical_line": "    pprint.pprint(req_changes_after_resolved_backlog)\n"}, {"code": "T201", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 204, "column_number": 5, "text": "print found.", "physical_line": "    print('Active_backlog_reg_changes')\n"}, {"code": "T203", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 205, "column_number": 5, "text": "pprint found.", "physical_line": "    pprint.pprint(req_changes_after_active_backlog)\n"}, {"code": "T201", "filename": ".\\utils\\ado\\taf_traceability_backlog_req.py", "line_number": 213, "column_number": 1, "text": "print found.", "physical_line": "print('Time Taken:', time.strftime(\"%H:%M:%S\", time.gmtime(end)))\n"}], ".\\utils\\ado\\traceability_functions.py": [{"code": "D100", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from collections import defaultdict\n"}, {"code": "D205", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 5, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Function to get results of the query in given path: query_path.\n    for the project : project_name\n    uses get_query() method in work item tracking client to find the query id.\n    Getting query results by using the method query_by_id(), passing Query ID as arg.\n    returns the query_results\n\n    :param wi_tracking_client: To access the methods in work item tracking resource/class\n    :type wi_tracking_client: class:`<WorkItemTrackingClient>\n    :param project_name: Name of the Azure DevOps project\n    :type project_name: str\n    :param query_path: Path of the query in Azure DevOps\n    :type query_path: str\n    :return: query_results\n    :rtype: WorkItemQueryResult\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 5, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Function to get results of the query in given path: query_path.\n    for the project : project_name\n    uses get_query() method in work item tracking client to find the query id.\n    Getting query results by using the method query_by_id(), passing Query ID as arg.\n    returns the query_results\n\n    :param wi_tracking_client: To access the methods in work item tracking resource/class\n    :type wi_tracking_client: class:`<WorkItemTrackingClient>\n    :param project_name: Name of the Azure DevOps project\n    :type project_name: str\n    :param query_path: Path of the query in Azure DevOps\n    :type query_path: str\n    :return: query_results\n    :rtype: WorkItemQueryResult\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 28, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return query_results\n"}, {"code": "D401", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 32, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function iterates the query result and writing into a dictionary file as {workitem1 : [workitem2]}.\n\n    :param query_results: Contains the query results\n    :type query_results: WorkItemQueryResult\n    :return: result_workitem_dict\n    :rtype: dict\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 51, "column_number": 1, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "def get_req_changes_for_changed_backlog(**kwargs):\n"}, {"code": "D205", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 52, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function get the requirement changes after the backlog changed date as given in the kwargs.\n    It writes the changed details of requirement and Backlog in a dictionary\n    And writes the changed requirements as a list\n    In addition, it gives activated name, activated mail, assigned name, assigned mail for the active backlogs\n    Email can be triggerred to the assigned mail/activated mail to notify the changes made in requirement\n\n    :param kwargs: keyword Arguments\n    :type kwargs: kwargs\n    :return: req_change_details, changed_req_list\n    :rtype: dict, list\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 52, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function get the requirement changes after the backlog changed date as given in the kwargs.\n    It writes the changed details of requirement and Backlog in a dictionary\n    And writes the changed requirements as a list\n    In addition, it gives activated name, activated mail, assigned name, assigned mail for the active backlogs\n    Email can be triggerred to the assigned mail/activated mail to notify the changes made in requirement\n\n    :param kwargs: keyword Arguments\n    :type kwargs: kwargs\n    :return: req_change_details, changed_req_list\n    :rtype: dict, list\n    \"\"\"\n"}, {"code": "SIM102", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 72, "column_number": 13, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "            if requirement == req_item_details.id:\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 100, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_backlog_creation_status(**kwargs):\n"}, {"code": "D205", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 101, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Function to get the backlog creation status for the changed requirements.\n    Checks whether a new backlog has been created for the changed requirement.\n    If no backlog created for the changed requirement, can trigger an email to notify someone\n\n    :param kwargs: keyword Arguments\n    :type kwargs: kwargs\n    :return: backlog_update\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 101, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Function to get the backlog creation status for the changed requirements.\n    Checks whether a new backlog has been created for the changed requirement.\n    If no backlog created for the changed requirement, can trigger an email to notify someone\n\n    :param kwargs: keyword Arguments\n    :type kwargs: kwargs\n    :return: backlog_update\n    :rtype: dict\n    \"\"\"\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 117, "column_number": 29, "text": "missing whitespace after ','", "physical_line": "    backlogs_details = [[req,backlogs,req_item_details]\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 117, "column_number": 38, "text": "missing whitespace after ','", "physical_line": "    backlogs_details = [[req,backlogs,req_item_details]\n"}, {"code": "B007", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 122, "column_number": 9, "text": "Loop control variable 'req' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "    for req,backlogs,req_item_details in backlogs_details:\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 122, "column_number": 12, "text": "missing whitespace after ','", "physical_line": "    for req,backlogs,req_item_details in backlogs_details:\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 122, "column_number": 21, "text": "missing whitespace after ','", "physical_line": "    for req,backlogs,req_item_details in backlogs_details:\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 128, "column_number": 45, "text": "missing whitespace after ','", "physical_line": "        backlog_creation_details = [[backlog,backlog_item_details]\n"}, {"code": "B007", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 132, "column_number": 13, "text": "Loop control variable 'backlog' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "        for backlog,backlog_item_details in backlog_creation_details:\n"}, {"code": "E231", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 132, "column_number": 20, "text": "missing whitespace after ','", "physical_line": "        for backlog,backlog_item_details in backlog_creation_details:\n"}, {"code": "W391", "filename": ".\\utils\\ado\\traceability_functions.py", "line_number": 145, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\ado\\hrsync\\lxc.py": [{"code": "D400", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 1, "column_number": 1, "text": "First line should end with a period", "physical_line": "\"\"\"\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nTHIS WHOLE FILE SHOULD BE REMOVED FROM THE REPOSITORY AS THE UP-TO-DATE VERSION IS IN ANOTHER REPOSITORY:\nhttps://dev.azure.com/AnaChem/AnaChemProjects/_git/mt-anachem-ado\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\"\"\"\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 49, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, home_ado_config_name, labx_ado_config_name):\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 93, "column_number": 1, "text": "Cognitive complexity is too high (14 > 7)", "physical_line": "def get_source_req_ids():\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 93, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_source_req_ids():\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 119, "column_number": 1, "text": "Cognitive complexity is too high (17 > 7)", "physical_line": "def filter_reqs_by_scope(req_list, scope_list):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 119, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def filter_reqs_by_scope(req_list, scope_list):\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 135, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"\\t\\t ######## Scope list {scope_list}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 142, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"It's in the list {scope_intersect}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 144, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"It's NOT in the list {in_scope_list}\")\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 148, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_source_reqs(req_id_list):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 159, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_target_reqs():\n"}, {"code": "F841", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 170, "column_number": 9, "text": "local variable 'req_variant' is assigned to but never used", "physical_line": "        req_variant = work_item.fields[\"Custom.Variant\"] if \"Custom.Variant\" in work_item.fields else 9999\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 175, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_target_req(src_req_id):\n"}, {"code": "R504", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 191, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return target_req\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 194, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_target_req(source_req):\n"}, {"code": "E800", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 198, "column_number": 1, "text": "Found commented out code", "physical_line": "    # target_req_patch_doc.append({\"op\": \"add\", \"path\": \"/fields/Custom.RequirementSourceID\", \"value\": source_req.id})\n"}, {"code": "E800", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 199, "column_number": 1, "text": "Found commented out code", "physical_line": "    # target_req_patch_doc.append({\"op\": \"add\", \"path\": \"/fields/Custom.Revision\", \"value\": source_req.rev})\n"}, {"code": "ECE001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 207, "column_number": 5, "text": "Expression is too complex (7.5 > 7)", "physical_line": "    target_req_patch_doc.append({\"op\": \"add\", \"path\": \"/relations/-\",\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 212, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"JSON Patch document: {target_req_patch_doc}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 217, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Constructed URL: {src_web_url}\")\n"}, {"code": "ECE001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 218, "column_number": 5, "text": "Expression is too complex (7.5 > 7)", "physical_line": "    target_req_patch_doc.append({\"op\": \"add\", \"path\": \"/relations/-\",\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 225, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"created_work_item: {created_work_item}\")\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 229, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_target_reqs(source_reqs, target_reqs):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 254, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_req(source_req, target_req):\n"}, {"code": "SIM102", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 257, "column_number": 9, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "        if wi_src_fld_name in source_req.fields and wi_target_fld_name in target_req.fields:\n"}, {"code": "R504", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 263, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return updated_work_item\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 266, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def list_req_attachments(req):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 266, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def list_req_attachments(req):\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 275, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"Attachment relation dir: {dir(req_rel)}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 288, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def get_src_req_attachments(req):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 288, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_src_req_attachments(req):\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 311, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def create_target_req_attachments(attachments, src_req_id=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 311, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_target_req_attachments(attachments, src_req_id=None):\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 313, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Fetching target requirement based on source requirement ID\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 352, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Name: {att['attributes']['name']} New ID {new_att}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 355, "column_number": 1, "text": "Cognitive complexity is too high (10 > 7)", "physical_line": "def get_relations_as_dict(req_list):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 355, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_relations_as_dict(req_list):\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 358, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Attributes of {req.id}: {dir(req)}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 361, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"Relations of {req.id}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 364, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"{req.id} \\tRelation type: {req_rel.rel}, and target {target_id}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 373, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def create_target_req_relations(source_req_links, target_reqs):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 373, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_target_req_relations(source_req_links, target_reqs):\n"}, {"code": "ECE001", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 388, "column_number": 21, "text": "Expression is too complex (7.5 > 7)", "physical_line": "                    related_lxc_field_update += f\"<div>{src_link['relation_type_human']}: <a href=\\\"src_web_url\\\">{src_link['target_id']} - \" \\\n                                                f\"{target_reqs[int(src_link['target_id'])].fields['System.Title']}</a><br></div>\\n\"\n"}, {"code": "T201", "filename": ".\\utils\\ado\\hrsync\\lxc.py", "line_number": 398, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"LOG THIS error and continue {ado_error.message} - {ado_error.args} - {ado_error.error_code}\"\n"}], ".\\utils\\ado\\tafsync\\backlogs.py": [{"code": "D100", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging as log\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 3, "column_number": 1, "text": "'dateutil.parser.parse as dateparser' imported but unused", "physical_line": "from dateutil.parser import parse as dateparser\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 4, "column_number": 1, "text": "'time.strftime' imported but unused", "physical_line": "from time import strftime\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 5, "column_number": 1, "text": "'datetime.timedelta' imported but unused", "physical_line": "from datetime import timedelta, datetime\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 5, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import timedelta, datetime\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 6, "column_number": 1, "text": "'typing.Dict' imported but unused", "physical_line": "from typing import List, Dict, Union\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 6, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import List, Dict, Union\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 7, "column_number": 1, "text": "'db.pjm.get_sprints' imported but unused", "physical_line": "from db.pjm import get_sprints\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 8, "column_number": 1, "text": "'db.schemas.management.Requirement' imported but unused", "physical_line": "from db.schemas.management import Requirement\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 9, "column_number": 1, "text": "'db.schemas.staging.RequirementRaw' imported but unused", "physical_line": "from db.schemas.staging import RequirementRaw, ItemRelationsRaw, BacklogRaw\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 9, "column_number": 1, "text": "'db.schemas.staging.ItemRelationsRaw' imported but unused", "physical_line": "from db.schemas.staging import RequirementRaw, ItemRelationsRaw, BacklogRaw\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 11, "column_number": 1, "text": "'utils.parsers.workitem_description.get_description' imported but unused", "physical_line": "from utils.parsers.workitem_description import get_description\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 13, "column_number": 1, "text": "'db.conn as tafdb' imported but unused", "physical_line": "from db import conn as tafdb\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 16, "column_number": 1, "text": "'azure.devops.exceptions.AzureDevOpsServiceError' imported but unused", "physical_line": "from azure.devops.exceptions import AzureDevOpsServiceError\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 18, "column_number": 1, "text": "'azure.devops.v6_0.work_item_tracking.models.IdentityReference' imported but unused", "physical_line": "from azure.devops.v6_0.work_item_tracking.models import IdentityReference\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 35, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 63, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_g5_backlogs_updates():\n"}, {"code": "F841", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 66, "column_number": 5, "text": "local variable 'team_project' is assigned to but never used", "physical_line": "    team_project = this.static_values['System.TeamProject']\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 74, "column_number": 61, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 74, "column_number": 64, "text": "invalid escape sequence '\\T'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 74, "column_number": 74, "text": "invalid escape sequence '\\K'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 74, "column_number": 77, "text": "invalid escape sequence '\\S'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 74, "column_number": 80, "text": "invalid escape sequence '\\O'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 84, "column_number": 1, "text": "Cognitive complexity is too high (19 > 7)", "physical_line": "def aggregate_g5_backlog_updates(backlog_update_list: List[WorkItemUpdate]):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 84, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def aggregate_g5_backlog_updates(backlog_update_list: List[WorkItemUpdate]):\n"}, {"code": "E128", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 94, "column_number": 37, "text": "continuation line under-indented for visual indent", "physical_line": "                                    #  .strftime('%Y-%m-%dT%H:%M:%S')\n"}, {"code": "E128", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 95, "column_number": 37, "text": "continuation line under-indented for visual indent", "physical_line": "                                    'ado_rev_date': backlog_update.revised_date.isoformat(),\n"}, {"code": "E128", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 96, "column_number": 37, "text": "continuation line under-indented for visual indent", "physical_line": "                                    'ado_rev': backlog_update.rev})\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 106, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def taf_staged_bl_from_ado_bl(ado_backlog):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 106, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_staged_bl_from_ado_bl(ado_backlog):\n"}, {"code": "R504", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 137, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_backlog\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 140, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_backlog_updates_staging(conf_name: str = 'DEV', ado_conf_name: str = 'AnaChem', db_name: str = 'taf'):\n"}, {"code": "W391", "filename": ".\\utils\\ado\\tafsync\\backlogs.py", "line_number": 150, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\ado\\tafsync\\project.py": [{"code": "D100", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import logging as log\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 3, "column_number": 1, "text": "'datetime.datetime' imported but unused", "physical_line": "from datetime import datetime\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 7, "column_number": 1, "text": "'utils.parsers.workitem_description.get_description' imported but unused", "physical_line": "from utils.parsers.workitem_description import get_description\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 9, "column_number": 1, "text": "'db.conn as tafdb' imported but unused", "physical_line": "from db import conn as tafdb\n"}, {"code": "E303", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 28, "column_number": 1, "text": "too many blank lines (4)", "physical_line": "# Set up connections\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "E302", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 29, "column_number": 1, "text": "expected 2 blank lines, found 4", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "E800", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 42, "column_number": 1, "text": "Found commented out code", "physical_line": "    # this.home_ado_wi_tracking_client.get_root_nodes(this.home_ado_project)\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 57, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def get_iterations():\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 58, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Fetches the list of iterations from ADO for the currently initialized ADO connection (Project and Team).\n    The results are stored in the TAF DB by another function: db.ado_sync.sync_ado_iterations()\n\n    :return: List of ADO iterations as dictionaries\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 58, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Fetches the list of iterations from ADO for the currently initialized ADO connection (Project and Team).\n    The results are stored in the TAF DB by another function: db.ado_sync.sync_ado_iterations()\n\n    :return: List of ADO iterations as dictionaries\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 68, "column_number": 5, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "    def all_children_list(iteration_path_root):\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 84, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    proj_cal_item_from_ado_iteration() creates a ProjectCalendar() object from a dictionary returned by the\n    get_iterations() function. The returned object can be directly inserted into the DB.\n\n    :param ado_iteration_dict: A dictionary representing an ADO iteration as returned by the Python ADO API client.\n    :return: A db.schemas.management.ProjectCalendar object\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 84, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    proj_cal_item_from_ado_iteration() creates a ProjectCalendar() object from a dictionary returned by the\n    get_iterations() function. The returned object can be directly inserted into the DB.\n\n    :param ado_iteration_dict: A dictionary representing an ADO iteration as returned by the Python ADO API client.\n    :return: A db.schemas.management.ProjectCalendar object\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 84, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    proj_cal_item_from_ado_iteration() creates a ProjectCalendar() object from a dictionary returned by the\n    get_iterations() function. The returned object can be directly inserted into the DB.\n\n    :param ado_iteration_dict: A dictionary representing an ADO iteration as returned by the Python ADO API client.\n    :return: A db.schemas.management.ProjectCalendar object\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\ado\\tafsync\\project.py", "line_number": 104, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_cal_item\n"}], ".\\utils\\ado\\tafsync\\requirements.py": [{"code": "D100", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 5, "column_number": 1, "text": "'time.strftime' imported but unused", "physical_line": "from time import strftime\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 14, "column_number": 1, "text": "'db.conn as tafdb' imported but unused", "physical_line": "from db import conn as tafdb\n"}, {"code": "F401", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 19, "column_number": 1, "text": "'azure.devops.v6_0.work_item_tracking.models.IdentityReference' imported but unused", "physical_line": "from azure.devops.v6_0.work_item_tracking.models import IdentityReference\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, home_ado_config_name):\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 64, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def get_rels_as_dict(req: WorkItem) -> List[dict]:\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_rels_as_dict(req: WorkItem) -> List[dict]:\n"}, {"code": "SIM908", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 68, "column_number": 5, "text": "Use 'req.fields.get(\"MTANACHEM.RequirementVersion\")' instead of 'if \"MTANACHEM.RequirementVersion\" in req.fields: req.fields[\"MTANACHEM.RequirementVersion\"]'", "physical_line": "    if 'MTANACHEM.RequirementVersion' in req.fields:\n"}, {"code": "SIM908", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 71, "column_number": 5, "text": "Use 'req.fields.get(\"System.ChangedDate\")' instead of 'if \"System.ChangedDate\" in req.fields: req.fields[\"System.ChangedDate\"]'", "physical_line": "    if 'System.ChangedDate' in req.fields:\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 75, "column_number": 9, "text": "print found.", "physical_line": "        print(f\"Relations of {req.id}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 79, "column_number": 17, "text": "print found.", "physical_line": "                print(f\"{req.id} \\tRelation type: {req_rel.rel}, and target {target_id}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 91, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def get_reqs_by_query(query_id):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_reqs_by_query(query_id):\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 117, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def taf_staging_rel_from_ado_rel(ado_rel: dict):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 117, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_staging_rel_from_ado_rel(ado_rel: dict):\n"}, {"code": "R504", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 130, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_rel_rec\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 133, "column_number": 1, "text": "Cognitive complexity is too high (18 > 7)", "physical_line": "def taf_req_from_ado_req(ado_req_key: Union[tuple, int], ado_req, staging: bool = False) -> Requirement:\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 133, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_req_from_ado_req(ado_req_key: Union[tuple, int], ado_req, staging: bool = False) -> Requirement:\n"}, {"code": "SIM401", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 145, "column_number": 5, "text": "Use 'ado_req_version = ado_req_dict['fields'].get(\"MTANACHEM.RequirementVersion\", \"0.0\")' instead of an if-block", "physical_line": "    elif 'MTANACHEM.RequirementVersion' in ado_req_dict['fields']:\n"}, {"code": "R504", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 190, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_req\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 193, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def norm_req_version(req):\n"}, {"code": "R505", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 196, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if 'MTANACHEM.RequirementVersion' in req.fields:\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 202, "column_number": 1, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "def get_req_details(req_id_list, return_type='obj', as_of=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 202, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_req_details(req_id_list, return_type='obj', as_of=None):\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 233, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "D301", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 233, "column_number": 1, "text": "Use r\"\"\" if any backslashes in a docstring", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 233, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 233, "column_number": 1, "text": "First line should be in imperative mood", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 237, "column_number": 22, "text": "invalid escape sequence '\\G'", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 237, "column_number": 25, "text": "invalid escape sequence '\\T'", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 237, "column_number": 57, "text": "invalid escape sequence '\\G'", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 237, "column_number": 60, "text": "invalid escape sequence '\\P'", "physical_line": "    \"\"\"\n    Fetches the WorkItems of type 'Requirement SRD TRD' from the configured ADO project using a WIQL query and\n    retrieves all details of each item, including its relations.\n    The searched area paths are hard-coded for the G5 Orion project.\n    ('AnaChemProjects\\G5\\Titration' and 'AnaChemProjects\\G5\\ProductSharedParts')\n    :param as_of: UTC date time string to be passed to get_work_item(). The function will return the work items in the\n    state they were in on the specified date.\n    :return: A Dictionary of WorkItem objects with the ADO work item ID as key.\n    \"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 259, "column_number": 54, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 259, "column_number": 57, "text": "invalid escape sequence '\\T'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 260, "column_number": 52, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 260, "column_number": 55, "text": "invalid escape sequence '\\P'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 277, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_g5_reqs_updates():\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 288, "column_number": 54, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 288, "column_number": 57, "text": "invalid escape sequence '\\T'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 289, "column_number": 52, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 289, "column_number": 55, "text": "invalid escape sequence '\\P'", "physical_line": "        query=f\"\"\"\n            select  [System.Title], [System.AreaPath], [System.Description]\n            from WorkItems\n            where [System.WorkItemType] = 'Requirement SRD TRD'\n            and ([System.AreaPath] = 'AnaChemProjects\\G5\\Titration'\n            or [System.AreaPath] = 'AnaChemProjects\\G5\\ProductSharedParts')\n            and [System.TeamProject] = '{team_project}'\"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 300, "column_number": 1, "text": "Cognitive complexity is too high (39 > 7)", "physical_line": "def aggregate_g5_req_updates(req_update_list: List[WorkItemUpdate]):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 300, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def aggregate_g5_req_updates(req_update_list: List[WorkItemUpdate]):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 332, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_staged_req_from_ado_req(ado_req):\n"}, {"code": "R504", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 367, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_req\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 370, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_staging_req_rel_recs(ado_req_dict: dict):\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\requirements.py", "line_number": 398, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_reqs_per_sprint(ending_after: datetime = None, no_future: bool = False) -> Dict[tuple, Dict[int, WorkItem]]:\n"}], ".\\utils\\ado\\tafsync\\testplans.py": [{"code": "D100", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import sys\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 24, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    To check whether the TAF test case has already a Test case workitem in ADO,\n    If no ADO test case id has mapped with the TAF test case in db,\n    Create a new ADO TC with the information of TAF TC from DB\n    Parameters\n    ----------\n    tc_list : TAF TC details from db\n    Returns:(Dict) It gives back the ADO TC id and TAF tc id to map.\n    -------\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 24, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    To check whether the TAF test case has already a Test case workitem in ADO,\n    If no ADO test case id has mapped with the TAF test case in db,\n    Create a new ADO TC with the information of TAF TC from DB\n    Parameters\n    ----------\n    tc_list : TAF TC details from db\n    Returns:(Dict) It gives back the ADO TC id and TAF tc id to map.\n    -------\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 65, "column_number": 1, "text": "Found commented out code", "physical_line": "            # ado_tc_list.append(str(test_case_details.id))\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 68, "column_number": 13, "text": "print found.", "physical_line": "            print(f\"The test case {taf_test_case['taf_tc_id']} has an external ID: {taf_test_case['ado_tc_id']}\")\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 73, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Create ADO Test suite based on TAF test suite details\n    Parameters\n    ----------\n    :param ts_list : Details to create Test suite in ADO\n    :param ado_parent_test_suite_id:\n    :param ado_test_plan_id:\n\n    Returns: It gives back the ADO TS id.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 73, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Create ADO Test suite based on TAF test suite details\n    Parameters\n    ----------\n    :param ts_list : Details to create Test suite in ADO\n    :param ado_parent_test_suite_id:\n    :param ado_test_plan_id:\n\n    Returns: It gives back the ADO TS id.\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 108, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param ts_to_tcs_map: A dictionary of lists with the ADO test suite IDs as keys and a list of ADO TC IDs as values\n    :param ado_test_plan_id: The ID of the target Test Plan in ADO\n    :return: True, unless an exception occurs\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 108, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param ts_to_tcs_map: A dictionary of lists with the ADO test suite IDs as keys and a list of ADO TC IDs as values\n    :param ado_test_plan_id: The ID of the target Test Plan in ADO\n    :return: True, unless an exception occurs\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 121, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Get the list of ADO test points assigned to each Test Case under the list of Test Suites passed as an argument.\n    :param ts_list: List of ADO Test Suite IDs.\n    :param ado_test_plan_id: The ID of the target Test Plan in ADO.\n    :return:\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 139, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    To Update the results for each test point based on the TAF results\n    :param test_point_results: A list of dictionaries with the test point IDs grouped by ADO Test Suite IDs\n    and test outcomes:\n        test_point_results = [{'Test_Suite_ID':{'Test_Outcome': ['Test_Point_ID']}}]\n    :param ado_test_plan_id:\n    :return: True, unless an exception occurs\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 139, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    To Update the results for each test point based on the TAF results\n    :param test_point_results: A list of dictionaries with the test point IDs grouped by ADO Test Suite IDs\n    and test outcomes:\n        test_point_results = [{'Test_Suite_ID':{'Test_Outcome': ['Test_Point_ID']}}]\n    :param ado_test_plan_id:\n    :return: True, unless an exception occurs\n    \"\"\"\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 160, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def update_results():\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 164, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_test_struct(taf_test_set_id, ado_test_plan_id):\n"}, {"code": "E800", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 171, "column_number": 1, "text": "Found commented out code", "physical_line": "    # ts_map = create_ado_test_suites(test_suite_list, ado_test_plan_id)\n"}, {"code": "E800", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 173, "column_number": 1, "text": "Found commented out code", "physical_line": "    # ado_assign_tc_to_ts(tc_to_add_list)\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 177, "column_number": 5, "text": "print found.", "physical_line": "    print(tp_list)\n"}, {"code": "E800", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 180, "column_number": 1, "text": "Found commented out code", "physical_line": "    # ado_update_test_point_results(test_point_results)\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 183, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init(config_name, ado_config_name):\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 195, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"TestPlanClient dir() {dir(this.ado_test_plan_client)}\")\n"}, {"code": "T201", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 196, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"TestClient dir() {dir(this.ado_test_client)}\")\n"}, {"code": "D103", "filename": ".\\utils\\ado\\tafsync\\testplans.py", "line_number": 200, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def main():\n"}], ".\\utils\\ado_reporting\\ado_taf_db_sync.py": [{"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n This module is to sync requirements from ado to TAF DB: Requirement under management schema.\n sync backlogs from ado to TAF DB: Backlog under management schema\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "D208", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 1, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "\"\"\"\n This module is to sync requirements from ado to TAF DB: Requirement under management schema.\n sync backlogs from ado to TAF DB: Backlog under management schema\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "W293", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 6, "column_number": 1, "text": "blank line contains whitespace", "physical_line": "\"\"\"\n This module is to sync requirements from ado to TAF DB: Requirement under management schema.\n sync backlogs from ado to TAF DB: Backlog under management schema\n Updating the Requirements and Backlogs in the TAF DB involves only 2 mapped tables: Requirement and Backlog\n which you can find under db/schemas/management.py\n \n\"\"\"\n"}, {"code": "F401", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 14, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import Union\n"}, {"code": "F401", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 15, "column_number": 1, "text": "'dateutil.parser.parse as dateparser' imported but unused", "physical_line": "from dateutil.parser import parse as dateparser\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 41, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_taf_requirements():\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 44, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "CCR001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 60, "column_number": 1, "text": "Cognitive complexity is too high (14 > 7)", "physical_line": "def get_work_items_by_query(query_id, ret_type=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_work_items_by_query(query_id, ret_type=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 91, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_source_work_items_list_by_query(query_id):\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 115, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missing requirements\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 115, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of requirements to be synced\n    :param as_of: A timestamp in UTC format to return the requirement in the state they were in at a specific time\n    :return: missing_reqs: list of missing requirements\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 120, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 141, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_taf_backlogs(staging: bool = False):\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 144, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "CCR001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 161, "column_number": 1, "text": "Cognitive complexity is too high (15 > 7)", "physical_line": "def get_backlog_details(backlog_id_list, return_type='obj', as_of=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 161, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_backlog_details(backlog_id_list, return_type='obj', as_of=None):\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 197, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_backlog_from_ado_backlog(ado_backlog, staging: bool = False):\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 220, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"ADoREQ: {vars(ado_backlog)}\")\n"}, {"code": "R504", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 225, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_backlog\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 228, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_g5_backlog_ids_ado_wiql():\n"}, {"code": "W605", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 235, "column_number": 61, "text": "invalid escape sequence '\\G'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 235, "column_number": 64, "text": "invalid escape sequence '\\T'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 235, "column_number": 74, "text": "invalid escape sequence '\\K'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 235, "column_number": 77, "text": "invalid escape sequence '\\S'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "W605", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 235, "column_number": 80, "text": "invalid escape sequence '\\O'", "physical_line": "        query=f\"\"\"\n                select  [System.Title], [System.AreaPath], [System.Description]\n                from WorkItems\n                where [System.WorkItemType] = 'Backlog Item'\n                and [System.AreaPath] Under 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion'\"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 239, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return bl_list\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 243, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param staging: If True, the staging.BacklogControl table will be populated. If False, the mgt.Backlog table.\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of backlogs to be synced\n    :param as_of: A timestamp in UTC format to return the backlog in the state they were in at a specific time\n    :return: missing_reqs: list of missing backlog\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 249, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 289, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_source_reqs(req_id_list):\n"}, {"code": "CCR001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 301, "column_number": 1, "text": "Cognitive complexity is too high (16 > 7)", "physical_line": "def get_relations_as_dict(req_list, taf_reqs, taf_backlogs):\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 301, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_relations_as_dict(req_list, taf_reqs, taf_backlogs):\n"}, {"code": "SIM102", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 305, "column_number": 9, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "        if str(req_id) in taf_reqs:\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 308, "column_number": 1, "text": "Found commented out code", "physical_line": "                # print(f\"Relations of {req.id}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 311, "column_number": 1, "text": "Found commented out code", "physical_line": "                    # print(f\"{req.id} \\tRelation type: {req_rel.rel}, and target {target_id}\")\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 324, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_taf_req_to_work_item():  # Get a DB session, actual connection\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 325, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 330, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh.close()\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 334, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def taf_req_work_item_from_ado_req_work_item(ado_backlog):\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 337, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 346, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh.close()\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 362, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"ADoREQ: {vars(ado_backlog)}\")\n"}, {"code": "R504", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 368, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_db_req_work_item\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 372, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of backlogs to be synced\n    :return: missing_reqs: list of missing backlog\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 372, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param query_id: The long UUID type of ID of an ADO query that returns the list of backlogs to be synced\n    :return: missing_reqs: list of missing backlog\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 377, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh = tafdb.get_session('taf')\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 417, "column_number": 1, "text": "Found commented out code", "physical_line": "    # db_sesh.close()\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 421, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_current_iteration(project_name, team_name):\n"}, {"code": "T201", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 424, "column_number": 5, "text": "print found.", "physical_line": "    print(f\"Iteration list from work client {iterations_list}\")\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 428, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_closed_backlogs():\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 431, "column_number": 1, "text": "Found commented out code", "physical_line": "    # iteration_id = iterations_list[0].id\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 432, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(iteration_path)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 433, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(iteration_id)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 434, "column_number": 1, "text": "Found commented out code", "physical_line": "    # iteration_path = 'AnaChemProjects\\G5\\Titration\\KF\\SW\\Orion\\Iteration 44'\n"}, {"code": "R504", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 438, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return taf_closed_backlog_id\n"}, {"code": "D103", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 441, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_implemented_backlogs_and_reqs():\n"}, {"code": "ECE001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 443, "column_number": 5, "text": "Expression is too complex (8.0 > 7)", "physical_line": "    implemented_work_items_with_version = [db_sesh.query(ReqToWorkitem).with_entities(ReqToWorkitem.backlog_ext_id,\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 466, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :return: reqs_to_be_analyzed: list of requirements which do not have requirement items.\n    [(ReqToWorkitem.req_id,ReqToWorkitem.req_ext_id,ReqToWorkitem.req_version)]\n    :return: reqs_with_req_item : List of requirements which has requirement item linked to it.\n    [(RequirementItem.req_id,RequirementItem.req_ext_id,RequirementItem.req_version)]\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 489, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param reqs_has_req_item: List of requirements which has requirement item linked to it.\n    [(RequirementItem.req_id,RequirementItem.req_ext_id,RequirementItem.req_version)]\n    :return: req_item_count_dict: Dictionary with\n    [(RequirementItem.req_id,RequirementItem.req_ext_id,RequirementItem.req_version)] as key\n    and count of Req_item as value for all reqs in reqs_with_req_item\n    \"\"\"\n"}, {"code": "ECE001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 497, "column_number": 5, "text": "Expression is too complex (9.5 > 7)", "physical_line": "    req_item_details = [db_sesh.query(RequirementItem.req_id,\n"}, {"code": "D205", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 515, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Function to get the list of req_id from the TAF DB table mgt.ReqToWorkitem and list of req_id from table\n    mgt.CoverageMap to find out the list of requirements which do not have any Test items linked and the list of\n    requirements which has Test items linked to the req_id with the count of test items for each requirement.\n\n    :returns :\n    reqs_with_no_test_items : List of req_id which do not have any Test items\n    req_test_item_dict : Dictionary with req_id and the count of Test item like {req_id: count of test item for req_id}\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 515, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Function to get the list of req_id from the TAF DB table mgt.ReqToWorkitem and list of req_id from table\n    mgt.CoverageMap to find out the list of requirements which do not have any Test items linked and the list of\n    requirements which has Test items linked to the req_id with the count of test items for each requirement.\n\n    :returns :\n    reqs_with_no_test_items : List of req_id which do not have any Test items\n    req_test_item_dict : Dictionary with req_id and the count of Test item like {req_id: count of test item for req_id}\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 515, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Function to get the list of req_id from the TAF DB table mgt.ReqToWorkitem and list of req_id from table\n    mgt.CoverageMap to find out the list of requirements which do not have any Test items linked and the list of\n    requirements which has Test items linked to the req_id with the count of test items for each requirement.\n\n    :returns :\n    reqs_with_no_test_items : List of req_id which do not have any Test items\n    req_test_item_dict : Dictionary with req_id and the count of Test item like {req_id: count of test item for req_id}\n    \"\"\"\n"}, {"code": "ECE001", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 527, "column_number": 5, "text": "Expression is too complex (8.0 > 7)", "physical_line": "    reqs_in_req_to_workitem = [req_id[0] for req_id in db_sesh.query(ReqToWorkitem.req_id).filter(\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 548, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Missing requirements: {missing_reqs_to_sync}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 551, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Missing backlogs to add: {missing_backlog}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 552, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Missing backlogs to update: {backlogs_to_update}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 556, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Missing req_to_workitem links to add: {missing_req_to_workitems}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 557, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"req_to_workitem Links got removed in ADO: {req_to_workitems_to_update}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 559, "column_number": 1, "text": "Found commented out code", "physical_line": "    # implemented_backlog_req_dict = get_implemented_backlogs_and_reqs()\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 560, "column_number": 1, "text": "Found commented out code", "physical_line": "    # imp_back_list = list(implemented_backlog_req_dict.keys())\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 561, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(imp_back_list)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 562, "column_number": 1, "text": "Found commented out code", "physical_line": "    # imp_back_det = get_backlog_details(imp_back_list, return_type='dict', as_of=None)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 563, "column_number": 1, "text": "Found commented out code", "physical_line": "    # pprint.pprint(imp_back_det)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 565, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Reqs with no req_item: {reqs_with_no_reqitem}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 566, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Reqs with req_items: {reqs_with_req_item}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 567, "column_number": 1, "text": "Found commented out code", "physical_line": "    # req_item_dict = get_req_items_count(reqs_with_req_item)\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 568, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Reqs with req_item count dict: {req_item_dict}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 570, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Reqs which do not have test items are: {len(reqs_with_no_test_items)} - {reqs_with_no_test_items}\")\n"}, {"code": "E800", "filename": ".\\utils\\ado_reporting\\ado_taf_db_sync.py", "line_number": 571, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"Reqs which has test items are: {len(test_item_count_for_reqs_dict)} - {test_item_count_for_reqs_dict}\")\n"}], ".\\utils\\automation_grpc\\__init__.py": [{"code": "D104", "filename": ".\\utils\\automation_grpc\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\automation_grpc\\common\\calls.py": [{"code": "D100", "filename": ".\\utils\\automation_grpc\\common\\calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import grpc\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\common\\calls.py", "line_number": 4, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def open_grpc_channel(hostname, grpc_port):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\common\\calls.py", "line_number": 6, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_channel"}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\common\\calls.py", "line_number": 6, "column_number": 24, "text": "no newline at end of file", "physical_line": "    return grpc_channel"}], ".\\utils\\automation_grpc\\common\\__init__.py": [{"code": "D104", "filename": ".\\utils\\automation_grpc\\common\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\automation_grpc\\instrument\\calls.py": [{"code": "D100", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.automation_grpc.instrument.sim_instfwk_pb2 import MInstrumentGetInfoRequest, MGetSimulationListRequest, \\\n    MAddSimulationRequest, MDDriveMountBuretteRequest, MRemoveSimulationRequest, MStirrerConnectRequest, \\\n    MStirrerConnectedRequest, MStirrerDisconnectRequest, MSmartSensorConnectedRequest, MSmartSensorGetTypeRequest, \\\n    MSmartSensorConnectRequest, MSmartSensorNVData, MSmartSensorDisconnectRequest, MSmartSensorSetErrorRequest, \\\n    MDDriveSetErrorRequest, MPumpSetErrorRequest\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 21, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def stirrer_connected(channel, stirrer_nr=1):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 26, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 29, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_stirrer(channel, stirrer_nr=1):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 35, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 38, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_stirrer(channel, stirrer_nr=1):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 43, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 46, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def get_connected_sim_devices(channel):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 46, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_connected_sim_devices(channel):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 73, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def format_uid(uid):\n"}, {"code": "E800", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 74, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"UID: {uid}, with length {len(str(uid))}\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 79, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_first_available_uid(channel):\n"}, {"code": "CFQ004", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 79, "column_number": 1, "text": "Function \"get_first_available_uid\" has 4 returns that exceeds max allowed 3", "physical_line": "def get_first_available_uid(channel):\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 100, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def connect_burette(channel, burette_type, can_port, uid=None):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 100, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_burette(channel, burette_type, can_port, uid=None):\n"}, {"code": "F841", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 120, "column_number": 9, "text": "local variable 'te' is assigned to but never used", "physical_line": "        except Exception as te:\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 136, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return add_sim_response\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 139, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def connect_pump(channel, pump_type, can_port, uid=None):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 139, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_pump(channel, pump_type, can_port, uid=None):\n"}, {"code": "F841", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 151, "column_number": 9, "text": "local variable 'te' is assigned to but never used", "physical_line": "        except Exception as te:\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 168, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return add_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 171, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_pump(channel, uid, connector):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 184, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return remove_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 187, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_burette(channel, uid, connector):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 198, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return remove_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 201, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def mount_burette(channel, uid, burette_type):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 208, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return mount_burette_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 211, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_instrument_info(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 216, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(info_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 228, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_info\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 231, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_instrument_logs(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 236, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(log_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 245, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_logs\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 248, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_instrument_type(channel, inst_family, inst_type):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 255, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def sensor_connected(channel, sensor_nr):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 259, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return sensor_resp\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 262, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sensor_type(channel, sensor_nr):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 273, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_sensor(channel, sensor_nr=1, sensor_type=ESensorType.kSensorTypePolarized, nv_data=None):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 281, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 284, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_sensor(channel, sensor_nr=1):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 288, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 291, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_sensor_error(channel, idx=1,\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 300, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 303, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_drive_error(channel, idx=1,\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 312, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 315, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_pump_error(channel, idx=1,\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\instrument\\calls.py", "line_number": 324, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}], ".\\utils\\automation_grpc\\instrument\\__init__.py": [{"code": "D104", "filename": ".\\utils\\automation_grpc\\instrument\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "# Kept running into issues when trying to call these functions from other modules\n"}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\instrument\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\instrument\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\instrument\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}], ".\\utils\\automation_grpc\\terminal\\calls.py": [{"code": "D100", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import grpc\n"}, {"code": "F401", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 1, "column_number": 1, "text": "'grpc' imported but unused", "physical_line": "import grpc\n"}, {"code": "F401", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 2, "column_number": 1, "text": "'utils.automation_grpc.common.calls' imported but unused", "physical_line": "from utils.automation_grpc.common import calls\n"}, {"code": "F401", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 5, "column_number": 1, "text": "'utils.automation_grpc.terminal.sim_tfw_pb2_grpc.SimTfwService' imported but unused", "physical_line": "from utils.automation_grpc.terminal.sim_tfw_pb2_grpc import SimTfwService, SimTfwServiceStub\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 6, "column_number": 1, "text": "'from utils.automation_grpc.instrument.calls import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.instrument.calls import *\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_terminal_info(channel):\n"}, {"code": "E302", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 8, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_terminal_info(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 13, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(info_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 25, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return terminal_info\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_terminal_logs(channel):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 41, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_logs\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_connect(channel):\n"}, {"code": "E800", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 47, "column_number": 1, "text": "Found commented out code", "physical_line": "    #conn_req.uid = get_first_available_uid(channel)\n"}, {"code": "E265", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 47, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #conn_req.uid = get_first_available_uid(channel)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 48, "column_number": 24, "text": "'format_uid' may be undefined, or defined from star imports: utils.automation_grpc.instrument.calls", "physical_line": "    conn_req.uid = int(format_uid(1))\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 53, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion connect established\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 55, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_disconnect(channel):\n"}, {"code": "E302", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 55, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def in_motion_disconnect(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 61, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion disconnected\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 63, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_get_state(channel):\n"}, {"code": "E302", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 63, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def in_motion_get_state(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 69, "column_number": 9, "text": "print found.", "physical_line": "        print(\"State of Inmotion is received\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 72, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_set_error(channel):\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 79, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion error is set to KinMotionErrorGeneric\")\n"}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\terminal\\calls.py", "line_number": 89, "column_number": 4, "text": "no newline at end of file", "physical_line": "\"\"\"\nchannel = calls.open_grpc_channel(\"127.0.0.1\",50051)\n\nin_motion_connect(channel)\nin_motion_get_state(channel)\nin_motion_disconnect(channel)\nin_motion_get_state(channel)\n\"\"\""}], ".\\utils\\automation_grpc\\terminal\\__init__.py": [{"code": "D104", "filename": ".\\utils\\automation_grpc\\terminal\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": "# Kept running into issues when trying to call these functions from other modules\n"}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\terminal\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\terminal\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}, {"code": "W292", "filename": ".\\utils\\automation_grpc\\terminal\\__init__.py", "line_number": 8, "column_number": 84, "text": "no newline at end of file", "physical_line": "# but it would be good figure out a better way to overcome this. Feels like a hack."}], ".\\utils\\automation_grpc\\v2\\calls.py": [{"code": "D100", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.automation_grpc.v2.instfwk_common_pb2 import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 1, "column_number": 1, "text": "'from utils.automation_grpc.v2.instfwk_common_pb2 import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.instfwk_common_pb2 import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 2, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_instfwk_pb2_grpc import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_instfwk_pb2_grpc import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 3, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_tfw_pb2 import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_tfw_pb2 import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 4, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_instfwk_pb2 import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_instfwk_pb2 import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 5, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_tfw_pb2_grpc import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_tfw_pb2_grpc import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 6, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_inst_ti_pb2 import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_inst_ti_pb2 import *\n"}, {"code": "F403", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 7, "column_number": 1, "text": "'from utils.automation_grpc.v2.sim_inst_ti_pb2_grpc import *' used; unable to detect undefined names", "physical_line": "from utils.automation_grpc.v2.sim_inst_ti_pb2_grpc import *\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def open_grpc_channel(hostname, grpc_port):\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 24, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_channel\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_terminal_info(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 30, "column_number": 16, "text": "'MTerminalGetInfoRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    info_req = MTerminalGetInfoRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 31, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 33, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(info_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 45, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return terminal_info\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 48, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_terminal_logs(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 50, "column_number": 15, "text": "'MTerminalGetLogRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    log_req = MTerminalGetLogRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 51, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 61, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_logs\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 64, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_connect(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 65, "column_number": 16, "text": "'MInMotionConnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    conn_req = MInMotionConnectRequest()\n"}, {"code": "E800", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 67, "column_number": 1, "text": "Found commented out code", "physical_line": "    #conn_req.uid = get_first_available_uid(channel)\n"}, {"code": "E265", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 67, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #conn_req.uid = get_first_available_uid(channel)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 69, "column_number": 21, "text": "'MInMotionConnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    conn_req.type = MInMotionConnectRequest.kInMotionTypeSuperDuperMegaFlex\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 70, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 73, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion connect established\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 76, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_disconnect(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 77, "column_number": 19, "text": "'MInMotionDisconnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    disconn_req = MInMotionDisconnectRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 79, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 82, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion disconnected\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_get_state(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 86, "column_number": 17, "text": "'MInMotionGetStateRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    state_req = MInMotionGetStateRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 88, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 91, "column_number": 9, "text": "print found.", "physical_line": "        print(\"State of Inmotion is received\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 94, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def in_motion_set_error(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 95, "column_number": 19, "text": "'MInMotionSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    set_err_req = MInMotionSetErrorRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 97, "column_number": 25, "text": "'MInMotionSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    set_err_req.error = MInMotionSetErrorRequest.kInMotionErrorGeneric\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 98, "column_number": 12, "text": "'SimTfwServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimTfwServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 101, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Inmotion error is set to KinMotionErrorGeneric\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 104, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def stirrer_connected(channel, stirrer_nr=1):\n"}, {"code": "E302", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 104, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def stirrer_connected(channel, stirrer_nr=1):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 105, "column_number": 19, "text": "'MStirrerConnectedRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stirrer_req = MStirrerConnectedRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 107, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 109, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 112, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_stirrer(channel, stirrer_nr=1):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 113, "column_number": 19, "text": "'MStirrerConnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stirrer_req = MStirrerConnectRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 116, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 118, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 121, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_stirrer(channel, stirrer_nr=1):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 122, "column_number": 19, "text": "'MStirrerDisconnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stirrer_req = MStirrerDisconnectRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 124, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 126, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 129, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def get_connected_sim_devices(channel):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 129, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_connected_sim_devices(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 130, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 134, "column_number": 26, "text": "'EConnector' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    for dev_connector in EConnector.keys():\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 135, "column_number": 24, "text": "'MGetSimulationListRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "        sim_list_req = MGetSimulationListRequest(connector=EConnector.Value(dev_connector))\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 135, "column_number": 60, "text": "'EConnector' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "        sim_list_req = MGetSimulationListRequest(connector=EConnector.Value(dev_connector))\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 140, "column_number": 35, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "            if sim.device_type == EDeviceType.Value('kDeviceTypePump'):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 141, "column_number": 32, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                dev_sub_type = EPumpType.Name(sim.pump_type)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 142, "column_number": 37, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "            elif sim.device_type == EDeviceType.Value('kDeviceTypeDDrive'):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 143, "column_number": 32, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                dev_sub_type = EBuretteType.Name(sim.burette_type)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 148, "column_number": 16, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "            if EDeviceType.Name(sim.device_type) not in sim_list:\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 149, "column_number": 34, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                sim_list.update({EDeviceType.Name(sim.device_type): {}})\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 150, "column_number": 22, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "            sim_list[EDeviceType.Name(sim.device_type)].update({dev_id: {'dev_sub_type': dev_sub_type,\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 156, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def format_uid(uid):\n"}, {"code": "E800", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 157, "column_number": 1, "text": "Found commented out code", "physical_line": "    # print(f\"UID: {uid}, with length {len(str(uid))}\")\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 162, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_first_available_uid(channel):\n"}, {"code": "CFQ004", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 162, "column_number": 1, "text": "Function \"get_first_available_uid\" has 4 returns that exceeds max allowed 3", "physical_line": "def get_first_available_uid(channel):\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 183, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def connect_burette(channel, burette_type, can_port, uid=None):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 183, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_burette(channel, burette_type, can_port, uid=None):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 195, "column_number": 30, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'DISPENSIX': EBuretteType.kBuretteType_6Port,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 196, "column_number": 28, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'BURETTE': EBuretteType.kBuretteType_2Port,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 197, "column_number": 27, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                '6_PORT': EBuretteType.kBuretteType_6Port,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 198, "column_number": 27, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                '2_PORT': EBuretteType.kBuretteType_2Port,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 199, "column_number": 26, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                '6PORT': EBuretteType.kBuretteType_6Port,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 200, "column_number": 26, "text": "'EBuretteType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                '2PORT': EBuretteType.kBuretteType_2Port\n"}, {"code": "F841", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 203, "column_number": 9, "text": "local variable 'te' is assigned to but never used", "physical_line": "        except Exception as te:\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 205, "column_number": 15, "text": "'MAddSimulationRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sim_req = MAddSimulationRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 214, "column_number": 27, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sim_req.device_type = EDeviceType.kDeviceTypeDDrive\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 217, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 219, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return add_sim_response\n"}, {"code": "CCR001", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 222, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def connect_pump(channel, pump_type, can_port, uid=None):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 222, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_pump(channel, pump_type, can_port, uid=None):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 227, "column_number": 27, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'SD660S': EPumpType.kPumpType_SD660S,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 228, "column_number": 27, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'SP280S': EPumpType.kPumpType_SP280S,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 229, "column_number": 28, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'SPR200S': EPumpType.kPumpType_SPR200S,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 230, "column_number": 35, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'SOLVENTMANAGER': EPumpType.kPumpType_SolventManager,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 231, "column_number": 27, "text": "'EPumpType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                'AP200S': EPumpType.kPumpType_AP200S\n"}, {"code": "F841", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 234, "column_number": 9, "text": "local variable 'te' is assigned to but never used", "physical_line": "        except Exception as te:\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 237, "column_number": 15, "text": "'MAddSimulationRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sim_req = MAddSimulationRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 246, "column_number": 27, "text": "'EDeviceType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sim_req.device_type = EDeviceType.kDeviceTypePump\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 249, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 251, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return add_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 254, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_pump(channel, uid, connector):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 257, "column_number": 22, "text": "'MRemoveSimulationRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    remove_sim_req = MRemoveSimulationRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 265, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 267, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return remove_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 270, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_burette(channel, uid, connector):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 271, "column_number": 22, "text": "'MRemoveSimulationRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    remove_sim_req = MRemoveSimulationRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 279, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 281, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return remove_sim_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 284, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def mount_burette(channel, uid, burette_type):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 286, "column_number": 25, "text": "'MDDriveMountBuretteRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    burette_mount_req = MDDriveMountBuretteRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 289, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 291, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return mount_burette_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 294, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_solvent_mgr(channel, uid, idx):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 300, "column_number": 16, "text": "'MSolventManagerConnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    conn_req = MSolventManagerConnectRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 303, "column_number": 12, "text": "'SimInstTiServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstTiServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 305, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return conn_resp\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 308, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_solvent_mgr(channel, idx):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 314, "column_number": 16, "text": "'MSolventManagerDisconnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    conn_req = MSolventManagerDisconnectRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 316, "column_number": 12, "text": "'SimInstTiServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstTiServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 318, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return conn_resp\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 321, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_instrument_info(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 323, "column_number": 16, "text": "'MInstrumentGetInfoRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    info_req = MInstrumentGetInfoRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 324, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 326, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(info_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 338, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_info\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 341, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_instrument_logs(channel):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 343, "column_number": 15, "text": "'MInstrumentGetInfoRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    log_req = MInstrumentGetInfoRequest()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 344, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "T201", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 346, "column_number": 5, "text": "print found.", "physical_line": "    print(\"Info response: \", dir(log_response))\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 355, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return instrument_logs\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 358, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_instrument_type(channel, inst_family, inst_type):\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 365, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def sensor_connected(channel, sensor_nr):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 366, "column_number": 18, "text": "'MSmartSensorConnectedRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_req = MSmartSensorConnectedRequest(sensor_nr=sensor_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 367, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 369, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return sensor_resp\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 372, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_sensor_type(channel, sensor_nr):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 374, "column_number": 23, "text": "'MSmartSensorGetTypeRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_type_req = MSmartSensorGetTypeRequest(sensor_nr=sensor_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 375, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 379, "column_number": 66, "text": "'ESensorType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_type['type'] = None if not sensor_type_resp.type else ESensorType.Name(sensor_type_resp.type)\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 383, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def connect_sensor(channel, sensor_nr=1, sensor_type=ESensorType.kSensorTypePolarized, nv_data=None):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 383, "column_number": 54, "text": "'ESensorType' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "def connect_sensor(channel, sensor_nr=1, sensor_type=ESensorType.kSensorTypePolarized, nv_data=None):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 386, "column_number": 19, "text": "'MSmartSensorNVData' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "        nv_data = MSmartSensorNVData()\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 387, "column_number": 23, "text": "'MSmartSensorConnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_conn_req = MSmartSensorConnectRequest(sensor_nr=sensor_nr, type=sensor_type, nv_data=nv_data)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 388, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 391, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 394, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def disconnect_sensor(channel, sensor_nr=1):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 395, "column_number": 26, "text": "'MSmartSensorDisconnectRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_disconn_req = MSmartSensorDisconnectRequest(sensor_nr=sensor_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 396, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 398, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 401, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_sensor_error(channel, idx=1,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 402, "column_number": 31, "text": "'MSmartSensorSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                     error_nr=MSmartSensorSetErrorRequest.ESmartSensorError.kSmartSensorErrorGeneric):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 407, "column_number": 22, "text": "'MSmartSensorSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    sensor_err_req = MSmartSensorSetErrorRequest(index=idx, error=error_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 408, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 410, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 413, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_drive_error(channel, idx=1,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 414, "column_number": 30, "text": "'MDDriveSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                    error_nr=MDDriveSetErrorRequest.EBuretteDriveError.kBuretteDriveErrorGeneric):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 419, "column_number": 21, "text": "'MDDriveSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    drive_err_req = MDDriveSetErrorRequest(index=idx, error=error_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 420, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 422, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}, {"code": "D103", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 425, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_pump_error(channel, idx=1,\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 426, "column_number": 29, "text": "'MPumpSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "                   error_nr=MPumpSetErrorRequest.EPumpError.kPumpErrorGeneric):\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 431, "column_number": 20, "text": "'MPumpSetErrorRequest' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    pump_err_req = MPumpSetErrorRequest(index=idx, error=error_nr)\n"}, {"code": "F405", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 432, "column_number": 12, "text": "'SimInstfwkServiceStub' may be undefined, or defined from star imports: utils.automation_grpc.v2.instfwk_common_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2, utils.automation_grpc.v2.sim_inst_ti_pb2_grpc, utils.automation_grpc.v2.sim_instfwk_pb2, utils.automation_grpc.v2.sim_instfwk_pb2_grpc, utils.automation_grpc.v2.sim_tfw_pb2, utils.automation_grpc.v2.sim_tfw_pb2_grpc", "physical_line": "    stub = SimInstfwkServiceStub(channel)\n"}, {"code": "R504", "filename": ".\\utils\\automation_grpc\\v2\\calls.py", "line_number": 434, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return grpc_response\n"}], ".\\utils\\automation_grpc\\v2\\__init__.py": [{"code": "D104", "filename": ".\\utils\\automation_grpc\\v2\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\dev_help\\db_orm_meta_gen.py": [{"code": "D100", "filename": ".\\utils\\dev_help\\db_orm_meta_gen.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from sqlalchemy import create_engine, MetaData\n"}], ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py": [{"code": "D100", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "#!/usr/bin/env python\n"}, {"code": "D205", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 50, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Function to add field and value to the header body for creation of work item\n    Parameters\n    ----------\n    field : Field of workitem\n    value : Value for the field\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 50, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Function to add field and value to the header body for creation of work item\n    Parameters\n    ----------\n    field : Field of workitem\n    value : Value for the field\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 50, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Function to add field and value to the header body for creation of work item\n    Parameters\n    ----------\n    field : Field of workitem\n    value : Value for the field\n    \"\"\"\n"}, {"code": "A002", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 66, "column_number": 38, "text": "argument \"type\" is shadowing a python builtin", "physical_line": "def add_data_to_link(source, target, type):\n"}, {"code": "D205", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 67, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Function to add Source, target and Link reference type on the header body\n    to update the workitems with the links\n    Parameters\n    ----------\n    source : Source workitem to create link\n    target : target workitem to be linked with source\n    type : Reference link type\n\n    Returns Header body to update the workitem.\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 67, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Function to add Source, target and Link reference type on the header body\n    to update the workitems with the links\n    Parameters\n    ----------\n    source : Source workitem to create link\n    target : target workitem to be linked with source\n    type : Reference link type\n\n    Returns Header body to update the workitem.\n    -------\n\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 67, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    Function to add Source, target and Link reference type on the header body\n    to update the workitems with the links\n    Parameters\n    ----------\n    source : Source workitem to create link\n    target : target workitem to be linked with source\n    type : Reference link type\n\n    Returns Header body to update the workitem.\n    -------\n\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 98, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return header_body_to_link\n"}, {"code": "E800", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 101, "column_number": 1, "text": "Found commented out code", "physical_line": "# {\"lxc_ref_name\":\"anachem_ref_name\"}\n"}, {"code": "E800", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 123, "column_number": 1, "text": "Found commented out code", "physical_line": "# {lxc_link_type : ana_link_type}\n"}, {"code": "E800", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 143, "column_number": 1, "text": "Found commented out code", "physical_line": "        # {\"anachem_ref_name\":\"value\"}\n"}, {"code": "E231", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 167, "column_number": 25, "text": "missing whitespace after ','", "physical_line": "        for lxc_ref_name,ana_ref_name in lxc_anachem_fields_mapping.items():\n"}, {"code": "B007", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 167, "column_number": 26, "text": "Loop control variable 'ana_ref_name' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "        for lxc_ref_name,ana_ref_name in lxc_anachem_fields_mapping.items():\n"}, {"code": "T201", "filename": ".\\utils\\lxc_hr_sync\\lxc_hr_sync.py", "line_number": 193, "column_number": 1, "text": "print found.", "physical_line": "print(labx_anachem_id_mapping)\n"}], ".\\utils\\lxc_hr_sync\\__init__.py": [{"code": "D104", "filename": ".\\utils\\lxc_hr_sync\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\parsers\\ado_pipeline_details.py": [{"code": "D100", "filename": ".\\utils\\parsers\\ado_pipeline_details.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import json\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\ado_pipeline_details.py", "line_number": 1, "column_number": 1, "text": "'json' imported but unused", "physical_line": "import json\n"}, {"code": "D103", "filename": ".\\utils\\parsers\\ado_pipeline_details.py", "line_number": 3, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_pipeline_details(file_path):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\ado_pipeline_details.py", "line_number": 3, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def parse_pipeline_details(file_path):\n"}, {"code": "D103", "filename": ".\\utils\\parsers\\ado_pipeline_details.py", "line_number": 12, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_build_details(file_path):\n"}], ".\\utils\\parsers\\gherkin.py": [{"code": "D100", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from typing import Union\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 1, "column_number": 1, "text": "'typing.Union' imported but unused", "physical_line": "from typing import Union\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 2, "column_number": 1, "text": "'behave' imported but unused", "physical_line": "import behave\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 3, "column_number": 1, "text": "'behave.model.Scenario' imported but unused", "physical_line": "from behave.model import Scenario, Feature\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 3, "column_number": 1, "text": "'behave.model.Feature' imported but unused", "physical_line": "from behave.model import Scenario, Feature\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 4, "column_number": 1, "text": "'behave.parser' imported but unused", "physical_line": "from behave import parser\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 5, "column_number": 1, "text": "'pathlib' imported but unused", "physical_line": "import pathlib\n"}, {"code": "W391", "filename": ".\\utils\\parsers\\gherkin.py", "line_number": 18, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\parsers\\pdf.py": [{"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 1, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "\"\"\"\n\nThe parser.pdf module contains functions to extract the contents of PDF files created by G5 instruments.\nIt relies on the pdfminer.six Python package, whose documentation can be found on ReadTheDocs:\nhttps://pdfminersix.readthedocs.io/en/latest/\n\n\"\"\"\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTTextContainer' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTChar' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTRect' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTLine' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTTextBox' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 13, "column_number": 1, "text": "'pdfminer.layout.LTTextBoxHorizontal' imported but unused", "physical_line": "from pdfminer.layout import LAParams, LTTextContainer, LTChar, LTRect, LTFigure, LTLine, LTImage, LTTextBox, LTTextBoxHorizontal\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 15, "column_number": 1, "text": "'pdfminer.high_level.extract_pages' imported but unused", "physical_line": "from pdfminer.high_level import extract_pages\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 17, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#from PIL import Image -> used if pdfminer.image.image.ImageWriter is not used to save and alternate way is used\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 22, "column_number": 1, "text": "'time' imported but unused", "physical_line": "import time\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 24, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#List to be used in set and get_coordinate_checked_list()\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 27, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_coordinate_checked_list():\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 28, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #returns the overlapping coordinates of rectangles\n"}, {"code": "D200", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 29, "column_number": 1, "text": "One-line docstring should fit on one line with quotes", "physical_line": "    \"\"\"\n    :return: list of overlapping coordinates\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 29, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :return: list of overlapping coordinates\n    \"\"\"\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 34, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def set_coordinate_checked_list(coordinates):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 35, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #appends the overlapping coordinates of rectangles\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 36, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param coordinates: list of overlapping coordinates to be appended in coordinate_checked_list\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 36, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param coordinates: list of overlapping coordinates to be appended in coordinate_checked_list\n    :return:\n    \"\"\"\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 42, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def overlap_checked_for(coordinates):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 45, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param coordinates: coordinates of two rectangles\n    :return: True if already checked, else False\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 45, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param coordinates: coordinates of two rectangles\n    :return: True if already checked, else False\n    \"\"\"\n"}, {"code": "R505", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 49, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if coordinates in get_coordinate_checked_list():\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 55, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def __isRectangleOverlap(R1, R2):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 56, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #checks if two rectangles overlap\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 57, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param R1: Rectangle1 with cordinates [x0,y0,x1,y1]\n    :param R2: Rectangle1 with cordinates [x0,y0,x1,y1]\n    :return: True if rectangles overlaps else False\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 57, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param R1: Rectangle1 with cordinates [x0,y0,x1,y1]\n    :param R2: Rectangle1 with cordinates [x0,y0,x1,y1]\n    :return: True if rectangles overlaps else False\n    \"\"\"\n"}, {"code": "R505", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 62, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if (R1[0] >= R2[2]) or (R1[2] <= R2[0]) or (R1[3] <= R2[1]) or (R1[1] >= R2[3]):\n"}, {"code": "T201", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 65, "column_number": 9, "text": "print found.", "physical_line": "        print(\"Rectangle1 {} overlaps with Rectangle2 {}\".format(R1,R2))\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 65, "column_number": 68, "text": "missing whitespace after ','", "physical_line": "        print(\"Rectangle1 {} overlaps with Rectangle2 {}\".format(R1,R2))\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 69, "column_number": 1, "text": "Cognitive complexity is too high (38 > 7)", "physical_line": "def __splitByHeightandWidth(rectangles):\n"}, {"code": "D201", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 74, "column_number": 1, "text": "No blank lines allowed before function docstring", "physical_line": "    \"\"\"\n    :param rectangles: list of rectangle coordinates each designed as designed as [x0,y0,x1,y1]\n    :return:list of rectangle grouped with respect to section, suspect list which holds the rectangles\n            positioned in more than one section\n    \"\"\"\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 74, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n    :param rectangles: list of rectangle coordinates each designed as designed as [x0,y0,x1,y1]\n    :return:list of rectangle grouped with respect to section, suspect list which holds the rectangles\n            positioned in more than one section\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 74, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param rectangles: list of rectangle coordinates each designed as designed as [x0,y0,x1,y1]\n    :return:list of rectangle grouped with respect to section, suspect list which holds the rectangles\n            positioned in more than one section\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 74, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param rectangles: list of rectangle coordinates each designed as designed as [x0,y0,x1,y1]\n    :return:list of rectangle grouped with respect to section, suspect list which holds the rectangles\n            positioned in more than one section\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 145, "column_number": 1, "text": "Cognitive complexity is too high (17 > 7)", "physical_line": "def find_overlap(rectangles):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 145, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def find_overlap(rectangles):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 146, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Find all possible overlap between the list of rectangles\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 147, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Sample data arr =[[0,0,2,2],[0,0,2,7],[0,2,10,3],[3,0,4,1],[6,1,8,8],[0,7,2,8],[4,5,5,6],\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 148, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #[4,6,10,7],[9,3,10,5],[5,3,6,4],[4,3,6,5],[4,3,5,6]]\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 149, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param split_Rectangles: list of rectangle grouped with respect to section\n    :param sus_list: list which holds the rectangles positioned in more than one section\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 149, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param split_Rectangles: list of rectangle grouped with respect to section\n    :param sus_list: list which holds the rectangles positioned in more than one section\n    :return:\n    \"\"\"\n"}, {"code": "E203", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 154, "column_number": 21, "text": "whitespace before ','", "physical_line": "    split_Rectangles , sus_list = __splitByHeightandWidth(rectangles)\n"}, {"code": "B007", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 156, "column_number": 13, "text": "Loop control variable 'rect' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "        for rect in range(len(section)-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 156, "column_number": 39, "text": "missing whitespace around arithmetic operator", "physical_line": "        for rect in range(len(section)-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 157, "column_number": 40, "text": "missing whitespace around arithmetic operator", "physical_line": "            for i in range(len(section)-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 158, "column_number": 44, "text": "missing whitespace around arithmetic operator", "physical_line": "                if section[0] and section[i+1] in sus_list:\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 159, "column_number": 59, "text": "missing whitespace after ','", "physical_line": "                    if not overlap_checked_for([section[0],section[i+1]]):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 159, "column_number": 69, "text": "missing whitespace around arithmetic operator", "physical_line": "                    if not overlap_checked_for([section[0],section[i+1]]):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 160, "column_number": 56, "text": "missing whitespace after ','", "physical_line": "                        __isRectangleOverlap(section[0],section[i+1])\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 160, "column_number": 66, "text": "missing whitespace around arithmetic operator", "physical_line": "                        __isRectangleOverlap(section[0],section[i+1])\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 162, "column_number": 52, "text": "missing whitespace after ','", "physical_line": "                    __isRectangleOverlap(section[0],section[i+1])\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 162, "column_number": 62, "text": "missing whitespace around arithmetic operator", "physical_line": "                    __isRectangleOverlap(section[0],section[i+1])\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 166, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def ready_pdf(pdf_file_like_obj: [pathlib.Path, str, pdfminer.pdfdocument.PDFDocument]) \\\n        -> pdfminer.pdfdocument.PDFDocument:\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 168, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The ready_pdf() function simplifies dealing with PDF files. If the input parameter is a file, it will open and\n    parse it. If it's an already parsed PDF document, it will reset the cursor to the beginning of the file, as\n    many errors arise from trying to read from a file that is already closed, or been read halfway.\n\n    :param pdf_file_like_obj: The PDF file to be used, represented by either a path-like object [string or pathlib.Path]\n    or a PDF document parsed by PDFMiner.\n    :return: A PDFMiner document (pdfminer.pdfdocument.PDFDocument) with the cursor set to the beginning of the file.\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 168, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The ready_pdf() function simplifies dealing with PDF files. If the input parameter is a file, it will open and\n    parse it. If it's an already parsed PDF document, it will reset the cursor to the beginning of the file, as\n    many errors arise from trying to read from a file that is already closed, or been read halfway.\n\n    :param pdf_file_like_obj: The PDF file to be used, represented by either a path-like object [string or pathlib.Path]\n    or a PDF document parsed by PDFMiner.\n    :return: A PDFMiner document (pdfminer.pdfdocument.PDFDocument) with the cursor set to the beginning of the file.\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 168, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The ready_pdf() function simplifies dealing with PDF files. If the input parameter is a file, it will open and\n    parse it. If it's an already parsed PDF document, it will reset the cursor to the beginning of the file, as\n    many errors arise from trying to read from a file that is already closed, or been read halfway.\n\n    :param pdf_file_like_obj: The PDF file to be used, represented by either a path-like object [string or pathlib.Path]\n    or a PDF document parsed by PDFMiner.\n    :return: A PDFMiner document (pdfminer.pdfdocument.PDFDocument) with the cursor set to the beginning of the file.\n    \"\"\"\n"}, {"code": "D402", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 168, "column_number": 1, "text": "First line should not be the function's \"signature\"", "physical_line": "    \"\"\"\n    The ready_pdf() function simplifies dealing with PDF files. If the input parameter is a file, it will open and\n    parse it. If it's an already parsed PDF document, it will reset the cursor to the beginning of the file, as\n    many errors arise from trying to read from a file that is already closed, or been read halfway.\n\n    :param pdf_file_like_obj: The PDF file to be used, represented by either a path-like object [string or pathlib.Path]\n    or a PDF document parsed by PDFMiner.\n    :return: A PDFMiner document (pdfminer.pdfdocument.PDFDocument) with the cursor set to the beginning of the file.\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 198, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return pdf_doc\n"}, {"code": "D103", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 200, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def convertPdfDatetime(pd):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 200, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def convertPdfDatetime(pd):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 203, "column_number": 28, "text": "missing whitespace after ','", "physical_line": "    clean = pd.replace(\"D:\",\"\").split('+')[0]\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 204, "column_number": 35, "text": "missing whitespace after ','", "physical_line": "    return datetime.strptime(clean,dtformat)\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 206, "column_number": 1, "text": "Cognitive complexity is too high (10 > 7)", "physical_line": "def extract_pdf_meta(pdf_file_like_obj):\n"}, {"code": "D103", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 206, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def extract_pdf_meta(pdf_file_like_obj):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 206, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def extract_pdf_meta(pdf_file_like_obj):\n"}, {"code": "SIM118", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 222, "column_number": 8, "text": "Use '\"CreationDate\" in pdf_meta' instead of '\"CreationDate\" in pdf_meta.keys()'", "physical_line": "    if \"CreationDate\" in pdf_meta.keys():\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 229, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #private method used to parse pdf and creates pages, interpreter, device object and returns the same\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 230, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param my_pdf: Accepts the PDF file path\n    :return: pdf pages object, interpreter and device object\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 230, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param my_pdf: Accepts the PDF file path\n    :return: pdf pages object, interpreter and device object\n    \"\"\"\n"}, {"code": "SIM115", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 235, "column_number": 10, "text": "Use context handler for opening files", "physical_line": "    fp = open(my_pdf, 'rb')\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 242, "column_number": 1, "text": "Found commented out code", "physical_line": "    # document = PDFDocument(parser, password)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 253, "column_number": 30, "text": "missing whitespace after ','", "physical_line": "    return pages, interpreter,device\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 255, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def __save_image(el,img_writer,extracted_image_path,image_info):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 255, "column_number": 20, "text": "missing whitespace after ','", "physical_line": "def __save_image(el,img_writer,extracted_image_path,image_info):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 255, "column_number": 31, "text": "missing whitespace after ','", "physical_line": "def __save_image(el,img_writer,extracted_image_path,image_info):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 255, "column_number": 52, "text": "missing whitespace after ','", "physical_line": "def __save_image(el,img_writer,extracted_image_path,image_info):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 256, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #private method to save the image in the specified path, called from extract_image method, and adds info about each\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 258, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param el: each element parsed from pdf\n    :param img_writer: image_writer object to save images in the directory\n    :param extracted_image_path : path where extracted image is saved, along with image name it is used as key in dict\n    for image reference\n    :param image_info : dictionary to save path and name of image as key and image attr as value\n    :return: image_info dictionary which has image path as key and image attribute as value\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 258, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param el: each element parsed from pdf\n    :param img_writer: image_writer object to save images in the directory\n    :param extracted_image_path : path where extracted image is saved, along with image name it is used as key in dict\n    for image reference\n    :param image_info : dictionary to save path and name of image as key and image attr as value\n    :return: image_info dictionary which has image path as key and image attribute as value\n    \"\"\"\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 267, "column_number": 22, "text": "missing whitespace after ','", "physical_line": "        if hasattr(im,\"stream\"):\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 269, "column_number": 1, "text": "Found commented out code", "physical_line": "                #time.sleep(.1)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 269, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #time.sleep(.1)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 273, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #below implementation tried without pdfminer image writer, in below case image name can be\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 291, "column_number": 1, "text": "Found commented out code", "physical_line": "                \"\"\"try:\n                    imdata = im.stream.get_data()\n                except:\n                    # Failed to decode (seems to happen nearly always - there's probably a bug in PDFMiner), oh well...\n                    imdata = im.stream.get_rawdata()\n                #if imdata is not None and imdata.startswith(b'\\xff\\xd8\\xff\\xe0'):\n                if imdata is not None and imdata.startswith(b'\\xff\\xd8\\xff'):\n                #if imdata is not None:\n                    print(im.stream.attrs)\n                    print(im)\n                    image = Image.open(io.BytesIO(imdata))\n                    time.sleep(.1)\n                    image.save(\"images/img\" + str(im.bbox[0]) + \"_\" + str(im.bbox[1]) + \"_\" + str(im.bbox[2]) + \"_\" +\n                               str(im.bbox[2]) + \".jpg\")\n\n                    #get_rawdata throws none inside this method for this image format\n                    #img_writer.export_image(im)\n                else:\n                    img_writer.export_image(im)\n                    print(im.stream.attrs)\n                    print(im)\"\"\"\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 297, "column_number": 29, "text": "missing whitespace after ','", "physical_line": "            if isinstance(im,LTFigure):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 298, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "                __save_image(im,img_writer,extracted_image_path,image_info)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 298, "column_number": 43, "text": "missing whitespace after ','", "physical_line": "                __save_image(im,img_writer,extracted_image_path,image_info)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 298, "column_number": 64, "text": "missing whitespace after ','", "physical_line": "                __save_image(im,img_writer,extracted_image_path,image_info)\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 301, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def extract_image(pdf,extracted_image_path):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 301, "column_number": 22, "text": "missing whitespace after ','", "physical_line": "def extract_image(pdf,extracted_image_path):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 302, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Go through each pages and extracts the images and saves in the specified path\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 303, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n    :param pdf: Accepts the PDF file path\n    :param extracted_image_path : path where extracted image has to be saved, path to be passed in str format\n    :return: image_info dictionary which has image path as key and image attribute as value\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 303, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param pdf: Accepts the PDF file path\n    :param extracted_image_path : path where extracted image has to be saved, path to be passed in str format\n    :return: image_info dictionary which has image path as key and image attribute as value\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 303, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param pdf: Accepts the PDF file path\n    :param extracted_image_path : path where extracted image has to be saved, path to be passed in str format\n    :return: image_info dictionary which has image path as key and image attribute as value\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 309, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #dictionary to save path and name of image as key and image attr as value\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 311, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #image writer object to save image in the specified path\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 313, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #to get page, interpreter, device object of pdf file\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 314, "column_number": 10, "text": "missing whitespace after ','", "physical_line": "    pages,interpreter,device = __get_pdf_data(pdf)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 314, "column_number": 22, "text": "missing whitespace after ','", "physical_line": "    pages,interpreter,device = __get_pdf_data(pdf)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 323, "column_number": 57, "text": "missing whitespace after ','", "physical_line": "                image_info = __save_image(el, img_writer,extracted_image_path,image_info)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\pdf.py", "line_number": 323, "column_number": 78, "text": "missing whitespace after ','", "physical_line": "                image_info = __save_image(el, img_writer,extracted_image_path,image_info)\n"}], ".\\utils\\parsers\\workitem_description.py": [{"code": "D100", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from bs4 import BeautifulSoup\n"}, {"code": "F401", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 5, "column_number": 1, "text": "'functools' imported but unused", "physical_line": "import functools\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 7, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_html_content(html_source, html_source_type):\n"}, {"code": "D201", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 9, "column_number": 1, "text": "No blank lines allowed before function docstring", "physical_line": "    \"\"\"\n    This function gets the html content object from html source\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : html content object extracted from the source\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 9, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function gets the html content object from html source\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : html content object extracted from the source\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 9, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function gets the html content object from html source\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : html content object extracted from the source\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 9, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function gets the html content object from html source\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : html content object extracted from the source\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 15, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To get the object containing html content from the given source\n"}, {"code": "SIM115", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 19, "column_number": 21, "text": "Use context handler for opening files", "physical_line": "        html_file = open(html_source, 'r', encoding='utf-8')\n"}, {"code": "R504", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 25, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return html_code\n"}, {"code": "D201", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 30, "column_number": 1, "text": "No blank lines allowed before function docstring", "physical_line": "    \"\"\"\n    This function extracts all the text from html content object and returns the text\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : text extracted from the html content object\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 30, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function extracts all the text from html content object and returns the text\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : text extracted from the html content object\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 30, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function extracts all the text from html content object and returns the text\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : text extracted from the html content object\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 30, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function extracts all the text from html content object and returns the text\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :returns : text extracted from the html content object\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 36, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To extract all the text from html content\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 39, "column_number": 1, "text": "Found commented out code", "physical_line": "    #all_text = html_code.stripped_strings\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 39, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #all_text = html_code.stripped_strings\n"}, {"code": "R504", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 40, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return all_text\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 44, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :param txt_out:  output file path to with the text extracted from html code\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 44, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :param txt_out:  output file path to with the text extracted from html code\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 49, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Function call to write text extracted from html to output file\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 55, "column_number": 85, "text": "missing whitespace after ','", "physical_line": "def get_text_for_specific_tag(html_source, html_source_type, tag_name, method=\"find\",*args):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 56, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :param tag_name: specific tag name to get the text from\n    :param method: find - to get the text of firstly appeared tag, findAll - to get the text of all specified tag\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 56, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param html_source: html code or html filepath\n    :param html_source_type: describe whether source is code or filepath\n    :param tag_name: specific tag name to get the text from\n    :param method: find - to get the text of firstly appeared tag, findAll - to get the text of all specified tag\n    :return:\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 63, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #extracting text of a specific tag from html source\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 67, "column_number": 47, "text": "missing whitespace after ','", "physical_line": "        tag_texts = html_code.findAll(tag_name,args)\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 74, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def __get_cell_value(cell):\n"}, {"code": "R504", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 81, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return cell_value\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 83, "column_number": 1, "text": "Cognitive complexity is too high (75 > 7)", "physical_line": "def _html_table_to_matrix(table):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 83, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def _html_table_to_matrix(table):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 84, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : table tag from the soup is passed\n\n    Returns : returns the content of the table as list\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 84, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : table tag from the soup is passed\n\n    Returns : returns the content of the table as list\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 107, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #header having mutliple sub heading is handled\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 108, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #id any cell in header row having rowspan is considered only then subheading will be available\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 109, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #if any cell have row span in header then cell having colspan is taken into account to handle subheading\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 114, "column_number": 68, "text": "missing whitespace around arithmetic operator", "physical_line": "                        for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 115, "column_number": 98, "text": "missing whitespace around arithmetic operator", "physical_line": "                            cell_val = cell_value + \"_\" + __get_cell_value(all_rows_cells[row_idx+1][col])\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 117, "column_number": 54, "text": "missing whitespace around operator", "physical_line": "                            cell_value = cell_value +\"_\" + __get_cell_value(all_rows_cells[row_idx+1][col + 1])\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 117, "column_number": 99, "text": "missing whitespace around arithmetic operator", "physical_line": "                            cell_value = cell_value +\"_\" + __get_cell_value(all_rows_cells[row_idx+1][col + 1])\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 119, "column_number": 51, "text": "missing whitespace around arithmetic operator", "physical_line": "                        all_rows_cells.pop(row_idx+1)\n"}, {"code": "B007", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 121, "column_number": 29, "text": "Loop control variable 'col' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "                        for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 121, "column_number": 68, "text": "missing whitespace around arithmetic operator", "physical_line": "                        for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 126, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #-----------------------for other cell than header-----------------------------------------------\n"}, {"code": "B007", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 135, "column_number": 37, "text": "Loop control variable 'col' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "                                for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 135, "column_number": 76, "text": "missing whitespace around arithmetic operator", "physical_line": "                                for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 136, "column_number": 1, "text": "Found commented out code", "physical_line": "                                    #all_rows_cells[nxt_idx].append(cell_value)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 136, "column_number": 37, "text": "block comment should start with '# '", "physical_line": "                                    #all_rows_cells[nxt_idx].append(cell_value)\n"}, {"code": "B007", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 141, "column_number": 29, "text": "Loop control variable 'col' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "                        for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 141, "column_number": 68, "text": "missing whitespace around arithmetic operator", "physical_line": "                        for col in range(int(cell.attrs['colspan'])-1):\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 142, "column_number": 1, "text": "Found commented out code", "physical_line": "                                #all_rows_cells[row_idx].append(cell_value)\n"}, {"code": "E117", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 142, "column_number": 33, "text": "over-indented (comment)", "physical_line": "                                #all_rows_cells[row_idx].append(cell_value)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 142, "column_number": 33, "text": "block comment should start with '# '", "physical_line": "                                #all_rows_cells[row_idx].append(cell_value)\n"}, {"code": "E117", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 143, "column_number": 33, "text": "over-indented", "physical_line": "                                all_rows_cells[row_idx].insert(cell_idx,cell_value)\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 143, "column_number": 72, "text": "missing whitespace after ','", "physical_line": "                                all_rows_cells[row_idx].insert(cell_idx,cell_value)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 145, "column_number": 21, "text": "block comment should start with '# '", "physical_line": "                    #-------------------------------------------------------------------------\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 151, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def _get_all_tables_content(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 152, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    tables : Tables tag from the soup is passed\n\n    Returns : Content of the tables as the list\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 152, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    tables : Tables tag from the soup is passed\n\n    Returns : Content of the tables as the list\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 162, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Private method used to extract contents out of the tables tag collected from soup\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 171, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : each and every table tag from the soup is passed\n\n    Returns : boolean value checking if the table is parameter table\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 171, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : each and every table tag from the soup is passed\n\n    Returns : boolean value checking if the table is parameter table\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 181, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #checks if the table is a parameter table and returns the boolean\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 190, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def _is_description_table(table):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 191, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : each and every table tag from the soup is passed\n\n    Returns : boolean value checking if the table is description table\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 191, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    table : each and every table tag from the soup is passed\n\n    Returns : boolean value checking if the table is description table\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 201, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #checks if the table is a parameter table and returns the boolean\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 212, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no striked out text\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 212, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no striked out text\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 222, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To remove the striked out content from soup\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 223, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Alternate way to filter out tags from soup, but it takes more time for soup having more striked out contents\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 226, "column_number": 1, "text": "Found commented out code", "physical_line": "    \"\"\"strikeout_tags = soup.findAll(\"span\",\"msoDel\")\n    for tag in strikeout_tags:\n        #soup.findAll(tag).source.name.extract()\n        soup.findAll(tag).source.name.decompose()\n    print(soup)\n    return soup\"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 231, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #trying different method as previous implementation is slow\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 232, "column_number": 52, "text": "missing whitespace after ','", "physical_line": "    striked_out_text_size = len(soup.findAll(\"span\",\"msoDel\"))\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 234, "column_number": 37, "text": "missing whitespace after ','", "physical_line": "        x = len(soup.find_all(\"span\",\"msoDel\")) - 1\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 235, "column_number": 29, "text": "missing whitespace after ','", "physical_line": "        soup.find_all(\"span\",\"msoDel\")[x].extract()\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 240, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no parameter table\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 240, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no parameter table\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 240, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no parameter table\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 251, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To remove the parameter table from soup\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 261, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no comment text\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 261, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no comment text\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 261, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    soup : soup extracted from html code or html filepath\n\n    Returns : soup having no comment text\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 272, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To remove the comment section from the soup\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 273, "column_number": 48, "text": "missing whitespace after ','", "physical_line": "    comment_text_size = len(soup.find_all(\"div\",\"msocomtxt\"))\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 275, "column_number": 36, "text": "missing whitespace after ','", "physical_line": "        x = len(soup.find_all(\"div\",\"msocomtxt\"))-1\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 275, "column_number": 50, "text": "missing whitespace around arithmetic operator", "physical_line": "        x = len(soup.find_all(\"div\",\"msocomtxt\"))-1\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 276, "column_number": 28, "text": "missing whitespace after ','", "physical_line": "        soup.find_all(\"div\",\"msocomtxt\")[x].extract()\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 281, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : Description of the work item\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 281, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : Description of the work item\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 281, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : Description of the work item\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 293, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To get the description text from soup, parameter table, striked out text, comments will be filtered out\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 294, "column_number": 40, "text": "missing whitespace after ','", "physical_line": "    soup = get_html_content(html_source,html_source_type)\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 298, "column_number": 1, "text": "Found commented out code", "physical_line": "    #desc = soup.findAll(\"p\",\"MsoNormal\")\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 298, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #desc = soup.findAll(\"p\",\"MsoNormal\")\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 303, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : List having table content of all the table from html\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 303, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : List having table content of all the table from html\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 303, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n\n    Returns : List having table content of all the table from html\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 315, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #To get all the table content from soup\n"}, {"code": "R504", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 319, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return all_tables_content\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 321, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_parameter_table(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 322, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: only the parameter table\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 322, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: only the parameter table\n    \"\"\"\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 326, "column_number": 20, "text": "missing whitespace around operator", "physical_line": "    parameter_table=[]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 328, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #if [True for val in table[0] if \"parameter\" in val.lower()] and not [True for val in table[0] if \"description\" in val.lower()]:\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 329, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #if (\"parameter\" in map(str.lower,table[0]) or \"parameters\" in map(str.lower,table[0])) and not (\"description\" in map(str.lower,table[0] or \"descriptions\" in map(str.lower,table[0]))):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 337, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_description_table(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 338, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: only the description table\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 338, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: only the description table\n    \"\"\"\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 342, "column_number": 22, "text": "missing whitespace around operator", "physical_line": "    description_table=[]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 344, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #if [True for val in table[0] if \"parameter\" in val.lower()] and not [True for val in table[0] if \"description\" in val.lower()]:\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 345, "column_number": 41, "text": "missing whitespace after ','", "physical_line": "        if (\"parameter\" in map(str.lower,table[0]) or \"parameters\" in map(str.lower,table[0])) and (\"description\" in map(str.lower,table[0] or \"descriptions\" in map(str.lower,table[0]))):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 345, "column_number": 84, "text": "missing whitespace after ','", "physical_line": "        if (\"parameter\" in map(str.lower,table[0]) or \"parameters\" in map(str.lower,table[0])) and (\"description\" in map(str.lower,table[0] or \"descriptions\" in map(str.lower,table[0]))):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 345, "column_number": 131, "text": "missing whitespace after ','", "physical_line": "        if (\"parameter\" in map(str.lower,table[0]) or \"parameters\" in map(str.lower,table[0])) and (\"description\" in map(str.lower,table[0] or \"descriptions\" in map(str.lower,table[0]))):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 345, "column_number": 175, "text": "missing whitespace after ','", "physical_line": "        if (\"parameter\" in map(str.lower,table[0]) or \"parameters\" in map(str.lower,table[0])) and (\"description\" in map(str.lower,table[0] or \"descriptions\" in map(str.lower,table[0]))):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 349, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def write_table_to_csv(html_source, html_source_type,csv_file):\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 349, "column_number": 53, "text": "missing whitespace after ','", "physical_line": "def write_table_to_csv(html_source, html_source_type,csv_file):\n"}, {"code": "D202", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 350, "column_number": 1, "text": "No blank lines allowed after function docstring", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n    csv_file : csv file path to write the table contents\n    -------\n\n    \"\"\"\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 350, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n    csv_file : csv file path to write the table contents\n    -------\n\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 350, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    Parameters\n    ----------\n    html_source : html code or html filepath\n    html_source_type : describe whether source is code or filepath\n    csv_file : csv file path to write the table contents\n    -------\n\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 361, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #Writing all the table content to csv file\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 364, "column_number": 32, "text": "missing whitespace after ','", "physical_line": "        with open(csv_file, 'a',newline='') as csvfile:\n"}, {"code": "E251", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 365, "column_number": 62, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "            header_writer = csv.DictWriter(csvfile, delimiter = \",\",fieldnames=table[0])\n"}, {"code": "E251", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 365, "column_number": 64, "text": "unexpected spaces around keyword / parameter equals", "physical_line": "            header_writer = csv.DictWriter(csvfile, delimiter = \",\",fieldnames=table[0])\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 365, "column_number": 68, "text": "missing whitespace after ','", "physical_line": "            header_writer = csv.DictWriter(csvfile, delimiter = \",\",fieldnames=table[0])\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 371, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #inserting empty row after every table\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 374, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#to check if all elements are same in list\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 375, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def is_val_same_in(row):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 376, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param row: any list items\n    :return: bool value, True if all value in list are same else False\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 376, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param row: any list items\n    :return: bool value, True if all value in list are same else False\n    \"\"\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 383, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#to assign parameter to specific tab area,\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 384, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#if table has \"tab\", \"tab\" will be set as \"key\" and rows following it until next tab will be assigned as value for the \"tab\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 385, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#parameter tables extracted from get_all_parameter_table() has to be sent\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 386, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def map_parameters_to_tab_area(param_tables):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 386, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def map_parameters_to_tab_area(param_tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 387, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param tables: parameter tables extracted from get_all_parameter_table() has to be sent\n    :return tab_specific_tables: table data mapped to specific tab\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 387, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param tables: parameter tables extracted from get_all_parameter_table() has to be sent\n    :return tab_specific_tables: table data mapped to specific tab\n    \"\"\"\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 394, "column_number": 21, "text": "missing whitespace around operator", "physical_line": "    parameter_tables=param_tables\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 395, "column_number": 1, "text": "Found commented out code", "physical_line": "    #table_header = parameter_table.pop(0)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 395, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #table_header = parameter_table.pop(0)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 399, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #TODO in req 33141, 33142 \"tab\" is not spanned across the col, first col is empty and not spanned.\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 400, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #TODO in SRD014 task preparation screen, tab area are shown in individual tables, has to be checked with Sandor\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 402, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #if \"tab\" in row[0].lower() and is_val_same_in(row):\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 403, "column_number": 98, "text": "missing whitespace around arithmetic operator", "physical_line": "            if len([is_tab_row for is_tab_row in row if \"tab\" in is_tab_row.lower()]) >= len(row)/2:\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 405, "column_number": 1, "text": "Found commented out code", "physical_line": "                #tabs_index[row[0]] = parameter_table.index(row)\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 405, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #tabs_index[row[0]] = parameter_table.index(row)\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 406, "column_number": 1, "text": "Found commented out code", "physical_line": "                #tab_specific_tables[row[0]] = [table_header]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 406, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #tab_specific_tables[row[0]] = [table_header]\n"}, {"code": "E115", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 408, "column_number": 13, "text": "expected an indented block (comment)", "physical_line": "            #----------------------------Trying to fix 33141, 33142 \"tab\" is not spanned across the col ----------\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 408, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #----------------------------Trying to fix 33141, 33142 \"tab\" is not spanned across the col ----------\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 412, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #----------------------------End Trying to fix 33141, 33142 \"tab\" is not spanned across the col --------\n"}, {"code": "E303", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 415, "column_number": 9, "text": "too many blank lines (2)", "physical_line": "        #pos of \"tab\" rows in the parameter table\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 415, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #pos of \"tab\" rows in the parameter table\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 419, "column_number": 33, "text": "missing whitespace around operator", "physical_line": "            if len(tab_rows_pos)>1:\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 420, "column_number": 1, "text": "Found commented out code", "physical_line": "                #[tab_specific_tables[key].extend(table[idx[0]+1:idx[1]]) for table  in parameter_table]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 420, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #[tab_specific_tables[key].extend(table[idx[0]+1:idx[1]]) for table  in parameter_table]\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 421, "column_number": 80, "text": "missing whitespace around arithmetic operator", "physical_line": "                tab_specific_tables[key].extend(parameter_table[tab_rows_pos[0]+1:tab_rows_pos[1]])\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 424, "column_number": 1, "text": "Found commented out code", "physical_line": "                #[tab_specific_tables[key].extend(table[idx[0]+1:len(table)]) for table  in parameter_table]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 424, "column_number": 17, "text": "block comment should start with '# '", "physical_line": "                #[tab_specific_tables[key].extend(table[idx[0]+1:len(table)]) for table  in parameter_table]\n"}, {"code": "E226", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 425, "column_number": 80, "text": "missing whitespace around arithmetic operator", "physical_line": "                tab_specific_tables[key].extend(parameter_table[tab_rows_pos[0]+1:len(parameter_table)])\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 428, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#to assign parameter to specific sub heading,\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 429, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#if table has sub heading, \"sub_head\" will be set as \"key\" and rows following it until next sub heading will be assigned as value for the \"sub_head\"\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 430, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#description tables extracted from get_all_description_table() has to be sent\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 431, "column_number": 1, "text": "Cognitive complexity is too high (12 > 7)", "physical_line": "def map_desc_to_sub_head(desc_tables):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 431, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def map_desc_to_sub_head(desc_tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 432, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n        :desc_tables: description tables extracted from get_all_description_table() has to be sent\n        :return sub_head_specific_tables: table data mapped to specific sub heading\n        \"\"\"\n"}, {"code": "D208", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 432, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "    \"\"\"\n\n        :desc_tables: description tables extracted from get_all_description_table() has to be sent\n        :return sub_head_specific_tables: table data mapped to specific sub heading\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 432, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n        :desc_tables: description tables extracted from get_all_description_table() has to be sent\n        :return sub_head_specific_tables: table data mapped to specific sub heading\n        \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 452, "column_number": 1, "text": "Found commented out code", "physical_line": "                # [tab_specific_tables[key].extend(table[idx[0]+1:idx[1]]) for table  in parameter_table]\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 456, "column_number": 1, "text": "Found commented out code", "physical_line": "                # [tab_specific_tables[key].extend(table[idx[0]+1:len(table)]) for table  in parameter_table]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 460, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#to extract colwise data from the individual table\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 461, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#how to use, extract all tables from soup, and pass individual table to this method\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 462, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_header_wise_value(table):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 463, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param table: single table of tables extracted from the soup\n    :return: dictionary having col wise data from the table,col of row[0] will be key and col of rest rows will be value\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 463, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param table: single table of tables extracted from the soup\n    :return: dictionary having col wise data from the table,col of row[0] will be key and col of rest rows will be value\n    \"\"\"\n"}, {"code": "E127", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 471, "column_number": 55, "text": "continuation line over-indented for visual indent", "physical_line": "                                                      table[1:len(table)]]\n"}, {"code": "E303", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 477, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "#to find additional description table from the tables extracted out of soup, and map description to parameter\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 477, "column_number": 1, "text": "block comment should start with '# '", "physical_line": "#to find additional description table from the tables extracted out of soup, and map description to parameter\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 478, "column_number": 1, "text": "expected 2 blank lines, found 3", "physical_line": "def map_add_description_to_parameter(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 479, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param tables: tables extracted out of the soup\n    :return: param_add_desc dictionary , for every parameter key-> description and comment(if available) are keys and\n            specific col data as values\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 479, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param tables: tables extracted out of the soup\n    :return: param_add_desc dictionary , for every parameter key-> description and comment(if available) are keys and\n            specific col data as values\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 486, "column_number": 1, "text": "Found commented out code", "physical_line": "    #headers = [header for header in description_table[0][1:len(description_table[0])]]\n"}, {"code": "E265", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 486, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #headers = [header for header in description_table[0][1:len(description_table[0])]]\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 488, "column_number": 38, "text": "missing whitespace after ':'", "physical_line": "        param_add_desc[row[0]] = {key:val for key,val in zip(description_table[0][1:len(description_table[0])],row[1:len(row)])}\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 488, "column_number": 50, "text": "missing whitespace after ','", "physical_line": "        param_add_desc[row[0]] = {key:val for key,val in zip(description_table[0][1:len(description_table[0])],row[1:len(row)])}\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 488, "column_number": 111, "text": "missing whitespace after ','", "physical_line": "        param_add_desc[row[0]] = {key:val for key,val in zip(description_table[0][1:len(description_table[0])],row[1:len(row)])}\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 491, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_all_parameter_table(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 492, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n        :param tables: All the table content from soup\n        :return: only the parameter table\n        \"\"\"\n"}, {"code": "D208", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 492, "column_number": 1, "text": "Docstring is over-indented", "physical_line": "    \"\"\"\n        :param tables: All the table content from soup\n        :return: only the parameter table\n        \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 492, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n        :param tables: All the table content from soup\n        :return: only the parameter table\n        \"\"\"\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 506, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_header_of_param_table(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 507, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param parameter_table: all the parameter table from the soup\n    :return: set having the header of the parameter table\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 507, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param parameter_table: all the parameter table from the soup\n    :return: set having the header of the parameter table\n    \"\"\"\n"}, {"code": "CCR001", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 519, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_all_param_and_desc_table(tables):\n"}, {"code": "E302", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 519, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_all_param_and_desc_table(tables):\n"}, {"code": "D205", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 520, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: all parameter tables and descrition tables\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 520, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    :param tables: All the table content from soup\n    :return: all parameter tables and descrition tables\n    \"\"\"\n"}, {"code": "E225", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 525, "column_number": 22, "text": "missing whitespace around operator", "physical_line": "    description_table=[]\n"}, {"code": "E231", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 542, "column_number": 27, "text": "missing whitespace after ','", "physical_line": "    return parameter_table,description_table"}, {"code": "W292", "filename": ".\\utils\\parsers\\workitem_description.py", "line_number": 542, "column_number": 45, "text": "no newline at end of file", "physical_line": "    return parameter_table,description_table"}], ".\\utils\\parsers\\__init__.py": [{"code": "D104", "filename": ".\\utils\\parsers\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\reporting_git_conflicts\\get_git_changes.py": [{"code": "D100", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import pprint\n"}, {"code": "D205", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 30, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function gets the repository ID as input parameter\n    And, it returns the list of branches of object type <GitBranchStats>\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: List of Branches under given repo\n    :rtype: List\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 30, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function gets the repository ID as input parameter\n    And, it returns the list of branches of object type <GitBranchStats>\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: List of Branches under given repo\n    :rtype: List\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 30, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function gets the repository ID as input parameter\n    And, it returns the list of branches of object type <GitBranchStats>\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: List of Branches under given repo\n    :rtype: List\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 39, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return branches\n"}, {"code": "E302", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 41, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_git_branch_commits(git_branches):\n"}, {"code": "D205", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 42, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function gets the commit ID(latest) of each branch\n    And, it returns a dictionary like {'branch_name: 'Commit_id'}\n    :param git_branches: List of Branches and their details\n    :type git_branches: List\n    :return: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 42, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function gets the commit ID(latest) of each branch\n    And, it returns a dictionary like {'branch_name: 'Commit_id'}\n    :param git_branches: List of Branches and their details\n    :type git_branches: List\n    :return: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 42, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function gets the commit ID(latest) of each branch\n    And, it returns a dictionary like {'branch_name: 'Commit_id'}\n    :param git_branches: List of Branches and their details\n    :type git_branches: List\n    :return: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "E222", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 50, "column_number": 29, "text": "multiple spaces after operator", "physical_line": "    commit_id_for_branches =  {}\n"}, {"code": "E302", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 56, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "def get_git_commit_changes(commit_id_dict, rep_id):\n"}, {"code": "D205", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 57, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function gets the changes for each commit\n    It returns a dictionary of files changes and the change type for each branch\n    :param commit_id_dict: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :type commit_id_dict: dict\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_for_branch_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 57, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function gets the changes for each commit\n    It returns a dictionary of files changes and the change type for each branch\n    :param commit_id_dict: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :type commit_id_dict: dict\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_for_branch_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 57, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function gets the changes for each commit\n    It returns a dictionary of files changes and the change type for each branch\n    :param commit_id_dict: commit_id_for_branches dictionary like {'branch_name: 'Commit_id'}\n    :type commit_id_dict: dict\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_for_branch_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "E231", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 69, "column_number": 55, "text": "missing whitespace after ','", "physical_line": "        git_changes = git_client.get_changes(commit_id,rep_id)\n"}, {"code": "D205", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 76, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    This function call the other functions:\n    get_git_branches() -  For getting the branches under the given repo.\n    get_git_branch_commits() - To get the latest commit id for  each branch under a repo\n    get_git_commit_changes() - To get the changes for the commit id  on each branch.\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 76, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    This function call the other functions:\n    get_git_branches() -  For getting the branches under the given repo.\n    get_git_branch_commits() - To get the latest commit id for  each branch under a repo\n    get_git_commit_changes() - To get the changes for the commit id  on each branch.\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 76, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    This function call the other functions:\n    get_git_branches() -  For getting the branches under the given repo.\n    get_git_branch_commits() - To get the latest commit id for  each branch under a repo\n    get_git_commit_changes() - To get the changes for the commit id  on each branch.\n    :param rep_id: Repository ID\n    :type rep_id: String\n    :return: file_changes_dict like {'Branch_name': [{'change_type': 'edit','file_name': 'filename'}]}\n    :rtype: dict\n    \"\"\"\n"}, {"code": "E800", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 88, "column_number": 1, "text": "Found commented out code", "physical_line": "    # pprint.pprint(commit_id_dict)\n"}, {"code": "E800", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 90, "column_number": 1, "text": "Found commented out code", "physical_line": "    # pprint.pprint(file_changes_dict)\n"}, {"code": "R504", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 91, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return file_changes_dict\n"}, {"code": "T203", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 97, "column_number": 5, "text": "pprint found.", "physical_line": "    pprint.pprint(sample_dict)\n"}, {"code": "W391", "filename": ".\\utils\\reporting_git_conflicts\\get_git_changes.py", "line_number": 98, "column_number": 1, "text": "blank line at end of file", "physical_line": "\n"}], ".\\utils\\reporting_git_conflicts\\__init__.py": [{"code": "D104", "filename": ".\\utils\\reporting_git_conflicts\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}], ".\\utils\\requirement_analysis\\commons.py": [{"code": "D100", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import re\n"}, {"code": "D205", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 6, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Remove extra tabs from a string, i.e. replace consecutive tab characters with a single tab\n    :param in_str:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 6, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Remove extra tabs from a string, i.e. replace consecutive tab characters with a single tab\n    :param in_str:\n    :return:\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 12, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return out_str\n"}, {"code": "D205", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 16, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    Remove extra spaces from a string, i.e. replace consecutive space characters with a single space\n    :param in_str:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 16, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    Remove extra spaces from a string, i.e. replace consecutive space characters with a single space\n    :param in_str:\n    :return:\n    \"\"\"\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 22, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return out_str\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 25, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def remove_comment_refs(in_string: str):\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 30, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return comment_free_string\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def list_matches(list_of_patterns: List[str], in_string: str):\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 44, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_references_from_string(input_str: str):\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 45, "column_number": 1, "text": "Found commented out code", "physical_line": "    #ref_keyword_rexs = {'CHAPTER': ['(?i)(Ch[.]?)\\s?([0-9.]+)']}\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 45, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #ref_keyword_rexs = {'CHAPTER': ['(?i)(Ch[.]?)\\s?([0-9.]+)']}\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 46, "column_number": 62, "text": "invalid escape sequence '\\s'", "physical_line": "    ref_keyword_rexs = {'CHAPTER': ['(?i)(?:Ch(?:[.]|apter)?)\\s?([\\d.]*\\d+)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 46, "column_number": 67, "text": "invalid escape sequence '\\d'", "physical_line": "    ref_keyword_rexs = {'CHAPTER': ['(?i)(?:Ch(?:[.]|apter)?)\\s?([\\d.]*\\d+)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 46, "column_number": 72, "text": "invalid escape sequence '\\d'", "physical_line": "    ref_keyword_rexs = {'CHAPTER': ['(?i)(?:Ch(?:[.]|apter)?)\\s?([\\d.]*\\d+)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 48, "column_number": 75, "text": "invalid escape sequence '\\s'", "physical_line": "                        'LINKS_SECTION': ['(?i)(?:(?:See|and|specified in)\\s*)(\\[\\d*\\])'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 48, "column_number": 80, "text": "invalid escape sequence '\\['", "physical_line": "                        'LINKS_SECTION': ['(?i)(?:(?:See|and|specified in)\\s*)(\\[\\d*\\])'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 48, "column_number": 82, "text": "invalid escape sequence '\\d'", "physical_line": "                        'LINKS_SECTION': ['(?i)(?:(?:See|and|specified in)\\s*)(\\[\\d*\\])'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 48, "column_number": 85, "text": "invalid escape sequence '\\]'", "physical_line": "                        'LINKS_SECTION': ['(?i)(?:(?:See|and|specified in)\\s*)(\\[\\d*\\])'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 51, "column_number": 51, "text": "invalid escape sequence '\\s'", "physical_line": "                        'PARAMETER': ['(?i)(?:See)\\s*(\\'.*\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 51, "column_number": 70, "text": "invalid escape sequence '\\s'", "physical_line": "                        'PARAMETER': ['(?i)(?:See)\\s*(\\'.*\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 51, "column_number": 83, "text": "invalid escape sequence '\\s'", "physical_line": "                        'PARAMETER': ['(?i)(?:See)\\s*(\\'.*\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 51, "column_number": 88, "text": "invalid escape sequence '\\d'", "physical_line": "                        'PARAMETER': ['(?i)(?:See)\\s*(\\'.*\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 51, "column_number": 93, "text": "invalid escape sequence '\\d'", "physical_line": "                        'PARAMETER': ['(?i)(?:See)\\s*(\\'.*\\')(?!(?i)[\\s,]*(Ch[.]?)\\s?([\\d.]*\\d+))'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 52, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "                        'REQ_SELF': ['(?i)(?:See)\\s*(above|below)\\s*(within)?\\s*(\\'(.*)\\')?',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 52, "column_number": 66, "text": "invalid escape sequence '\\s'", "physical_line": "                        'REQ_SELF': ['(?i)(?:See)\\s*(above|below)\\s*(within)?\\s*(\\'(.*)\\')?',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 52, "column_number": 78, "text": "invalid escape sequence '\\s'", "physical_line": "                        'REQ_SELF': ['(?i)(?:See)\\s*(above|below)\\s*(within)?\\s*(\\'(.*)\\')?',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 53, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 53, "column_number": 62, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 53, "column_number": 80, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 53, "column_number": 92, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(\\'(.*)\\'\\s*)?(above|below)\\s*(within)?\\s*',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 54, "column_number": 50, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 54, "column_number": 63, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 54, "column_number": 77, "text": "invalid escape sequence '\\s'", "physical_line": "                                     '(?i)(?:See)\\s*(add[a-z]*\\s*desc[a-z]*)\\s*'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\commons.py", "line_number": 55, "column_number": 52, "text": "invalid escape sequence '\\s'", "physical_line": "                        'VAGUE_SRD': ['(?i)(SRD(s)?\\s*([0-9]{3})?)']}\n"}], ".\\utils\\requirement_analysis\\param_analysis.py": [{"code": "D100", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import datetime\n"}, {"code": "F401", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 2, "column_number": 1, "text": "'inspect' imported but unused", "physical_line": "import inspect\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 24, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_pa_format_regex():\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 28, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_pa_format_dict():\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 32, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_pa_value_regex_dict():\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 36, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def init_param_analysis(config_name: str, db_name: str):\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 51, "column_number": 1, "text": "Cognitive complexity is too high (19 > 7)", "physical_line": "def transform_name(param_display_name: str) -> Union[str, None]:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 51, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def transform_name(param_display_name: str) -> Union[str, None]:\n"}, {"code": "CFQ004", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 51, "column_number": 1, "text": "Function \"transform_name\" has 5 returns that exceeds max allowed 3", "physical_line": "def transform_name(param_display_name: str) -> Union[str, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 51, "column_number": 48, "text": "Use 'Optional[str]' instead of 'Union[str, None]'", "physical_line": "def transform_name(param_display_name: str) -> Union[str, None]:\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 82, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return suggested_name\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 85, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def prep_param_attrib(param_attrib: str):\n"}, {"code": "R505", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 86, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if param_attrib is None:\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 94, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def param_format_stemmer(param_format: str) -> dict:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 94, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def param_format_stemmer(param_format: str) -> dict:\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 111, "column_number": 1, "text": "Found commented out code", "physical_line": "            #print(f\"Parts of {param_format} - {parts}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 111, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #print(f\"Parts of {param_format} - {parts}\")\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 117, "column_number": 13, "text": "local variable 'ie' is assigned to but never used", "physical_line": "            except IndexError as ie:\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 122, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_param_format_to_type_matches(param_format_srd: str) -> Union[dict, None]:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 122, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_format_to_type_matches(param_format_srd: str) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 122, "column_number": 64, "text": "Use 'Optional[dict]' instead of 'Union[dict, None]'", "physical_line": "def get_param_format_to_type_matches(param_format_srd: str) -> Union[dict, None]:\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 130, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(f\"All matches for {param_format_srd.strip()}: {all_matches}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 130, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(f\"All matches for {param_format_srd.strip()}: {all_matches}\")\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 137, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(f\"Candidate parts: {candidate_parts}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 137, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(f\"Candidate parts: {candidate_parts}\")\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 170, "column_number": 1, "text": "Found commented out code", "physical_line": "    #print(f\"Candidate rank dict: {candidate_rank}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 170, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #print(f\"Candidate rank dict: {candidate_rank}\")\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 174, "column_number": 1, "text": "Cognitive complexity is too high (11 > 7)", "physical_line": "def get_param_domain_to_type_matches(param_domain_srd: str) -> Union[dict, None]:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 174, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_domain_to_type_matches(param_domain_srd: str) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 174, "column_number": 64, "text": "Use 'Optional[dict]' instead of 'Union[dict, None]'", "physical_line": "def get_param_domain_to_type_matches(param_domain_srd: str) -> Union[dict, None]:\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 180, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"Smorgas: {srd_format} - {value_regex_list}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 180, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"Smorgas: {srd_format} - {value_regex_list}\")\n"}, {"code": "SIM102", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 184, "column_number": 5, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "    if len(set(param_value_format_matches.keys()) - {'READ_ONLY', '(RO)'}) > 0:\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 193, "column_number": 1, "text": "Cognitive complexity is too high (49 > 7)", "physical_line": "def determine_param_taf_type(param_srd_format: str, param_srd_value: str) -> dict:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 193, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def determine_param_taf_type(param_srd_format: str, param_srd_value: str) -> dict:\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 216, "column_number": 5, "text": "local variable 'recommended_internal_format' is assigned to but never used", "physical_line": "    recommended_internal_format = None\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 228, "column_number": 1, "text": "Found commented out code", "physical_line": "    #logging.info(f\"The top_format is {top_format}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 228, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #logging.info(f\"The top_format is {top_format}\")\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 234, "column_number": 1, "text": "Found commented out code", "physical_line": "    #logging.info(f\"The top_value_type is {top_value_type}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 234, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #logging.info(f\"The top_value_type is {top_value_type}\")\n"}, {"code": "B007", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 257, "column_number": 17, "text": "Loop control variable 'i' not used within the loop body. If this is intended, start the name with an underscore.", "physical_line": "            for i in range(srd_type_rank):\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 270, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return recommended_type\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 273, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_param_candidates(config_name: str, db_name: str):\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 276, "column_number": 1, "text": "Found commented out code", "physical_line": "    #raw_param_query = db_sesh.query(Param_raw).all()\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 276, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #raw_param_query = db_sesh.query(Param_raw).all()\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 296, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_param_link_candidate_records(param_raw_record: ParameterRaw, ref_dict: dict):\n"}, {"code": "E225", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 305, "column_number": 57, "text": "missing whitespace around operator", "physical_line": "                new_record.source_entity_type = 'PARAM.'+ param_attrib_name\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 316, "column_number": 1, "text": "Cognitive complexity is too high (10 > 7)", "physical_line": "def create_param_link_candidates(config_name: str, db_name: str):\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 316, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def create_param_link_candidates(config_name: str, db_name: str):\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 337, "column_number": 1, "text": "Cognitive complexity is too high (45 > 7)", "physical_line": "def identify_param_references(config_name: str, db_name: str, overwrite_flag: bool = False):\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 337, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def identify_param_references(config_name: str, db_name: str, overwrite_flag: bool = False):\n"}, {"code": "CFQ001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 337, "column_number": 1, "text": "Function identify_param_references has length 129 that exceeds max allowed length 100", "physical_line": "def identify_param_references(config_name: str, db_name: str, overwrite_flag: bool = False):\n"}, {"code": "E711", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 344, "column_number": 49, "text": "comparison to None should be 'if cond is None:'", "physical_line": "            and_(EntityLinkRaw.target_entity_id == None, EntityLinkRaw.target_entity_ext_id == None)).all()\n"}, {"code": "E711", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 344, "column_number": 93, "text": "comparison to None should be 'if cond is None:'", "physical_line": "            and_(EntityLinkRaw.target_entity_id == None, EntityLinkRaw.target_entity_ext_id == None)).all()\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 359, "column_number": 13, "text": "local variable 'source_doc_ref_dict' is assigned to but never used", "physical_line": "            source_doc_ref_dict = {}\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 398, "column_number": 1, "text": "Found commented out code", "physical_line": "            #srd_ref_number = re.match(r'[0-9]', rpr.reference_string)\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 398, "column_number": 13, "text": "block comment should start with '# '", "physical_line": "            #srd_ref_number = re.match(r'[0-9]', rpr.reference_string)\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 424, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.doc_version,\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 425, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.doc_last_saved,\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 426, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.doc_issue,\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 427, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.doc_created,\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 428, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.srd_id,\n"}, {"code": "E128", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 429, "column_number": 35, "text": "continuation line under-indented for visual indent", "physical_line": "                                  SRDStructureRaw.srd_version).filter(SRDStructureRaw.doc_ref == ref_srd_id.strip())\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 432, "column_number": 25, "text": "local variable 'lsc_doc_last_saved' is assigned to but never used", "physical_line": "                        lsc_doc_last_saved = datetime.datetime.strptime(lsc.doc_last_saved, '%d.%m.%Y')\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 434, "column_number": 25, "text": "local variable 'lsc_doc_created' is assigned to but never used", "physical_line": "                        lsc_doc_created = datetime.datetime.strptime(lsc.doc_created, '%d.%m.%Y')\n"}, {"code": "F841", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 435, "column_number": 25, "text": "local variable 'source_req_doc_last_saved' is assigned to but never used", "physical_line": "                        source_req_doc_last_saved = datetime.datetime.strptime(source_req.doc_last_saved, '%d.%m.%Y')\n"}, {"code": "E117", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 440, "column_number": 33, "text": "over-indented", "physical_line": "                                linked_srds.add((lsc.srd_id,lsc.srd_version))\n"}, {"code": "E231", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 440, "column_number": 60, "text": "missing whitespace after ','", "physical_line": "                                linked_srds.add((lsc.srd_id,lsc.srd_version))\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 469, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def get_condition_tags_from_string(in_string: str) -> dict:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 469, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_condition_tags_from_string(in_string: str) -> dict:\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 475, "column_number": 1, "text": "Found commented out code", "physical_line": "        #'entry': ['\\(\\s*[\u00a3a-zA-Z]{1,10}\\s*\\||\\s*[a-zA-Z]{1,10}\\s*\\|\\)', '(?:\\(\\s*)([a-zA-Z]+)(?:\\s*\\|)', '(?:\\(\\s*)([a-zA-Z]+\\|)'],\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 475, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #'entry': ['\\(\\s*[\u00a3a-zA-Z]{1,10}\\s*\\||\\s*[a-zA-Z]{1,10}\\s*\\|\\)', '(?:\\(\\s*)([a-zA-Z]+)(?:\\s*\\|)', '(?:\\(\\s*)([a-zA-Z]+\\|)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 22, "text": "invalid escape sequence '\\('", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 26, "text": "invalid escape sequence '\\s'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 40, "text": "invalid escape sequence '\\s'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 43, "text": "invalid escape sequence '\\|'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 48, "text": "invalid escape sequence '\\s'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 62, "text": "invalid escape sequence '\\s'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 65, "text": "invalid escape sequence '\\)'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 476, "column_number": 74, "text": "invalid escape sequence '\\$'", "physical_line": "        'entry': ['((\\()(\\s*[\u00a3a-zA-Z_]+\\s*\\|)+(\\s*[\u00a3a-zA-Z_]+\\s*\\)))', '(\\$[a-zA-Z_]*)'],\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 20, "text": "invalid escape sequence '\\{'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 22, "text": "invalid escape sequence '\\s'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 36, "text": "invalid escape sequence '\\s'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 39, "text": "invalid escape sequence '\\}'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 51, "text": "invalid escape sequence '\\|'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 54, "text": "invalid escape sequence '\\('", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 62, "text": "invalid escape sequence '\\s'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 88, "text": "invalid escape sequence '\\s'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 95, "text": "invalid escape sequence '\\|'", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 478, "column_number": 98, "text": "invalid escape sequence '\\('", "physical_line": "        'exit': ['(\\{\\s*[a-zA-Z-#]+\\s*\\})', '(?<!(\\||\\())((?:\\s|[a-zA-Z])\u00a3([a-zA-Z_-]+)\\s*(?!(\\||\\()))']\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 496, "column_number": 1, "text": "Cognitive complexity is too high (18 > 7)", "physical_line": "def load_raw_param_conditions(config_name: str, db_name: str):\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 496, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def load_raw_param_conditions(config_name: str, db_name: str):\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 522, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def is_numeric_range(param_range_def: str):\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 524, "column_number": 25, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"^(D:\\s*)?([0-9])?\\s*([+-]?([0-9]*[.])?[0-9]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9]*[.])?[0-9]+).*$\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 524, "column_number": 38, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"^(D:\\s*)?([0-9])?\\s*([+-]?([0-9]*[.])?[0-9]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9]*[.])?[0-9]+).*$\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 524, "column_number": 66, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"^(D:\\s*)?([0-9])?\\s*([+-]?([0-9]*[.])?[0-9]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9]*[.])?[0-9]+).*$\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 524, "column_number": 79, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"^(D:\\s*)?([0-9])?\\s*([+-]?([0-9]*[.])?[0-9]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9]*[.])?[0-9]+).*$\",\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 529, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def split_numeric_range(param_range_def: str) -> dict:\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 535, "column_number": 28, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"(D[:.]?\\s*)?([0-9]\\s+)?([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 535, "column_number": 39, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"(D[:.]?\\s*)?([0-9]\\s+)?([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 535, "column_number": 75, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"(D[:.]?\\s*)?([0-9]\\s+)?([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*\",\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 535, "column_number": 88, "text": "invalid escape sequence '\\s'", "physical_line": "    num_range_pattern = \\\n        re.compile(\"(D[:.]?\\s*)?([0-9]\\s+)?([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+)\\s*(\\\\.{2,3})\\s*([+-]?([0-9\\'\u2019]*[.])?[0-9\\'\u2019]+).*\",\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 538, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return pattern_parts\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 541, "column_number": 1, "text": "Cognitive complexity is too high (20 > 7)", "physical_line": "def parse_numeric_value_range(numeric_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 541, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_numeric_value_range(numeric_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "CFQ004", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 541, "column_number": 1, "text": "Function \"parse_numeric_value_range\" has 5 returns that exceeds max allowed 3", "physical_line": "def parse_numeric_value_range(numeric_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 541, "column_number": 56, "text": "Use 'Optional[str]' instead of 'Union[str, None]'", "physical_line": "def parse_numeric_value_range(numeric_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 541, "column_number": 77, "text": "Use 'Optional[dict]' instead of 'Union[dict, None]'", "physical_line": "def parse_numeric_value_range(numeric_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "R505", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 548, "column_number": 5, "text": "unnecessary else after return statement.", "physical_line": "    if not numeric_constraint_dict['range_from'] or not numeric_constraint_dict['range_to']:\n"}, {"code": "SIM102", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 553, "column_number": 5, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "    if 'range_to_int_part' in numeric_constraint_dict:\n"}, {"code": "SIM102", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 556, "column_number": 5, "text": "Use a single if-statement instead of nested if-statements", "physical_line": "    if 'range_from_int_part' in numeric_constraint_dict:\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 586, "column_number": 1, "text": "Cognitive complexity is too high (14 > 7)", "physical_line": "def parse_str_value_range(str_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 586, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_str_value_range(str_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 586, "column_number": 48, "text": "Use 'Optional[str]' instead of 'Union[str, None]'", "physical_line": "def parse_str_value_range(str_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 586, "column_number": 69, "text": "Use 'Optional[dict]' instead of 'Union[dict, None]'", "physical_line": "def parse_str_value_range(str_value_range_str: Union[str, None]) -> Union[dict, None]:\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 40, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 58, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 70, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 77, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 89, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 589, "column_number": 109, "text": "invalid escape sequence '\\s'", "physical_line": "    split_patterns = {'length_range': '\\s*(?i)(any(?:[,]?\\s*))?(L)(?:\\s?[:.]\\s*)([0-9]+)\\s*(?:[\u2013-]|[.]{2,4})\\s*([0-9]+)',\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 590, "column_number": 35, "text": "invalid escape sequence '\\['", "physical_line": "                      'lookup': '(\\[[a-zA-Z\\s]+\\])'}\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 590, "column_number": 44, "text": "invalid escape sequence '\\s'", "physical_line": "                      'lookup': '(\\[[a-zA-Z\\s]+\\])'}\n"}, {"code": "W605", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 590, "column_number": 48, "text": "invalid escape sequence '\\]'", "physical_line": "                      'lookup': '(\\[[a-zA-Z\\s]+\\])'}\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 594, "column_number": 1, "text": "Found commented out code", "physical_line": "        # str_constraint_dict.update({'raw_matches': str_range_parts})\n"}, {"code": "E226", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 599, "column_number": 59, "text": "missing whitespace around arithmetic operator", "physical_line": "            min_len = int(str_range_parts[length_start_idx+1])\n"}, {"code": "E226", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 600, "column_number": 59, "text": "missing whitespace around arithmetic operator", "physical_line": "            max_len = int(str_range_parts[length_start_idx+2])\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 621, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_sel_value_range(sel_value_range_str: Union[str, None]):\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 621, "column_number": 48, "text": "Use 'Optional[str]' instead of 'Union[str, None]'", "physical_line": "def parse_sel_value_range(sel_value_range_str: Union[str, None]):\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 623, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return sel_constraint_dict\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 626, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def parse_object_value_range(numeric_value_range_str: Union[str, None]):\n"}, {"code": "SIM907", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 626, "column_number": 55, "text": "Use 'Optional[str]' instead of 'Union[str, None]'", "physical_line": "def parse_object_value_range(numeric_value_range_str: Union[str, None]):\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 628, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return numeric_constraint_dict\n"}, {"code": "CCR001", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 631, "column_number": 1, "text": "Cognitive complexity is too high (8 > 7)", "physical_line": "def get_param_domain():\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 631, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_param_domain():\n"}, {"code": "CFQ004", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 631, "column_number": 1, "text": "Function \"get_param_domain\" has 8 returns that exceeds max allowed 3", "physical_line": "def get_param_domain():\n"}, {"code": "R505", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 635, "column_number": 5, "text": "unnecessary elif after return statement.", "physical_line": "    if data_type == 'REFERENCE':\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 635, "column_number": 8, "text": "Use logical or ((data_type == 'REFERENCE') or (data_type == 'UNKNOWN')) and a single body", "physical_line": "    if data_type == 'REFERENCE':\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 638, "column_number": 10, "text": "Use logical or ((data_type == 'UNKNOWN') or (data_type == 'FOR')) and a single body", "physical_line": "    elif data_type == 'UNKNOWN':\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 638, "column_number": 10, "text": "Use logical or ((data_type == 'UNKNOWN') or (data_type == 'FOR')) and a single body", "physical_line": "    elif data_type == 'UNKNOWN':\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "SIM114", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 653, "column_number": 10, "text": "Use logical or ((data_type in ('INT', 'FPN')) or (data_type in ('OBJ.GENERIC', 'LIST'))) and a single body", "physical_line": "    elif data_type in ('INT', 'FPN'):\n"}, {"code": "W292", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 657, "column_number": 97, "text": "no newline at end of file", "physical_line": "    # Check the value range in the original raw parameter record, if the data type requires that"}, {"code": "W292", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 657, "column_number": 97, "text": "no newline at end of file", "physical_line": "    # Check the value range in the original raw parameter record, if the data type requires that"}, {"code": "W292", "filename": ".\\utils\\requirement_analysis\\param_analysis.py", "line_number": 657, "column_number": 97, "text": "no newline at end of file", "physical_line": "    # Check the value range in the original raw parameter record, if the data type requires that"}], ".\\utils\\requirement_analysis\\reqs_ado.py": [{"code": "D100", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "from utils.ado.tafsync import  requirements as req\n"}, {"code": "E271", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 1, "column_number": 30, "text": "multiple spaces after keyword", "physical_line": "from utils.ado.tafsync import  requirements as req\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 8, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def extract_all_from_ado(config_name, home_ado_config_name):\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 11, "column_number": 5, "text": "block comment should start with '# '", "physical_line": "    #for req_id, req_obj in all_reqs.items():\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 12, "column_number": 1, "text": "Found commented out code", "physical_line": "        #print(f\"Req ID: {req_id}, description: {req_obj.fields['System.Description']}\")\n"}, {"code": "E116", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 12, "column_number": 9, "text": "unexpected indentation (comment)", "physical_line": "        #print(f\"Req ID: {req_id}, description: {req_obj.fields['System.Description']}\")\n"}, {"code": "E265", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 12, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #print(f\"Req ID: {req_id}, description: {req_obj.fields['System.Description']}\")\n"}, {"code": "R504", "filename": ".\\utils\\requirement_analysis\\reqs_ado.py", "line_number": 13, "column_number": 12, "text": "unnecessary variable assignment before return statement.", "physical_line": "    return all_reqs\n"}], ".\\utils\\requirement_analysis\\req_description.py": [{"code": "D100", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import re\n"}, {"code": "E303", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 13, "column_number": 1, "text": "too many blank lines (3)", "physical_line": "tafdb.init_db('DEV', 'taf')\n"}, {"code": "E302", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 21, "column_number": 1, "text": "expected 2 blank lines, found 1", "physical_line": "@Language.component(\"set_custom_boundaries\")\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 22, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def set_custom_boundaries(doc):\n"}, {"code": "E305", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 28, "column_number": 1, "text": "expected 2 blank lines after class or function definition, found 1", "physical_line": "nlp.add_pipe(\"set_custom_boundaries\", before=\"parser\")\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 32, "column_number": 1, "text": "Found commented out code", "physical_line": "#  \"Starting with Python 3.9, you can use list[str] as a type annotation, which doesn't require importing anything.\"\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 33, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def split_req_to_items(req: Requirement) -> List[RequirementItem]:\n"}, {"code": "E800", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 35, "column_number": 1, "text": "Found commented out code", "physical_line": "    # (mgt.req_item_sequence)\n"}, {"code": "D103", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 60, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def itemize_all_reqs():\n"}, {"code": "W292", "filename": ".\\utils\\requirement_analysis\\req_description.py", "line_number": 69, "column_number": 20, "text": "no newline at end of file", "physical_line": "    db_sesh.close()"}], ".\\utils\\srd\\msword.py": [{"code": "D100", "filename": ".\\utils\\srd\\msword.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public module", "physical_line": "import shutil\n"}, {"code": "F401", "filename": ".\\utils\\srd\\msword.py", "line_number": 1, "column_number": 1, "text": "'shutil' imported but unused", "physical_line": "import shutil\n"}, {"code": "CCR001", "filename": ".\\utils\\srd\\msword.py", "line_number": 17, "column_number": 1, "text": "Cognitive complexity is too high (21 > 7)", "physical_line": "def clean_srd(input_file_name_path: str, output_path: str) -> dict:\n"}, {"code": "D205", "filename": ".\\utils\\srd\\msword.py", "line_number": 18, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n    The clean_word_srd() helper function's main purpose is to make sure that the SRD documents used in the\n    autoNOmated requirement analysis process contain fewer errors by:\n    #. Removing the comments and revisions\n    #. Updating the MSWord 'Fields', so references to other documents and chapters are correct\n\n    :param input_file_name_path:\n    :param output_path:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\srd\\msword.py", "line_number": 18, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n    The clean_word_srd() helper function's main purpose is to make sure that the SRD documents used in the\n    autoNOmated requirement analysis process contain fewer errors by:\n    #. Removing the comments and revisions\n    #. Updating the MSWord 'Fields', so references to other documents and chapters are correct\n\n    :param input_file_name_path:\n    :param output_path:\n    :return:\n    \"\"\"\n"}, {"code": "D401", "filename": ".\\utils\\srd\\msword.py", "line_number": 18, "column_number": 1, "text": "First line should be in imperative mood; try rephrasing", "physical_line": "    \"\"\"\n    The clean_word_srd() helper function's main purpose is to make sure that the SRD documents used in the\n    autoNOmated requirement analysis process contain fewer errors by:\n    #. Removing the comments and revisions\n    #. Updating the MSWord 'Fields', so references to other documents and chapters are correct\n\n    :param input_file_name_path:\n    :param output_path:\n    :return:\n    \"\"\"\n"}, {"code": "B012", "filename": ".\\utils\\srd\\msword.py", "line_number": 101, "column_number": 9, "text": "return/continue/break inside finally blocks cause exceptions to be silenced. Exceptions should be silenced in except blocks. Control statements can be moved outside the finally block.", "physical_line": "        return doc_meta\n"}, {"code": "D205", "filename": ".\\utils\\srd\\msword.py", "line_number": 105, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param docx_file_path:\n    :param output_dir_path:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\srd\\msword.py", "line_number": 105, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param docx_file_path:\n    :param output_dir_path:\n    :return:\n    \"\"\"\n"}, {"code": "B008", "filename": ".\\utils\\srd\\msword.py", "line_number": 117, "column_number": 42, "text": "Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.", "physical_line": "def bulk_to_html(input_directory: Path = Path('input'), output_directory: Path = Path('output'),\n"}, {"code": "B008", "filename": ".\\utils\\srd\\msword.py", "line_number": 117, "column_number": 82, "text": "Do not perform function calls in argument defaults.  The call is performed only once at function definition time. All calls to your function will reuse the result of that definition-time function call.  If this is intended, assign the function call to a module-level variable and use that variable as a default value.", "physical_line": "def bulk_to_html(input_directory: Path = Path('input'), output_directory: Path = Path('output'),\n"}, {"code": "D205", "filename": ".\\utils\\srd\\msword.py", "line_number": 119, "column_number": 1, "text": "1 blank line required between summary line and description", "physical_line": "    \"\"\"\n\n    :param input_directory:\n    :param output_directory:\n    :param file_name_pattern:\n    :return:\n    \"\"\"\n"}, {"code": "D400", "filename": ".\\utils\\srd\\msword.py", "line_number": 119, "column_number": 1, "text": "First line should end with a period", "physical_line": "    \"\"\"\n\n    :param input_directory:\n    :param output_directory:\n    :param file_name_pattern:\n    :return:\n    \"\"\"\n"}, {"code": "R506", "filename": ".\\utils\\srd\\msword.py", "line_number": 127, "column_number": 5, "text": "unnecessary elif after raise statement.", "physical_line": "    if not input_directory.exists():\n"}, {"code": "E800", "filename": ".\\utils\\srd\\msword.py", "line_number": 137, "column_number": 1, "text": "Found commented out code", "physical_line": "        #outpath = 'unittests/test_resources/req_analysis/input'\n"}, {"code": "E265", "filename": ".\\utils\\srd\\msword.py", "line_number": 137, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #outpath = 'unittests/test_resources/req_analysis/input'\n"}, {"code": "E800", "filename": ".\\utils\\srd\\msword.py", "line_number": 138, "column_number": 1, "text": "Found commented out code", "physical_line": "        #shutil.copy(str(input_docx), str(f\"{outpath}/{input_docx.name}\"))\n"}, {"code": "E265", "filename": ".\\utils\\srd\\msword.py", "line_number": 138, "column_number": 9, "text": "block comment should start with '# '", "physical_line": "        #shutil.copy(str(input_docx), str(f\"{outpath}/{input_docx.name}\"))\n"}, {"code": "CCR001", "filename": ".\\utils\\srd\\msword.py", "line_number": 156, "column_number": 1, "text": "Cognitive complexity is too high (13 > 7)", "physical_line": "def get_srd_doc_props(table):\n"}, {"code": "D103", "filename": ".\\utils\\srd\\msword.py", "line_number": 156, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_srd_doc_props(table):\n"}, {"code": "CCR001", "filename": ".\\utils\\srd\\msword.py", "line_number": 191, "column_number": 1, "text": "Cognitive complexity is too high (9 > 7)", "physical_line": "def get_req_table_attributes(table):\n"}, {"code": "D103", "filename": ".\\utils\\srd\\msword.py", "line_number": 191, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_req_table_attributes(table):\n"}, {"code": "ECE001", "filename": ".\\utils\\srd\\msword.py", "line_number": 205, "column_number": 13, "text": "Expression is too complex (11.0 > 7)", "physical_line": "            link_list = {ref_id: ref_doc for ref_id, ref_doc in\n"}, {"code": "CCR001", "filename": ".\\utils\\srd\\msword.py", "line_number": 223, "column_number": 1, "text": "Cognitive complexity is too high (37 > 7)", "physical_line": "def get_srd_structure(srd_file_details):\n"}, {"code": "D103", "filename": ".\\utils\\srd\\msword.py", "line_number": 223, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def get_srd_structure(srd_file_details):\n"}, {"code": "CFQ001", "filename": ".\\utils\\srd\\msword.py", "line_number": 223, "column_number": 1, "text": "Function get_srd_structure has length 110 that exceeds max allowed length 100", "physical_line": "def get_srd_structure(srd_file_details):\n"}, {"code": "F841", "filename": ".\\utils\\srd\\msword.py", "line_number": 241, "column_number": 9, "text": "local variable 'tables' is assigned to but never used", "physical_line": "        tables = soup.findAll(\"table\")\n"}, {"code": "E800", "filename": ".\\utils\\srd\\msword.py", "line_number": 242, "column_number": 1, "text": "Found commented out code", "physical_line": "        # print(f\"Headings: {headings}\")\n"}, {"code": "E800", "filename": ".\\utils\\srd\\msword.py", "line_number": 271, "column_number": 1, "text": "Found commented out code", "physical_line": "            # print(f\"Heading: {heading}, sibling: {[type(nxt_sbl) for nxt_sbl in heading.next_siblings]}\")\n"}, {"code": "W605", "filename": ".\\utils\\srd\\msword.py", "line_number": 272, "column_number": 72, "text": "invalid escape sequence '\\.'", "physical_line": "            if re.match(\"^h[1-6]$\", req_elem.name) and re.match(\"([1-9]\\.{0,1})([0-9]\\.{0,}){0,9}[0-9]{0,1}\",\n"}, {"code": "W605", "filename": ".\\utils\\srd\\msword.py", "line_number": 272, "column_number": 86, "text": "invalid escape sequence '\\.'", "physical_line": "            if re.match(\"^h[1-6]$\", req_elem.name) and re.match(\"([1-9]\\.{0,1})([0-9]\\.{0,}){0,9}[0-9]{0,1}\",\n"}, {"code": "E800", "filename": ".\\utils\\srd\\msword.py", "line_number": 282, "column_number": 1, "text": "Found commented out code", "physical_line": "                # print(f\"Parent: {chapter_number} - {parent_chapter}\")\n"}, {"code": "T201", "filename": ".\\utils\\srd\\msword.py", "line_number": 310, "column_number": 25, "text": "print found.", "physical_line": "                        print(f\"Something is wrong here, the chapter {chapter_number} is \"\n"}, {"code": "CCR001", "filename": ".\\utils\\srd\\msword.py", "line_number": 336, "column_number": 1, "text": "Cognitive complexity is too high (27 > 7)", "physical_line": "def consolidate_srd_structure(srd_struct: dict):\n"}, {"code": "D103", "filename": ".\\utils\\srd\\msword.py", "line_number": 336, "column_number": 1, "text": "Missing docstring in public function", "physical_line": "def consolidate_srd_structure(srd_struct: dict):\n"}, {"code": "F841", "filename": ".\\utils\\srd\\msword.py", "line_number": 364, "column_number": 17, "text": "local variable 'req_id' is assigned to but never used", "physical_line": "                req_id = req_item_id\n"}, {"code": "SIM114", "filename": ".\\utils\\srd\\msword.py", "line_number": 368, "column_number": 20, "text": "Use logical or ((def_key not in req) or (req[def_key] == '')) and a single body", "physical_line": "                if def_key not in req:\n"}], ".\\utils\\srd\\__init__.py": [{"code": "D104", "filename": ".\\utils\\srd\\__init__.py", "line_number": 1, "column_number": 1, "text": "Missing docstring in public package", "physical_line": null}]}